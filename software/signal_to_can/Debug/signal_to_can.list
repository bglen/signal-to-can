
signal_to_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004488  08004488  00005488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004534  08004534  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004534  08004534  0000601c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004534  08004534  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004534  08004534  00005534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004538  08004538  00005538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800453c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000001c  08004558  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004558  000061f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ff3  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200f  00000000  00000000  0000e037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  00010048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005dc  00000000  00000000  00010830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b2d  00000000  00000000  00010e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a56d  00000000  00000000  00029939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7ee  00000000  00000000  00033ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c00  00000000  00000000  000be6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000c02d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004470 	.word	0x08004470

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08004470 	.word	0x08004470

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fbc3 	bl	80009b4 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fb4b 	bl	80008d4 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fbb5 	bl	80009b4 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fbab 	bl	80009b4 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb59 	bl	8000924 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb4f 	bl	8000924 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	@ 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 ff8b 	bl	80011c0 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	@ 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fd21 	bl	8000cf8 <__aeabi_fsub>
 80002b6:	f000 ff83 	bl	80011c0 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fadd>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	024b      	lsls	r3, r1, #9
 80002c8:	0a5a      	lsrs	r2, r3, #9
 80002ca:	4694      	mov	ip, r2
 80002cc:	004a      	lsls	r2, r1, #1
 80002ce:	0fc9      	lsrs	r1, r1, #31
 80002d0:	46ce      	mov	lr, r9
 80002d2:	4647      	mov	r7, r8
 80002d4:	4689      	mov	r9, r1
 80002d6:	0045      	lsls	r5, r0, #1
 80002d8:	0246      	lsls	r6, r0, #9
 80002da:	0e2d      	lsrs	r5, r5, #24
 80002dc:	0e12      	lsrs	r2, r2, #24
 80002de:	b580      	push	{r7, lr}
 80002e0:	0999      	lsrs	r1, r3, #6
 80002e2:	0a77      	lsrs	r7, r6, #9
 80002e4:	0fc4      	lsrs	r4, r0, #31
 80002e6:	09b6      	lsrs	r6, r6, #6
 80002e8:	1aab      	subs	r3, r5, r2
 80002ea:	454c      	cmp	r4, r9
 80002ec:	d020      	beq.n	8000330 <__aeabi_fadd+0x6c>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	dd0c      	ble.n	800030c <__aeabi_fadd+0x48>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d134      	bne.n	8000360 <__aeabi_fadd+0x9c>
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d02a      	beq.n	8000350 <__aeabi_fadd+0x8c>
 80002fa:	1e5a      	subs	r2, r3, #1
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d100      	bne.n	8000302 <__aeabi_fadd+0x3e>
 8000300:	e08f      	b.n	8000422 <__aeabi_fadd+0x15e>
 8000302:	2bff      	cmp	r3, #255	@ 0xff
 8000304:	d100      	bne.n	8000308 <__aeabi_fadd+0x44>
 8000306:	e0cd      	b.n	80004a4 <__aeabi_fadd+0x1e0>
 8000308:	0013      	movs	r3, r2
 800030a:	e02f      	b.n	800036c <__aeabi_fadd+0xa8>
 800030c:	2b00      	cmp	r3, #0
 800030e:	d060      	beq.n	80003d2 <__aeabi_fadd+0x10e>
 8000310:	1b53      	subs	r3, r2, r5
 8000312:	2d00      	cmp	r5, #0
 8000314:	d000      	beq.n	8000318 <__aeabi_fadd+0x54>
 8000316:	e0ee      	b.n	80004f6 <__aeabi_fadd+0x232>
 8000318:	2e00      	cmp	r6, #0
 800031a:	d100      	bne.n	800031e <__aeabi_fadd+0x5a>
 800031c:	e13e      	b.n	800059c <__aeabi_fadd+0x2d8>
 800031e:	1e5c      	subs	r4, r3, #1
 8000320:	2b01      	cmp	r3, #1
 8000322:	d100      	bne.n	8000326 <__aeabi_fadd+0x62>
 8000324:	e16b      	b.n	80005fe <__aeabi_fadd+0x33a>
 8000326:	2bff      	cmp	r3, #255	@ 0xff
 8000328:	d100      	bne.n	800032c <__aeabi_fadd+0x68>
 800032a:	e0b9      	b.n	80004a0 <__aeabi_fadd+0x1dc>
 800032c:	0023      	movs	r3, r4
 800032e:	e0e7      	b.n	8000500 <__aeabi_fadd+0x23c>
 8000330:	2b00      	cmp	r3, #0
 8000332:	dc00      	bgt.n	8000336 <__aeabi_fadd+0x72>
 8000334:	e0a4      	b.n	8000480 <__aeabi_fadd+0x1bc>
 8000336:	2a00      	cmp	r2, #0
 8000338:	d069      	beq.n	800040e <__aeabi_fadd+0x14a>
 800033a:	2dff      	cmp	r5, #255	@ 0xff
 800033c:	d100      	bne.n	8000340 <__aeabi_fadd+0x7c>
 800033e:	e0b1      	b.n	80004a4 <__aeabi_fadd+0x1e0>
 8000340:	2280      	movs	r2, #128	@ 0x80
 8000342:	04d2      	lsls	r2, r2, #19
 8000344:	4311      	orrs	r1, r2
 8000346:	2b1b      	cmp	r3, #27
 8000348:	dc00      	bgt.n	800034c <__aeabi_fadd+0x88>
 800034a:	e0e9      	b.n	8000520 <__aeabi_fadd+0x25c>
 800034c:	002b      	movs	r3, r5
 800034e:	3605      	adds	r6, #5
 8000350:	08f7      	lsrs	r7, r6, #3
 8000352:	2bff      	cmp	r3, #255	@ 0xff
 8000354:	d100      	bne.n	8000358 <__aeabi_fadd+0x94>
 8000356:	e0a5      	b.n	80004a4 <__aeabi_fadd+0x1e0>
 8000358:	027a      	lsls	r2, r7, #9
 800035a:	0a52      	lsrs	r2, r2, #9
 800035c:	b2d8      	uxtb	r0, r3
 800035e:	e030      	b.n	80003c2 <__aeabi_fadd+0xfe>
 8000360:	2dff      	cmp	r5, #255	@ 0xff
 8000362:	d100      	bne.n	8000366 <__aeabi_fadd+0xa2>
 8000364:	e09e      	b.n	80004a4 <__aeabi_fadd+0x1e0>
 8000366:	2280      	movs	r2, #128	@ 0x80
 8000368:	04d2      	lsls	r2, r2, #19
 800036a:	4311      	orrs	r1, r2
 800036c:	2001      	movs	r0, #1
 800036e:	2b1b      	cmp	r3, #27
 8000370:	dc08      	bgt.n	8000384 <__aeabi_fadd+0xc0>
 8000372:	0008      	movs	r0, r1
 8000374:	2220      	movs	r2, #32
 8000376:	40d8      	lsrs	r0, r3
 8000378:	1ad3      	subs	r3, r2, r3
 800037a:	4099      	lsls	r1, r3
 800037c:	000b      	movs	r3, r1
 800037e:	1e5a      	subs	r2, r3, #1
 8000380:	4193      	sbcs	r3, r2
 8000382:	4318      	orrs	r0, r3
 8000384:	1a36      	subs	r6, r6, r0
 8000386:	0173      	lsls	r3, r6, #5
 8000388:	d400      	bmi.n	800038c <__aeabi_fadd+0xc8>
 800038a:	e071      	b.n	8000470 <__aeabi_fadd+0x1ac>
 800038c:	01b6      	lsls	r6, r6, #6
 800038e:	09b7      	lsrs	r7, r6, #6
 8000390:	0038      	movs	r0, r7
 8000392:	f000 ff7b 	bl	800128c <__clzsi2>
 8000396:	003b      	movs	r3, r7
 8000398:	3805      	subs	r0, #5
 800039a:	4083      	lsls	r3, r0
 800039c:	4285      	cmp	r5, r0
 800039e:	dd4d      	ble.n	800043c <__aeabi_fadd+0x178>
 80003a0:	4eb4      	ldr	r6, [pc, #720]	@ (8000674 <__aeabi_fadd+0x3b0>)
 80003a2:	1a2d      	subs	r5, r5, r0
 80003a4:	401e      	ands	r6, r3
 80003a6:	075a      	lsls	r2, r3, #29
 80003a8:	d068      	beq.n	800047c <__aeabi_fadd+0x1b8>
 80003aa:	220f      	movs	r2, #15
 80003ac:	4013      	ands	r3, r2
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	d064      	beq.n	800047c <__aeabi_fadd+0x1b8>
 80003b2:	3604      	adds	r6, #4
 80003b4:	0173      	lsls	r3, r6, #5
 80003b6:	d561      	bpl.n	800047c <__aeabi_fadd+0x1b8>
 80003b8:	1c68      	adds	r0, r5, #1
 80003ba:	2dfe      	cmp	r5, #254	@ 0xfe
 80003bc:	d154      	bne.n	8000468 <__aeabi_fadd+0x1a4>
 80003be:	20ff      	movs	r0, #255	@ 0xff
 80003c0:	2200      	movs	r2, #0
 80003c2:	05c0      	lsls	r0, r0, #23
 80003c4:	4310      	orrs	r0, r2
 80003c6:	07e4      	lsls	r4, r4, #31
 80003c8:	4320      	orrs	r0, r4
 80003ca:	bcc0      	pop	{r6, r7}
 80003cc:	46b9      	mov	r9, r7
 80003ce:	46b0      	mov	r8, r6
 80003d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003d2:	22fe      	movs	r2, #254	@ 0xfe
 80003d4:	4690      	mov	r8, r2
 80003d6:	1c68      	adds	r0, r5, #1
 80003d8:	0002      	movs	r2, r0
 80003da:	4640      	mov	r0, r8
 80003dc:	4210      	tst	r0, r2
 80003de:	d16b      	bne.n	80004b8 <__aeabi_fadd+0x1f4>
 80003e0:	2d00      	cmp	r5, #0
 80003e2:	d000      	beq.n	80003e6 <__aeabi_fadd+0x122>
 80003e4:	e0dd      	b.n	80005a2 <__aeabi_fadd+0x2de>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d100      	bne.n	80003ec <__aeabi_fadd+0x128>
 80003ea:	e102      	b.n	80005f2 <__aeabi_fadd+0x32e>
 80003ec:	2900      	cmp	r1, #0
 80003ee:	d0b3      	beq.n	8000358 <__aeabi_fadd+0x94>
 80003f0:	2280      	movs	r2, #128	@ 0x80
 80003f2:	1a77      	subs	r7, r6, r1
 80003f4:	04d2      	lsls	r2, r2, #19
 80003f6:	4217      	tst	r7, r2
 80003f8:	d100      	bne.n	80003fc <__aeabi_fadd+0x138>
 80003fa:	e136      	b.n	800066a <__aeabi_fadd+0x3a6>
 80003fc:	464c      	mov	r4, r9
 80003fe:	1b8e      	subs	r6, r1, r6
 8000400:	d061      	beq.n	80004c6 <__aeabi_fadd+0x202>
 8000402:	2001      	movs	r0, #1
 8000404:	4216      	tst	r6, r2
 8000406:	d130      	bne.n	800046a <__aeabi_fadd+0x1a6>
 8000408:	2300      	movs	r3, #0
 800040a:	08f7      	lsrs	r7, r6, #3
 800040c:	e7a4      	b.n	8000358 <__aeabi_fadd+0x94>
 800040e:	2900      	cmp	r1, #0
 8000410:	d09e      	beq.n	8000350 <__aeabi_fadd+0x8c>
 8000412:	1e5a      	subs	r2, r3, #1
 8000414:	2b01      	cmp	r3, #1
 8000416:	d100      	bne.n	800041a <__aeabi_fadd+0x156>
 8000418:	e0ca      	b.n	80005b0 <__aeabi_fadd+0x2ec>
 800041a:	2bff      	cmp	r3, #255	@ 0xff
 800041c:	d042      	beq.n	80004a4 <__aeabi_fadd+0x1e0>
 800041e:	0013      	movs	r3, r2
 8000420:	e791      	b.n	8000346 <__aeabi_fadd+0x82>
 8000422:	1a71      	subs	r1, r6, r1
 8000424:	014b      	lsls	r3, r1, #5
 8000426:	d400      	bmi.n	800042a <__aeabi_fadd+0x166>
 8000428:	e0d1      	b.n	80005ce <__aeabi_fadd+0x30a>
 800042a:	018f      	lsls	r7, r1, #6
 800042c:	09bf      	lsrs	r7, r7, #6
 800042e:	0038      	movs	r0, r7
 8000430:	f000 ff2c 	bl	800128c <__clzsi2>
 8000434:	003b      	movs	r3, r7
 8000436:	3805      	subs	r0, #5
 8000438:	4083      	lsls	r3, r0
 800043a:	2501      	movs	r5, #1
 800043c:	2220      	movs	r2, #32
 800043e:	1b40      	subs	r0, r0, r5
 8000440:	3001      	adds	r0, #1
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	001e      	movs	r6, r3
 8000446:	4093      	lsls	r3, r2
 8000448:	40c6      	lsrs	r6, r0
 800044a:	1e5a      	subs	r2, r3, #1
 800044c:	4193      	sbcs	r3, r2
 800044e:	431e      	orrs	r6, r3
 8000450:	d039      	beq.n	80004c6 <__aeabi_fadd+0x202>
 8000452:	0773      	lsls	r3, r6, #29
 8000454:	d100      	bne.n	8000458 <__aeabi_fadd+0x194>
 8000456:	e11b      	b.n	8000690 <__aeabi_fadd+0x3cc>
 8000458:	230f      	movs	r3, #15
 800045a:	2500      	movs	r5, #0
 800045c:	4033      	ands	r3, r6
 800045e:	2b04      	cmp	r3, #4
 8000460:	d1a7      	bne.n	80003b2 <__aeabi_fadd+0xee>
 8000462:	2001      	movs	r0, #1
 8000464:	0172      	lsls	r2, r6, #5
 8000466:	d57c      	bpl.n	8000562 <__aeabi_fadd+0x29e>
 8000468:	b2c0      	uxtb	r0, r0
 800046a:	01b2      	lsls	r2, r6, #6
 800046c:	0a52      	lsrs	r2, r2, #9
 800046e:	e7a8      	b.n	80003c2 <__aeabi_fadd+0xfe>
 8000470:	0773      	lsls	r3, r6, #29
 8000472:	d003      	beq.n	800047c <__aeabi_fadd+0x1b8>
 8000474:	230f      	movs	r3, #15
 8000476:	4033      	ands	r3, r6
 8000478:	2b04      	cmp	r3, #4
 800047a:	d19a      	bne.n	80003b2 <__aeabi_fadd+0xee>
 800047c:	002b      	movs	r3, r5
 800047e:	e767      	b.n	8000350 <__aeabi_fadd+0x8c>
 8000480:	2b00      	cmp	r3, #0
 8000482:	d023      	beq.n	80004cc <__aeabi_fadd+0x208>
 8000484:	1b53      	subs	r3, r2, r5
 8000486:	2d00      	cmp	r5, #0
 8000488:	d17b      	bne.n	8000582 <__aeabi_fadd+0x2be>
 800048a:	2e00      	cmp	r6, #0
 800048c:	d100      	bne.n	8000490 <__aeabi_fadd+0x1cc>
 800048e:	e086      	b.n	800059e <__aeabi_fadd+0x2da>
 8000490:	1e5d      	subs	r5, r3, #1
 8000492:	2b01      	cmp	r3, #1
 8000494:	d100      	bne.n	8000498 <__aeabi_fadd+0x1d4>
 8000496:	e08b      	b.n	80005b0 <__aeabi_fadd+0x2ec>
 8000498:	2bff      	cmp	r3, #255	@ 0xff
 800049a:	d002      	beq.n	80004a2 <__aeabi_fadd+0x1de>
 800049c:	002b      	movs	r3, r5
 800049e:	e075      	b.n	800058c <__aeabi_fadd+0x2c8>
 80004a0:	464c      	mov	r4, r9
 80004a2:	4667      	mov	r7, ip
 80004a4:	2f00      	cmp	r7, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_fadd+0x1e6>
 80004a8:	e789      	b.n	80003be <__aeabi_fadd+0xfa>
 80004aa:	2280      	movs	r2, #128	@ 0x80
 80004ac:	03d2      	lsls	r2, r2, #15
 80004ae:	433a      	orrs	r2, r7
 80004b0:	0252      	lsls	r2, r2, #9
 80004b2:	20ff      	movs	r0, #255	@ 0xff
 80004b4:	0a52      	lsrs	r2, r2, #9
 80004b6:	e784      	b.n	80003c2 <__aeabi_fadd+0xfe>
 80004b8:	1a77      	subs	r7, r6, r1
 80004ba:	017b      	lsls	r3, r7, #5
 80004bc:	d46b      	bmi.n	8000596 <__aeabi_fadd+0x2d2>
 80004be:	2f00      	cmp	r7, #0
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fadd+0x200>
 80004c2:	e765      	b.n	8000390 <__aeabi_fadd+0xcc>
 80004c4:	2400      	movs	r4, #0
 80004c6:	2000      	movs	r0, #0
 80004c8:	2200      	movs	r2, #0
 80004ca:	e77a      	b.n	80003c2 <__aeabi_fadd+0xfe>
 80004cc:	22fe      	movs	r2, #254	@ 0xfe
 80004ce:	1c6b      	adds	r3, r5, #1
 80004d0:	421a      	tst	r2, r3
 80004d2:	d149      	bne.n	8000568 <__aeabi_fadd+0x2a4>
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d000      	beq.n	80004da <__aeabi_fadd+0x216>
 80004d8:	e09f      	b.n	800061a <__aeabi_fadd+0x356>
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d100      	bne.n	80004e0 <__aeabi_fadd+0x21c>
 80004de:	e0ba      	b.n	8000656 <__aeabi_fadd+0x392>
 80004e0:	2900      	cmp	r1, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x222>
 80004e4:	e0cf      	b.n	8000686 <__aeabi_fadd+0x3c2>
 80004e6:	1872      	adds	r2, r6, r1
 80004e8:	0153      	lsls	r3, r2, #5
 80004ea:	d400      	bmi.n	80004ee <__aeabi_fadd+0x22a>
 80004ec:	e0cd      	b.n	800068a <__aeabi_fadd+0x3c6>
 80004ee:	0192      	lsls	r2, r2, #6
 80004f0:	2001      	movs	r0, #1
 80004f2:	0a52      	lsrs	r2, r2, #9
 80004f4:	e765      	b.n	80003c2 <__aeabi_fadd+0xfe>
 80004f6:	2aff      	cmp	r2, #255	@ 0xff
 80004f8:	d0d2      	beq.n	80004a0 <__aeabi_fadd+0x1dc>
 80004fa:	2080      	movs	r0, #128	@ 0x80
 80004fc:	04c0      	lsls	r0, r0, #19
 80004fe:	4306      	orrs	r6, r0
 8000500:	2001      	movs	r0, #1
 8000502:	2b1b      	cmp	r3, #27
 8000504:	dc08      	bgt.n	8000518 <__aeabi_fadd+0x254>
 8000506:	0030      	movs	r0, r6
 8000508:	2420      	movs	r4, #32
 800050a:	40d8      	lsrs	r0, r3
 800050c:	1ae3      	subs	r3, r4, r3
 800050e:	409e      	lsls	r6, r3
 8000510:	0033      	movs	r3, r6
 8000512:	1e5c      	subs	r4, r3, #1
 8000514:	41a3      	sbcs	r3, r4
 8000516:	4318      	orrs	r0, r3
 8000518:	464c      	mov	r4, r9
 800051a:	0015      	movs	r5, r2
 800051c:	1a0e      	subs	r6, r1, r0
 800051e:	e732      	b.n	8000386 <__aeabi_fadd+0xc2>
 8000520:	0008      	movs	r0, r1
 8000522:	2220      	movs	r2, #32
 8000524:	40d8      	lsrs	r0, r3
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	4099      	lsls	r1, r3
 800052a:	000b      	movs	r3, r1
 800052c:	1e5a      	subs	r2, r3, #1
 800052e:	4193      	sbcs	r3, r2
 8000530:	4303      	orrs	r3, r0
 8000532:	18f6      	adds	r6, r6, r3
 8000534:	0173      	lsls	r3, r6, #5
 8000536:	d59b      	bpl.n	8000470 <__aeabi_fadd+0x1ac>
 8000538:	3501      	adds	r5, #1
 800053a:	2dff      	cmp	r5, #255	@ 0xff
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0x27c>
 800053e:	e73e      	b.n	80003be <__aeabi_fadd+0xfa>
 8000540:	2301      	movs	r3, #1
 8000542:	494d      	ldr	r1, [pc, #308]	@ (8000678 <__aeabi_fadd+0x3b4>)
 8000544:	0872      	lsrs	r2, r6, #1
 8000546:	4033      	ands	r3, r6
 8000548:	400a      	ands	r2, r1
 800054a:	431a      	orrs	r2, r3
 800054c:	0016      	movs	r6, r2
 800054e:	0753      	lsls	r3, r2, #29
 8000550:	d004      	beq.n	800055c <__aeabi_fadd+0x298>
 8000552:	230f      	movs	r3, #15
 8000554:	4013      	ands	r3, r2
 8000556:	2b04      	cmp	r3, #4
 8000558:	d000      	beq.n	800055c <__aeabi_fadd+0x298>
 800055a:	e72a      	b.n	80003b2 <__aeabi_fadd+0xee>
 800055c:	0173      	lsls	r3, r6, #5
 800055e:	d500      	bpl.n	8000562 <__aeabi_fadd+0x29e>
 8000560:	e72a      	b.n	80003b8 <__aeabi_fadd+0xf4>
 8000562:	002b      	movs	r3, r5
 8000564:	08f7      	lsrs	r7, r6, #3
 8000566:	e6f7      	b.n	8000358 <__aeabi_fadd+0x94>
 8000568:	2bff      	cmp	r3, #255	@ 0xff
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x2aa>
 800056c:	e727      	b.n	80003be <__aeabi_fadd+0xfa>
 800056e:	1871      	adds	r1, r6, r1
 8000570:	0849      	lsrs	r1, r1, #1
 8000572:	074a      	lsls	r2, r1, #29
 8000574:	d02f      	beq.n	80005d6 <__aeabi_fadd+0x312>
 8000576:	220f      	movs	r2, #15
 8000578:	400a      	ands	r2, r1
 800057a:	2a04      	cmp	r2, #4
 800057c:	d02b      	beq.n	80005d6 <__aeabi_fadd+0x312>
 800057e:	1d0e      	adds	r6, r1, #4
 8000580:	e6e6      	b.n	8000350 <__aeabi_fadd+0x8c>
 8000582:	2aff      	cmp	r2, #255	@ 0xff
 8000584:	d08d      	beq.n	80004a2 <__aeabi_fadd+0x1de>
 8000586:	2080      	movs	r0, #128	@ 0x80
 8000588:	04c0      	lsls	r0, r0, #19
 800058a:	4306      	orrs	r6, r0
 800058c:	2b1b      	cmp	r3, #27
 800058e:	dd24      	ble.n	80005da <__aeabi_fadd+0x316>
 8000590:	0013      	movs	r3, r2
 8000592:	1d4e      	adds	r6, r1, #5
 8000594:	e6dc      	b.n	8000350 <__aeabi_fadd+0x8c>
 8000596:	464c      	mov	r4, r9
 8000598:	1b8f      	subs	r7, r1, r6
 800059a:	e6f9      	b.n	8000390 <__aeabi_fadd+0xcc>
 800059c:	464c      	mov	r4, r9
 800059e:	000e      	movs	r6, r1
 80005a0:	e6d6      	b.n	8000350 <__aeabi_fadd+0x8c>
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d149      	bne.n	800063a <__aeabi_fadd+0x376>
 80005a6:	2900      	cmp	r1, #0
 80005a8:	d068      	beq.n	800067c <__aeabi_fadd+0x3b8>
 80005aa:	4667      	mov	r7, ip
 80005ac:	464c      	mov	r4, r9
 80005ae:	e77c      	b.n	80004aa <__aeabi_fadd+0x1e6>
 80005b0:	1870      	adds	r0, r6, r1
 80005b2:	0143      	lsls	r3, r0, #5
 80005b4:	d574      	bpl.n	80006a0 <__aeabi_fadd+0x3dc>
 80005b6:	4930      	ldr	r1, [pc, #192]	@ (8000678 <__aeabi_fadd+0x3b4>)
 80005b8:	0840      	lsrs	r0, r0, #1
 80005ba:	4001      	ands	r1, r0
 80005bc:	0743      	lsls	r3, r0, #29
 80005be:	d009      	beq.n	80005d4 <__aeabi_fadd+0x310>
 80005c0:	230f      	movs	r3, #15
 80005c2:	4003      	ands	r3, r0
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d005      	beq.n	80005d4 <__aeabi_fadd+0x310>
 80005c8:	2302      	movs	r3, #2
 80005ca:	1d0e      	adds	r6, r1, #4
 80005cc:	e6c0      	b.n	8000350 <__aeabi_fadd+0x8c>
 80005ce:	2301      	movs	r3, #1
 80005d0:	08cf      	lsrs	r7, r1, #3
 80005d2:	e6c1      	b.n	8000358 <__aeabi_fadd+0x94>
 80005d4:	2302      	movs	r3, #2
 80005d6:	08cf      	lsrs	r7, r1, #3
 80005d8:	e6be      	b.n	8000358 <__aeabi_fadd+0x94>
 80005da:	2520      	movs	r5, #32
 80005dc:	0030      	movs	r0, r6
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	1aeb      	subs	r3, r5, r3
 80005e2:	409e      	lsls	r6, r3
 80005e4:	0033      	movs	r3, r6
 80005e6:	1e5d      	subs	r5, r3, #1
 80005e8:	41ab      	sbcs	r3, r5
 80005ea:	4303      	orrs	r3, r0
 80005ec:	0015      	movs	r5, r2
 80005ee:	185e      	adds	r6, r3, r1
 80005f0:	e7a0      	b.n	8000534 <__aeabi_fadd+0x270>
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_fadd+0x334>
 80005f6:	e765      	b.n	80004c4 <__aeabi_fadd+0x200>
 80005f8:	464c      	mov	r4, r9
 80005fa:	4667      	mov	r7, ip
 80005fc:	e6ac      	b.n	8000358 <__aeabi_fadd+0x94>
 80005fe:	1b8f      	subs	r7, r1, r6
 8000600:	017b      	lsls	r3, r7, #5
 8000602:	d52e      	bpl.n	8000662 <__aeabi_fadd+0x39e>
 8000604:	01bf      	lsls	r7, r7, #6
 8000606:	09bf      	lsrs	r7, r7, #6
 8000608:	0038      	movs	r0, r7
 800060a:	f000 fe3f 	bl	800128c <__clzsi2>
 800060e:	003b      	movs	r3, r7
 8000610:	3805      	subs	r0, #5
 8000612:	4083      	lsls	r3, r0
 8000614:	464c      	mov	r4, r9
 8000616:	3501      	adds	r5, #1
 8000618:	e710      	b.n	800043c <__aeabi_fadd+0x178>
 800061a:	2e00      	cmp	r6, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x35c>
 800061e:	e740      	b.n	80004a2 <__aeabi_fadd+0x1de>
 8000620:	2900      	cmp	r1, #0
 8000622:	d100      	bne.n	8000626 <__aeabi_fadd+0x362>
 8000624:	e741      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000626:	2380      	movs	r3, #128	@ 0x80
 8000628:	03db      	lsls	r3, r3, #15
 800062a:	429f      	cmp	r7, r3
 800062c:	d200      	bcs.n	8000630 <__aeabi_fadd+0x36c>
 800062e:	e73c      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000630:	459c      	cmp	ip, r3
 8000632:	d300      	bcc.n	8000636 <__aeabi_fadd+0x372>
 8000634:	e739      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000636:	4667      	mov	r7, ip
 8000638:	e737      	b.n	80004aa <__aeabi_fadd+0x1e6>
 800063a:	2900      	cmp	r1, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fadd+0x37c>
 800063e:	e734      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000640:	2380      	movs	r3, #128	@ 0x80
 8000642:	03db      	lsls	r3, r3, #15
 8000644:	429f      	cmp	r7, r3
 8000646:	d200      	bcs.n	800064a <__aeabi_fadd+0x386>
 8000648:	e72f      	b.n	80004aa <__aeabi_fadd+0x1e6>
 800064a:	459c      	cmp	ip, r3
 800064c:	d300      	bcc.n	8000650 <__aeabi_fadd+0x38c>
 800064e:	e72c      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000650:	464c      	mov	r4, r9
 8000652:	4667      	mov	r7, ip
 8000654:	e729      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000656:	2900      	cmp	r1, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fadd+0x398>
 800065a:	e734      	b.n	80004c6 <__aeabi_fadd+0x202>
 800065c:	2300      	movs	r3, #0
 800065e:	08cf      	lsrs	r7, r1, #3
 8000660:	e67a      	b.n	8000358 <__aeabi_fadd+0x94>
 8000662:	464c      	mov	r4, r9
 8000664:	2301      	movs	r3, #1
 8000666:	08ff      	lsrs	r7, r7, #3
 8000668:	e676      	b.n	8000358 <__aeabi_fadd+0x94>
 800066a:	2f00      	cmp	r7, #0
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x3ac>
 800066e:	e729      	b.n	80004c4 <__aeabi_fadd+0x200>
 8000670:	08ff      	lsrs	r7, r7, #3
 8000672:	e671      	b.n	8000358 <__aeabi_fadd+0x94>
 8000674:	fbffffff 	.word	0xfbffffff
 8000678:	7dffffff 	.word	0x7dffffff
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	2400      	movs	r4, #0
 8000680:	20ff      	movs	r0, #255	@ 0xff
 8000682:	03d2      	lsls	r2, r2, #15
 8000684:	e69d      	b.n	80003c2 <__aeabi_fadd+0xfe>
 8000686:	2300      	movs	r3, #0
 8000688:	e666      	b.n	8000358 <__aeabi_fadd+0x94>
 800068a:	2300      	movs	r3, #0
 800068c:	08d7      	lsrs	r7, r2, #3
 800068e:	e663      	b.n	8000358 <__aeabi_fadd+0x94>
 8000690:	2001      	movs	r0, #1
 8000692:	0172      	lsls	r2, r6, #5
 8000694:	d500      	bpl.n	8000698 <__aeabi_fadd+0x3d4>
 8000696:	e6e7      	b.n	8000468 <__aeabi_fadd+0x1a4>
 8000698:	0031      	movs	r1, r6
 800069a:	2300      	movs	r3, #0
 800069c:	08cf      	lsrs	r7, r1, #3
 800069e:	e65b      	b.n	8000358 <__aeabi_fadd+0x94>
 80006a0:	2301      	movs	r3, #1
 80006a2:	08c7      	lsrs	r7, r0, #3
 80006a4:	e658      	b.n	8000358 <__aeabi_fadd+0x94>
 80006a6:	46c0      	nop			@ (mov r8, r8)

080006a8 <__aeabi_fdiv>:
 80006a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006aa:	4646      	mov	r6, r8
 80006ac:	464f      	mov	r7, r9
 80006ae:	46d6      	mov	lr, sl
 80006b0:	0245      	lsls	r5, r0, #9
 80006b2:	b5c0      	push	{r6, r7, lr}
 80006b4:	0fc3      	lsrs	r3, r0, #31
 80006b6:	0047      	lsls	r7, r0, #1
 80006b8:	4698      	mov	r8, r3
 80006ba:	1c0e      	adds	r6, r1, #0
 80006bc:	0a6d      	lsrs	r5, r5, #9
 80006be:	0e3f      	lsrs	r7, r7, #24
 80006c0:	d05b      	beq.n	800077a <__aeabi_fdiv+0xd2>
 80006c2:	2fff      	cmp	r7, #255	@ 0xff
 80006c4:	d021      	beq.n	800070a <__aeabi_fdiv+0x62>
 80006c6:	2380      	movs	r3, #128	@ 0x80
 80006c8:	00ed      	lsls	r5, r5, #3
 80006ca:	04db      	lsls	r3, r3, #19
 80006cc:	431d      	orrs	r5, r3
 80006ce:	2300      	movs	r3, #0
 80006d0:	4699      	mov	r9, r3
 80006d2:	469a      	mov	sl, r3
 80006d4:	3f7f      	subs	r7, #127	@ 0x7f
 80006d6:	0274      	lsls	r4, r6, #9
 80006d8:	0073      	lsls	r3, r6, #1
 80006da:	0a64      	lsrs	r4, r4, #9
 80006dc:	0e1b      	lsrs	r3, r3, #24
 80006de:	0ff6      	lsrs	r6, r6, #31
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d020      	beq.n	8000726 <__aeabi_fdiv+0x7e>
 80006e4:	2bff      	cmp	r3, #255	@ 0xff
 80006e6:	d043      	beq.n	8000770 <__aeabi_fdiv+0xc8>
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	2000      	movs	r0, #0
 80006ec:	00e4      	lsls	r4, r4, #3
 80006ee:	04d2      	lsls	r2, r2, #19
 80006f0:	4314      	orrs	r4, r2
 80006f2:	3b7f      	subs	r3, #127	@ 0x7f
 80006f4:	4642      	mov	r2, r8
 80006f6:	1aff      	subs	r7, r7, r3
 80006f8:	464b      	mov	r3, r9
 80006fa:	4072      	eors	r2, r6
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d900      	bls.n	8000702 <__aeabi_fdiv+0x5a>
 8000700:	e09d      	b.n	800083e <__aeabi_fdiv+0x196>
 8000702:	4971      	ldr	r1, [pc, #452]	@ (80008c8 <__aeabi_fdiv+0x220>)
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	58cb      	ldr	r3, [r1, r3]
 8000708:	469f      	mov	pc, r3
 800070a:	2d00      	cmp	r5, #0
 800070c:	d15a      	bne.n	80007c4 <__aeabi_fdiv+0x11c>
 800070e:	2308      	movs	r3, #8
 8000710:	4699      	mov	r9, r3
 8000712:	3b06      	subs	r3, #6
 8000714:	0274      	lsls	r4, r6, #9
 8000716:	469a      	mov	sl, r3
 8000718:	0073      	lsls	r3, r6, #1
 800071a:	27ff      	movs	r7, #255	@ 0xff
 800071c:	0a64      	lsrs	r4, r4, #9
 800071e:	0e1b      	lsrs	r3, r3, #24
 8000720:	0ff6      	lsrs	r6, r6, #31
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1de      	bne.n	80006e4 <__aeabi_fdiv+0x3c>
 8000726:	2c00      	cmp	r4, #0
 8000728:	d13b      	bne.n	80007a2 <__aeabi_fdiv+0xfa>
 800072a:	2301      	movs	r3, #1
 800072c:	4642      	mov	r2, r8
 800072e:	4649      	mov	r1, r9
 8000730:	4072      	eors	r2, r6
 8000732:	4319      	orrs	r1, r3
 8000734:	290e      	cmp	r1, #14
 8000736:	d818      	bhi.n	800076a <__aeabi_fdiv+0xc2>
 8000738:	4864      	ldr	r0, [pc, #400]	@ (80008cc <__aeabi_fdiv+0x224>)
 800073a:	0089      	lsls	r1, r1, #2
 800073c:	5841      	ldr	r1, [r0, r1]
 800073e:	468f      	mov	pc, r1
 8000740:	4653      	mov	r3, sl
 8000742:	2b02      	cmp	r3, #2
 8000744:	d100      	bne.n	8000748 <__aeabi_fdiv+0xa0>
 8000746:	e0b8      	b.n	80008ba <__aeabi_fdiv+0x212>
 8000748:	2b03      	cmp	r3, #3
 800074a:	d06e      	beq.n	800082a <__aeabi_fdiv+0x182>
 800074c:	4642      	mov	r2, r8
 800074e:	002c      	movs	r4, r5
 8000750:	2b01      	cmp	r3, #1
 8000752:	d140      	bne.n	80007d6 <__aeabi_fdiv+0x12e>
 8000754:	2000      	movs	r0, #0
 8000756:	2400      	movs	r4, #0
 8000758:	05c0      	lsls	r0, r0, #23
 800075a:	4320      	orrs	r0, r4
 800075c:	07d2      	lsls	r2, r2, #31
 800075e:	4310      	orrs	r0, r2
 8000760:	bce0      	pop	{r5, r6, r7}
 8000762:	46ba      	mov	sl, r7
 8000764:	46b1      	mov	r9, r6
 8000766:	46a8      	mov	r8, r5
 8000768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076a:	20ff      	movs	r0, #255	@ 0xff
 800076c:	2400      	movs	r4, #0
 800076e:	e7f3      	b.n	8000758 <__aeabi_fdiv+0xb0>
 8000770:	2c00      	cmp	r4, #0
 8000772:	d120      	bne.n	80007b6 <__aeabi_fdiv+0x10e>
 8000774:	2302      	movs	r3, #2
 8000776:	3fff      	subs	r7, #255	@ 0xff
 8000778:	e7d8      	b.n	800072c <__aeabi_fdiv+0x84>
 800077a:	2d00      	cmp	r5, #0
 800077c:	d105      	bne.n	800078a <__aeabi_fdiv+0xe2>
 800077e:	2304      	movs	r3, #4
 8000780:	4699      	mov	r9, r3
 8000782:	3b03      	subs	r3, #3
 8000784:	2700      	movs	r7, #0
 8000786:	469a      	mov	sl, r3
 8000788:	e7a5      	b.n	80006d6 <__aeabi_fdiv+0x2e>
 800078a:	0028      	movs	r0, r5
 800078c:	f000 fd7e 	bl	800128c <__clzsi2>
 8000790:	2776      	movs	r7, #118	@ 0x76
 8000792:	1f43      	subs	r3, r0, #5
 8000794:	409d      	lsls	r5, r3
 8000796:	2300      	movs	r3, #0
 8000798:	427f      	negs	r7, r7
 800079a:	4699      	mov	r9, r3
 800079c:	469a      	mov	sl, r3
 800079e:	1a3f      	subs	r7, r7, r0
 80007a0:	e799      	b.n	80006d6 <__aeabi_fdiv+0x2e>
 80007a2:	0020      	movs	r0, r4
 80007a4:	f000 fd72 	bl	800128c <__clzsi2>
 80007a8:	1f43      	subs	r3, r0, #5
 80007aa:	409c      	lsls	r4, r3
 80007ac:	2376      	movs	r3, #118	@ 0x76
 80007ae:	425b      	negs	r3, r3
 80007b0:	1a1b      	subs	r3, r3, r0
 80007b2:	2000      	movs	r0, #0
 80007b4:	e79e      	b.n	80006f4 <__aeabi_fdiv+0x4c>
 80007b6:	2303      	movs	r3, #3
 80007b8:	464a      	mov	r2, r9
 80007ba:	431a      	orrs	r2, r3
 80007bc:	4691      	mov	r9, r2
 80007be:	2003      	movs	r0, #3
 80007c0:	33fc      	adds	r3, #252	@ 0xfc
 80007c2:	e797      	b.n	80006f4 <__aeabi_fdiv+0x4c>
 80007c4:	230c      	movs	r3, #12
 80007c6:	4699      	mov	r9, r3
 80007c8:	3b09      	subs	r3, #9
 80007ca:	27ff      	movs	r7, #255	@ 0xff
 80007cc:	469a      	mov	sl, r3
 80007ce:	e782      	b.n	80006d6 <__aeabi_fdiv+0x2e>
 80007d0:	2803      	cmp	r0, #3
 80007d2:	d02c      	beq.n	800082e <__aeabi_fdiv+0x186>
 80007d4:	0032      	movs	r2, r6
 80007d6:	0038      	movs	r0, r7
 80007d8:	307f      	adds	r0, #127	@ 0x7f
 80007da:	2800      	cmp	r0, #0
 80007dc:	dd47      	ble.n	800086e <__aeabi_fdiv+0x1c6>
 80007de:	0763      	lsls	r3, r4, #29
 80007e0:	d004      	beq.n	80007ec <__aeabi_fdiv+0x144>
 80007e2:	230f      	movs	r3, #15
 80007e4:	4023      	ands	r3, r4
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d000      	beq.n	80007ec <__aeabi_fdiv+0x144>
 80007ea:	3404      	adds	r4, #4
 80007ec:	0123      	lsls	r3, r4, #4
 80007ee:	d503      	bpl.n	80007f8 <__aeabi_fdiv+0x150>
 80007f0:	0038      	movs	r0, r7
 80007f2:	4b37      	ldr	r3, [pc, #220]	@ (80008d0 <__aeabi_fdiv+0x228>)
 80007f4:	3080      	adds	r0, #128	@ 0x80
 80007f6:	401c      	ands	r4, r3
 80007f8:	28fe      	cmp	r0, #254	@ 0xfe
 80007fa:	dcb6      	bgt.n	800076a <__aeabi_fdiv+0xc2>
 80007fc:	01a4      	lsls	r4, r4, #6
 80007fe:	0a64      	lsrs	r4, r4, #9
 8000800:	b2c0      	uxtb	r0, r0
 8000802:	e7a9      	b.n	8000758 <__aeabi_fdiv+0xb0>
 8000804:	2480      	movs	r4, #128	@ 0x80
 8000806:	2200      	movs	r2, #0
 8000808:	20ff      	movs	r0, #255	@ 0xff
 800080a:	03e4      	lsls	r4, r4, #15
 800080c:	e7a4      	b.n	8000758 <__aeabi_fdiv+0xb0>
 800080e:	2380      	movs	r3, #128	@ 0x80
 8000810:	03db      	lsls	r3, r3, #15
 8000812:	421d      	tst	r5, r3
 8000814:	d001      	beq.n	800081a <__aeabi_fdiv+0x172>
 8000816:	421c      	tst	r4, r3
 8000818:	d00b      	beq.n	8000832 <__aeabi_fdiv+0x18a>
 800081a:	2480      	movs	r4, #128	@ 0x80
 800081c:	03e4      	lsls	r4, r4, #15
 800081e:	432c      	orrs	r4, r5
 8000820:	0264      	lsls	r4, r4, #9
 8000822:	4642      	mov	r2, r8
 8000824:	20ff      	movs	r0, #255	@ 0xff
 8000826:	0a64      	lsrs	r4, r4, #9
 8000828:	e796      	b.n	8000758 <__aeabi_fdiv+0xb0>
 800082a:	4646      	mov	r6, r8
 800082c:	002c      	movs	r4, r5
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	03db      	lsls	r3, r3, #15
 8000832:	431c      	orrs	r4, r3
 8000834:	0264      	lsls	r4, r4, #9
 8000836:	0032      	movs	r2, r6
 8000838:	20ff      	movs	r0, #255	@ 0xff
 800083a:	0a64      	lsrs	r4, r4, #9
 800083c:	e78c      	b.n	8000758 <__aeabi_fdiv+0xb0>
 800083e:	016d      	lsls	r5, r5, #5
 8000840:	0160      	lsls	r0, r4, #5
 8000842:	4285      	cmp	r5, r0
 8000844:	d22d      	bcs.n	80008a2 <__aeabi_fdiv+0x1fa>
 8000846:	231b      	movs	r3, #27
 8000848:	2400      	movs	r4, #0
 800084a:	3f01      	subs	r7, #1
 800084c:	2601      	movs	r6, #1
 800084e:	0029      	movs	r1, r5
 8000850:	0064      	lsls	r4, r4, #1
 8000852:	006d      	lsls	r5, r5, #1
 8000854:	2900      	cmp	r1, #0
 8000856:	db01      	blt.n	800085c <__aeabi_fdiv+0x1b4>
 8000858:	4285      	cmp	r5, r0
 800085a:	d301      	bcc.n	8000860 <__aeabi_fdiv+0x1b8>
 800085c:	1a2d      	subs	r5, r5, r0
 800085e:	4334      	orrs	r4, r6
 8000860:	3b01      	subs	r3, #1
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f3      	bne.n	800084e <__aeabi_fdiv+0x1a6>
 8000866:	1e6b      	subs	r3, r5, #1
 8000868:	419d      	sbcs	r5, r3
 800086a:	432c      	orrs	r4, r5
 800086c:	e7b3      	b.n	80007d6 <__aeabi_fdiv+0x12e>
 800086e:	2301      	movs	r3, #1
 8000870:	1a1b      	subs	r3, r3, r0
 8000872:	2b1b      	cmp	r3, #27
 8000874:	dd00      	ble.n	8000878 <__aeabi_fdiv+0x1d0>
 8000876:	e76d      	b.n	8000754 <__aeabi_fdiv+0xac>
 8000878:	0021      	movs	r1, r4
 800087a:	379e      	adds	r7, #158	@ 0x9e
 800087c:	40d9      	lsrs	r1, r3
 800087e:	40bc      	lsls	r4, r7
 8000880:	000b      	movs	r3, r1
 8000882:	1e61      	subs	r1, r4, #1
 8000884:	418c      	sbcs	r4, r1
 8000886:	4323      	orrs	r3, r4
 8000888:	0759      	lsls	r1, r3, #29
 800088a:	d004      	beq.n	8000896 <__aeabi_fdiv+0x1ee>
 800088c:	210f      	movs	r1, #15
 800088e:	4019      	ands	r1, r3
 8000890:	2904      	cmp	r1, #4
 8000892:	d000      	beq.n	8000896 <__aeabi_fdiv+0x1ee>
 8000894:	3304      	adds	r3, #4
 8000896:	0159      	lsls	r1, r3, #5
 8000898:	d413      	bmi.n	80008c2 <__aeabi_fdiv+0x21a>
 800089a:	019b      	lsls	r3, r3, #6
 800089c:	2000      	movs	r0, #0
 800089e:	0a5c      	lsrs	r4, r3, #9
 80008a0:	e75a      	b.n	8000758 <__aeabi_fdiv+0xb0>
 80008a2:	231a      	movs	r3, #26
 80008a4:	2401      	movs	r4, #1
 80008a6:	1a2d      	subs	r5, r5, r0
 80008a8:	e7d0      	b.n	800084c <__aeabi_fdiv+0x1a4>
 80008aa:	1e98      	subs	r0, r3, #2
 80008ac:	4243      	negs	r3, r0
 80008ae:	4158      	adcs	r0, r3
 80008b0:	4240      	negs	r0, r0
 80008b2:	0032      	movs	r2, r6
 80008b4:	2400      	movs	r4, #0
 80008b6:	b2c0      	uxtb	r0, r0
 80008b8:	e74e      	b.n	8000758 <__aeabi_fdiv+0xb0>
 80008ba:	4642      	mov	r2, r8
 80008bc:	20ff      	movs	r0, #255	@ 0xff
 80008be:	2400      	movs	r4, #0
 80008c0:	e74a      	b.n	8000758 <__aeabi_fdiv+0xb0>
 80008c2:	2001      	movs	r0, #1
 80008c4:	2400      	movs	r4, #0
 80008c6:	e747      	b.n	8000758 <__aeabi_fdiv+0xb0>
 80008c8:	08004488 	.word	0x08004488
 80008cc:	080044c8 	.word	0x080044c8
 80008d0:	f7ffffff 	.word	0xf7ffffff

080008d4 <__eqsf2>:
 80008d4:	b570      	push	{r4, r5, r6, lr}
 80008d6:	0042      	lsls	r2, r0, #1
 80008d8:	024e      	lsls	r6, r1, #9
 80008da:	004c      	lsls	r4, r1, #1
 80008dc:	0245      	lsls	r5, r0, #9
 80008de:	0a6d      	lsrs	r5, r5, #9
 80008e0:	0e12      	lsrs	r2, r2, #24
 80008e2:	0fc3      	lsrs	r3, r0, #31
 80008e4:	0a76      	lsrs	r6, r6, #9
 80008e6:	0e24      	lsrs	r4, r4, #24
 80008e8:	0fc9      	lsrs	r1, r1, #31
 80008ea:	2aff      	cmp	r2, #255	@ 0xff
 80008ec:	d010      	beq.n	8000910 <__eqsf2+0x3c>
 80008ee:	2cff      	cmp	r4, #255	@ 0xff
 80008f0:	d00c      	beq.n	800090c <__eqsf2+0x38>
 80008f2:	2001      	movs	r0, #1
 80008f4:	42a2      	cmp	r2, r4
 80008f6:	d10a      	bne.n	800090e <__eqsf2+0x3a>
 80008f8:	42b5      	cmp	r5, r6
 80008fa:	d108      	bne.n	800090e <__eqsf2+0x3a>
 80008fc:	428b      	cmp	r3, r1
 80008fe:	d00f      	beq.n	8000920 <__eqsf2+0x4c>
 8000900:	2a00      	cmp	r2, #0
 8000902:	d104      	bne.n	800090e <__eqsf2+0x3a>
 8000904:	0028      	movs	r0, r5
 8000906:	1e43      	subs	r3, r0, #1
 8000908:	4198      	sbcs	r0, r3
 800090a:	e000      	b.n	800090e <__eqsf2+0x3a>
 800090c:	2001      	movs	r0, #1
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	2001      	movs	r0, #1
 8000912:	2cff      	cmp	r4, #255	@ 0xff
 8000914:	d1fb      	bne.n	800090e <__eqsf2+0x3a>
 8000916:	4335      	orrs	r5, r6
 8000918:	d1f9      	bne.n	800090e <__eqsf2+0x3a>
 800091a:	404b      	eors	r3, r1
 800091c:	0018      	movs	r0, r3
 800091e:	e7f6      	b.n	800090e <__eqsf2+0x3a>
 8000920:	2000      	movs	r0, #0
 8000922:	e7f4      	b.n	800090e <__eqsf2+0x3a>

08000924 <__gesf2>:
 8000924:	b530      	push	{r4, r5, lr}
 8000926:	0042      	lsls	r2, r0, #1
 8000928:	0244      	lsls	r4, r0, #9
 800092a:	024d      	lsls	r5, r1, #9
 800092c:	0fc3      	lsrs	r3, r0, #31
 800092e:	0048      	lsls	r0, r1, #1
 8000930:	0a64      	lsrs	r4, r4, #9
 8000932:	0e12      	lsrs	r2, r2, #24
 8000934:	0a6d      	lsrs	r5, r5, #9
 8000936:	0e00      	lsrs	r0, r0, #24
 8000938:	0fc9      	lsrs	r1, r1, #31
 800093a:	2aff      	cmp	r2, #255	@ 0xff
 800093c:	d018      	beq.n	8000970 <__gesf2+0x4c>
 800093e:	28ff      	cmp	r0, #255	@ 0xff
 8000940:	d00a      	beq.n	8000958 <__gesf2+0x34>
 8000942:	2a00      	cmp	r2, #0
 8000944:	d11e      	bne.n	8000984 <__gesf2+0x60>
 8000946:	2800      	cmp	r0, #0
 8000948:	d10a      	bne.n	8000960 <__gesf2+0x3c>
 800094a:	2d00      	cmp	r5, #0
 800094c:	d029      	beq.n	80009a2 <__gesf2+0x7e>
 800094e:	2c00      	cmp	r4, #0
 8000950:	d12d      	bne.n	80009ae <__gesf2+0x8a>
 8000952:	0048      	lsls	r0, r1, #1
 8000954:	3801      	subs	r0, #1
 8000956:	bd30      	pop	{r4, r5, pc}
 8000958:	2d00      	cmp	r5, #0
 800095a:	d125      	bne.n	80009a8 <__gesf2+0x84>
 800095c:	2a00      	cmp	r2, #0
 800095e:	d101      	bne.n	8000964 <__gesf2+0x40>
 8000960:	2c00      	cmp	r4, #0
 8000962:	d0f6      	beq.n	8000952 <__gesf2+0x2e>
 8000964:	428b      	cmp	r3, r1
 8000966:	d019      	beq.n	800099c <__gesf2+0x78>
 8000968:	2001      	movs	r0, #1
 800096a:	425b      	negs	r3, r3
 800096c:	4318      	orrs	r0, r3
 800096e:	e7f2      	b.n	8000956 <__gesf2+0x32>
 8000970:	2c00      	cmp	r4, #0
 8000972:	d119      	bne.n	80009a8 <__gesf2+0x84>
 8000974:	28ff      	cmp	r0, #255	@ 0xff
 8000976:	d1f7      	bne.n	8000968 <__gesf2+0x44>
 8000978:	2d00      	cmp	r5, #0
 800097a:	d115      	bne.n	80009a8 <__gesf2+0x84>
 800097c:	2000      	movs	r0, #0
 800097e:	428b      	cmp	r3, r1
 8000980:	d1f2      	bne.n	8000968 <__gesf2+0x44>
 8000982:	e7e8      	b.n	8000956 <__gesf2+0x32>
 8000984:	2800      	cmp	r0, #0
 8000986:	d0ef      	beq.n	8000968 <__gesf2+0x44>
 8000988:	428b      	cmp	r3, r1
 800098a:	d1ed      	bne.n	8000968 <__gesf2+0x44>
 800098c:	4282      	cmp	r2, r0
 800098e:	dceb      	bgt.n	8000968 <__gesf2+0x44>
 8000990:	db04      	blt.n	800099c <__gesf2+0x78>
 8000992:	42ac      	cmp	r4, r5
 8000994:	d8e8      	bhi.n	8000968 <__gesf2+0x44>
 8000996:	2000      	movs	r0, #0
 8000998:	42ac      	cmp	r4, r5
 800099a:	d2dc      	bcs.n	8000956 <__gesf2+0x32>
 800099c:	0058      	lsls	r0, r3, #1
 800099e:	3801      	subs	r0, #1
 80009a0:	e7d9      	b.n	8000956 <__gesf2+0x32>
 80009a2:	2c00      	cmp	r4, #0
 80009a4:	d0d7      	beq.n	8000956 <__gesf2+0x32>
 80009a6:	e7df      	b.n	8000968 <__gesf2+0x44>
 80009a8:	2002      	movs	r0, #2
 80009aa:	4240      	negs	r0, r0
 80009ac:	e7d3      	b.n	8000956 <__gesf2+0x32>
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d1da      	bne.n	8000968 <__gesf2+0x44>
 80009b2:	e7ee      	b.n	8000992 <__gesf2+0x6e>

080009b4 <__lesf2>:
 80009b4:	b530      	push	{r4, r5, lr}
 80009b6:	0042      	lsls	r2, r0, #1
 80009b8:	0244      	lsls	r4, r0, #9
 80009ba:	024d      	lsls	r5, r1, #9
 80009bc:	0fc3      	lsrs	r3, r0, #31
 80009be:	0048      	lsls	r0, r1, #1
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	0a6d      	lsrs	r5, r5, #9
 80009c6:	0e00      	lsrs	r0, r0, #24
 80009c8:	0fc9      	lsrs	r1, r1, #31
 80009ca:	2aff      	cmp	r2, #255	@ 0xff
 80009cc:	d017      	beq.n	80009fe <__lesf2+0x4a>
 80009ce:	28ff      	cmp	r0, #255	@ 0xff
 80009d0:	d00a      	beq.n	80009e8 <__lesf2+0x34>
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d11b      	bne.n	8000a0e <__lesf2+0x5a>
 80009d6:	2800      	cmp	r0, #0
 80009d8:	d10a      	bne.n	80009f0 <__lesf2+0x3c>
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d01d      	beq.n	8000a1a <__lesf2+0x66>
 80009de:	2c00      	cmp	r4, #0
 80009e0:	d12d      	bne.n	8000a3e <__lesf2+0x8a>
 80009e2:	0048      	lsls	r0, r1, #1
 80009e4:	3801      	subs	r0, #1
 80009e6:	e011      	b.n	8000a0c <__lesf2+0x58>
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d10e      	bne.n	8000a0a <__lesf2+0x56>
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	d101      	bne.n	80009f4 <__lesf2+0x40>
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	d0f6      	beq.n	80009e2 <__lesf2+0x2e>
 80009f4:	428b      	cmp	r3, r1
 80009f6:	d10c      	bne.n	8000a12 <__lesf2+0x5e>
 80009f8:	0058      	lsls	r0, r3, #1
 80009fa:	3801      	subs	r0, #1
 80009fc:	e006      	b.n	8000a0c <__lesf2+0x58>
 80009fe:	2c00      	cmp	r4, #0
 8000a00:	d103      	bne.n	8000a0a <__lesf2+0x56>
 8000a02:	28ff      	cmp	r0, #255	@ 0xff
 8000a04:	d105      	bne.n	8000a12 <__lesf2+0x5e>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d015      	beq.n	8000a36 <__lesf2+0x82>
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	bd30      	pop	{r4, r5, pc}
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d106      	bne.n	8000a20 <__lesf2+0x6c>
 8000a12:	2001      	movs	r0, #1
 8000a14:	425b      	negs	r3, r3
 8000a16:	4318      	orrs	r0, r3
 8000a18:	e7f8      	b.n	8000a0c <__lesf2+0x58>
 8000a1a:	2c00      	cmp	r4, #0
 8000a1c:	d0f6      	beq.n	8000a0c <__lesf2+0x58>
 8000a1e:	e7f8      	b.n	8000a12 <__lesf2+0x5e>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d1f6      	bne.n	8000a12 <__lesf2+0x5e>
 8000a24:	4282      	cmp	r2, r0
 8000a26:	dcf4      	bgt.n	8000a12 <__lesf2+0x5e>
 8000a28:	dbe6      	blt.n	80009f8 <__lesf2+0x44>
 8000a2a:	42ac      	cmp	r4, r5
 8000a2c:	d8f1      	bhi.n	8000a12 <__lesf2+0x5e>
 8000a2e:	2000      	movs	r0, #0
 8000a30:	42ac      	cmp	r4, r5
 8000a32:	d2eb      	bcs.n	8000a0c <__lesf2+0x58>
 8000a34:	e7e0      	b.n	80009f8 <__lesf2+0x44>
 8000a36:	2000      	movs	r0, #0
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	d1ea      	bne.n	8000a12 <__lesf2+0x5e>
 8000a3c:	e7e6      	b.n	8000a0c <__lesf2+0x58>
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	d1e7      	bne.n	8000a12 <__lesf2+0x5e>
 8000a42:	e7f2      	b.n	8000a2a <__lesf2+0x76>

08000a44 <__aeabi_fmul>:
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	464f      	mov	r7, r9
 8000a48:	4646      	mov	r6, r8
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	0044      	lsls	r4, r0, #1
 8000a4e:	b5c0      	push	{r6, r7, lr}
 8000a50:	0246      	lsls	r6, r0, #9
 8000a52:	1c0f      	adds	r7, r1, #0
 8000a54:	0a76      	lsrs	r6, r6, #9
 8000a56:	0e24      	lsrs	r4, r4, #24
 8000a58:	0fc5      	lsrs	r5, r0, #31
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fmul+0x1c>
 8000a5e:	e0da      	b.n	8000c16 <__aeabi_fmul+0x1d2>
 8000a60:	2cff      	cmp	r4, #255	@ 0xff
 8000a62:	d074      	beq.n	8000b4e <__aeabi_fmul+0x10a>
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	00f6      	lsls	r6, r6, #3
 8000a68:	04db      	lsls	r3, r3, #19
 8000a6a:	431e      	orrs	r6, r3
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	4699      	mov	r9, r3
 8000a70:	469a      	mov	sl, r3
 8000a72:	3c7f      	subs	r4, #127	@ 0x7f
 8000a74:	027b      	lsls	r3, r7, #9
 8000a76:	0a5b      	lsrs	r3, r3, #9
 8000a78:	4698      	mov	r8, r3
 8000a7a:	007b      	lsls	r3, r7, #1
 8000a7c:	0e1b      	lsrs	r3, r3, #24
 8000a7e:	0fff      	lsrs	r7, r7, #31
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d074      	beq.n	8000b6e <__aeabi_fmul+0x12a>
 8000a84:	2bff      	cmp	r3, #255	@ 0xff
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fmul+0x46>
 8000a88:	e08e      	b.n	8000ba8 <__aeabi_fmul+0x164>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	2180      	movs	r1, #128	@ 0x80
 8000a8e:	00d2      	lsls	r2, r2, #3
 8000a90:	04c9      	lsls	r1, r1, #19
 8000a92:	4311      	orrs	r1, r2
 8000a94:	3b7f      	subs	r3, #127	@ 0x7f
 8000a96:	002a      	movs	r2, r5
 8000a98:	18e4      	adds	r4, r4, r3
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	407a      	eors	r2, r7
 8000a9e:	4688      	mov	r8, r1
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	2b0a      	cmp	r3, #10
 8000aa4:	dc75      	bgt.n	8000b92 <__aeabi_fmul+0x14e>
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	dd0f      	ble.n	8000ace <__aeabi_fmul+0x8a>
 8000aae:	4649      	mov	r1, r9
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	408b      	lsls	r3, r1
 8000ab4:	21a6      	movs	r1, #166	@ 0xa6
 8000ab6:	00c9      	lsls	r1, r1, #3
 8000ab8:	420b      	tst	r3, r1
 8000aba:	d169      	bne.n	8000b90 <__aeabi_fmul+0x14c>
 8000abc:	2190      	movs	r1, #144	@ 0x90
 8000abe:	0089      	lsls	r1, r1, #2
 8000ac0:	420b      	tst	r3, r1
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_fmul+0x82>
 8000ac4:	e100      	b.n	8000cc8 <__aeabi_fmul+0x284>
 8000ac6:	2188      	movs	r1, #136	@ 0x88
 8000ac8:	4219      	tst	r1, r3
 8000aca:	d000      	beq.n	8000ace <__aeabi_fmul+0x8a>
 8000acc:	e0f5      	b.n	8000cba <__aeabi_fmul+0x276>
 8000ace:	4641      	mov	r1, r8
 8000ad0:	0409      	lsls	r1, r1, #16
 8000ad2:	0c09      	lsrs	r1, r1, #16
 8000ad4:	4643      	mov	r3, r8
 8000ad6:	0008      	movs	r0, r1
 8000ad8:	0c35      	lsrs	r5, r6, #16
 8000ada:	0436      	lsls	r6, r6, #16
 8000adc:	0c1b      	lsrs	r3, r3, #16
 8000ade:	0c36      	lsrs	r6, r6, #16
 8000ae0:	4370      	muls	r0, r6
 8000ae2:	4369      	muls	r1, r5
 8000ae4:	435e      	muls	r6, r3
 8000ae6:	435d      	muls	r5, r3
 8000ae8:	1876      	adds	r6, r6, r1
 8000aea:	0c03      	lsrs	r3, r0, #16
 8000aec:	199b      	adds	r3, r3, r6
 8000aee:	4299      	cmp	r1, r3
 8000af0:	d903      	bls.n	8000afa <__aeabi_fmul+0xb6>
 8000af2:	2180      	movs	r1, #128	@ 0x80
 8000af4:	0249      	lsls	r1, r1, #9
 8000af6:	468c      	mov	ip, r1
 8000af8:	4465      	add	r5, ip
 8000afa:	0400      	lsls	r0, r0, #16
 8000afc:	0419      	lsls	r1, r3, #16
 8000afe:	0c00      	lsrs	r0, r0, #16
 8000b00:	1809      	adds	r1, r1, r0
 8000b02:	018e      	lsls	r6, r1, #6
 8000b04:	1e70      	subs	r0, r6, #1
 8000b06:	4186      	sbcs	r6, r0
 8000b08:	0c1b      	lsrs	r3, r3, #16
 8000b0a:	0e89      	lsrs	r1, r1, #26
 8000b0c:	195b      	adds	r3, r3, r5
 8000b0e:	430e      	orrs	r6, r1
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	431e      	orrs	r6, r3
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	d46c      	bmi.n	8000bf2 <__aeabi_fmul+0x1ae>
 8000b18:	0023      	movs	r3, r4
 8000b1a:	337f      	adds	r3, #127	@ 0x7f
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	dc00      	bgt.n	8000b22 <__aeabi_fmul+0xde>
 8000b20:	e0b1      	b.n	8000c86 <__aeabi_fmul+0x242>
 8000b22:	0015      	movs	r5, r2
 8000b24:	0771      	lsls	r1, r6, #29
 8000b26:	d00b      	beq.n	8000b40 <__aeabi_fmul+0xfc>
 8000b28:	200f      	movs	r0, #15
 8000b2a:	0021      	movs	r1, r4
 8000b2c:	4030      	ands	r0, r6
 8000b2e:	2804      	cmp	r0, #4
 8000b30:	d006      	beq.n	8000b40 <__aeabi_fmul+0xfc>
 8000b32:	3604      	adds	r6, #4
 8000b34:	0132      	lsls	r2, r6, #4
 8000b36:	d503      	bpl.n	8000b40 <__aeabi_fmul+0xfc>
 8000b38:	4b6e      	ldr	r3, [pc, #440]	@ (8000cf4 <__aeabi_fmul+0x2b0>)
 8000b3a:	401e      	ands	r6, r3
 8000b3c:	000b      	movs	r3, r1
 8000b3e:	3380      	adds	r3, #128	@ 0x80
 8000b40:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b42:	dd00      	ble.n	8000b46 <__aeabi_fmul+0x102>
 8000b44:	e0bd      	b.n	8000cc2 <__aeabi_fmul+0x27e>
 8000b46:	01b2      	lsls	r2, r6, #6
 8000b48:	0a52      	lsrs	r2, r2, #9
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	e048      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d000      	beq.n	8000b54 <__aeabi_fmul+0x110>
 8000b52:	e092      	b.n	8000c7a <__aeabi_fmul+0x236>
 8000b54:	2308      	movs	r3, #8
 8000b56:	4699      	mov	r9, r3
 8000b58:	3b06      	subs	r3, #6
 8000b5a:	469a      	mov	sl, r3
 8000b5c:	027b      	lsls	r3, r7, #9
 8000b5e:	0a5b      	lsrs	r3, r3, #9
 8000b60:	4698      	mov	r8, r3
 8000b62:	007b      	lsls	r3, r7, #1
 8000b64:	24ff      	movs	r4, #255	@ 0xff
 8000b66:	0e1b      	lsrs	r3, r3, #24
 8000b68:	0fff      	lsrs	r7, r7, #31
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d18a      	bne.n	8000a84 <__aeabi_fmul+0x40>
 8000b6e:	4642      	mov	r2, r8
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	d164      	bne.n	8000c3e <__aeabi_fmul+0x1fa>
 8000b74:	4649      	mov	r1, r9
 8000b76:	3201      	adds	r2, #1
 8000b78:	4311      	orrs	r1, r2
 8000b7a:	4689      	mov	r9, r1
 8000b7c:	290a      	cmp	r1, #10
 8000b7e:	dc08      	bgt.n	8000b92 <__aeabi_fmul+0x14e>
 8000b80:	407d      	eors	r5, r7
 8000b82:	2001      	movs	r0, #1
 8000b84:	b2ea      	uxtb	r2, r5
 8000b86:	2902      	cmp	r1, #2
 8000b88:	dc91      	bgt.n	8000aae <__aeabi_fmul+0x6a>
 8000b8a:	0015      	movs	r5, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e027      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000b90:	0015      	movs	r5, r2
 8000b92:	4653      	mov	r3, sl
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fmul+0x156>
 8000b98:	e093      	b.n	8000cc2 <__aeabi_fmul+0x27e>
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d01a      	beq.n	8000bd4 <__aeabi_fmul+0x190>
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d12c      	bne.n	8000bfc <__aeabi_fmul+0x1b8>
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e01b      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000ba8:	4643      	mov	r3, r8
 8000baa:	34ff      	adds	r4, #255	@ 0xff
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d055      	beq.n	8000c5c <__aeabi_fmul+0x218>
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	464b      	mov	r3, r9
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	2b0a      	cmp	r3, #10
 8000bba:	dc00      	bgt.n	8000bbe <__aeabi_fmul+0x17a>
 8000bbc:	e092      	b.n	8000ce4 <__aeabi_fmul+0x2a0>
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d000      	beq.n	8000bc4 <__aeabi_fmul+0x180>
 8000bc2:	e08c      	b.n	8000cde <__aeabi_fmul+0x29a>
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	03d2      	lsls	r2, r2, #15
 8000bc8:	4216      	tst	r6, r2
 8000bca:	d003      	beq.n	8000bd4 <__aeabi_fmul+0x190>
 8000bcc:	4643      	mov	r3, r8
 8000bce:	4213      	tst	r3, r2
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fmul+0x190>
 8000bd2:	e07d      	b.n	8000cd0 <__aeabi_fmul+0x28c>
 8000bd4:	2280      	movs	r2, #128	@ 0x80
 8000bd6:	03d2      	lsls	r2, r2, #15
 8000bd8:	4332      	orrs	r2, r6
 8000bda:	0252      	lsls	r2, r2, #9
 8000bdc:	0a52      	lsrs	r2, r2, #9
 8000bde:	23ff      	movs	r3, #255	@ 0xff
 8000be0:	05d8      	lsls	r0, r3, #23
 8000be2:	07ed      	lsls	r5, r5, #31
 8000be4:	4310      	orrs	r0, r2
 8000be6:	4328      	orrs	r0, r5
 8000be8:	bce0      	pop	{r5, r6, r7}
 8000bea:	46ba      	mov	sl, r7
 8000bec:	46b1      	mov	r9, r6
 8000bee:	46a8      	mov	r8, r5
 8000bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	0015      	movs	r5, r2
 8000bf6:	0871      	lsrs	r1, r6, #1
 8000bf8:	401e      	ands	r6, r3
 8000bfa:	430e      	orrs	r6, r1
 8000bfc:	0023      	movs	r3, r4
 8000bfe:	3380      	adds	r3, #128	@ 0x80
 8000c00:	1c61      	adds	r1, r4, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	dd41      	ble.n	8000c8a <__aeabi_fmul+0x246>
 8000c06:	0772      	lsls	r2, r6, #29
 8000c08:	d094      	beq.n	8000b34 <__aeabi_fmul+0xf0>
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	4032      	ands	r2, r6
 8000c0e:	2a04      	cmp	r2, #4
 8000c10:	d000      	beq.n	8000c14 <__aeabi_fmul+0x1d0>
 8000c12:	e78e      	b.n	8000b32 <__aeabi_fmul+0xee>
 8000c14:	e78e      	b.n	8000b34 <__aeabi_fmul+0xf0>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d105      	bne.n	8000c26 <__aeabi_fmul+0x1e2>
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	3b03      	subs	r3, #3
 8000c20:	2400      	movs	r4, #0
 8000c22:	469a      	mov	sl, r3
 8000c24:	e726      	b.n	8000a74 <__aeabi_fmul+0x30>
 8000c26:	0030      	movs	r0, r6
 8000c28:	f000 fb30 	bl	800128c <__clzsi2>
 8000c2c:	2476      	movs	r4, #118	@ 0x76
 8000c2e:	1f43      	subs	r3, r0, #5
 8000c30:	409e      	lsls	r6, r3
 8000c32:	2300      	movs	r3, #0
 8000c34:	4264      	negs	r4, r4
 8000c36:	4699      	mov	r9, r3
 8000c38:	469a      	mov	sl, r3
 8000c3a:	1a24      	subs	r4, r4, r0
 8000c3c:	e71a      	b.n	8000a74 <__aeabi_fmul+0x30>
 8000c3e:	4640      	mov	r0, r8
 8000c40:	f000 fb24 	bl	800128c <__clzsi2>
 8000c44:	464b      	mov	r3, r9
 8000c46:	1a24      	subs	r4, r4, r0
 8000c48:	3c76      	subs	r4, #118	@ 0x76
 8000c4a:	2b0a      	cmp	r3, #10
 8000c4c:	dca1      	bgt.n	8000b92 <__aeabi_fmul+0x14e>
 8000c4e:	4643      	mov	r3, r8
 8000c50:	3805      	subs	r0, #5
 8000c52:	4083      	lsls	r3, r0
 8000c54:	407d      	eors	r5, r7
 8000c56:	4698      	mov	r8, r3
 8000c58:	b2ea      	uxtb	r2, r5
 8000c5a:	e724      	b.n	8000aa6 <__aeabi_fmul+0x62>
 8000c5c:	464a      	mov	r2, r9
 8000c5e:	3302      	adds	r3, #2
 8000c60:	4313      	orrs	r3, r2
 8000c62:	002a      	movs	r2, r5
 8000c64:	407a      	eors	r2, r7
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	2b0a      	cmp	r3, #10
 8000c6a:	dc92      	bgt.n	8000b92 <__aeabi_fmul+0x14e>
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	0015      	movs	r5, r2
 8000c70:	2900      	cmp	r1, #0
 8000c72:	d026      	beq.n	8000cc2 <__aeabi_fmul+0x27e>
 8000c74:	4699      	mov	r9, r3
 8000c76:	2002      	movs	r0, #2
 8000c78:	e719      	b.n	8000aae <__aeabi_fmul+0x6a>
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	4699      	mov	r9, r3
 8000c7e:	3b09      	subs	r3, #9
 8000c80:	24ff      	movs	r4, #255	@ 0xff
 8000c82:	469a      	mov	sl, r3
 8000c84:	e6f6      	b.n	8000a74 <__aeabi_fmul+0x30>
 8000c86:	0015      	movs	r5, r2
 8000c88:	0021      	movs	r1, r4
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b1b      	cmp	r3, #27
 8000c90:	dd00      	ble.n	8000c94 <__aeabi_fmul+0x250>
 8000c92:	e786      	b.n	8000ba2 <__aeabi_fmul+0x15e>
 8000c94:	319e      	adds	r1, #158	@ 0x9e
 8000c96:	0032      	movs	r2, r6
 8000c98:	408e      	lsls	r6, r1
 8000c9a:	40da      	lsrs	r2, r3
 8000c9c:	1e73      	subs	r3, r6, #1
 8000c9e:	419e      	sbcs	r6, r3
 8000ca0:	4332      	orrs	r2, r6
 8000ca2:	0753      	lsls	r3, r2, #29
 8000ca4:	d004      	beq.n	8000cb0 <__aeabi_fmul+0x26c>
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	4013      	ands	r3, r2
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d000      	beq.n	8000cb0 <__aeabi_fmul+0x26c>
 8000cae:	3204      	adds	r2, #4
 8000cb0:	0153      	lsls	r3, r2, #5
 8000cb2:	d510      	bpl.n	8000cd6 <__aeabi_fmul+0x292>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	e792      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000cba:	003d      	movs	r5, r7
 8000cbc:	4646      	mov	r6, r8
 8000cbe:	4682      	mov	sl, r0
 8000cc0:	e767      	b.n	8000b92 <__aeabi_fmul+0x14e>
 8000cc2:	23ff      	movs	r3, #255	@ 0xff
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e78b      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000cc8:	2280      	movs	r2, #128	@ 0x80
 8000cca:	2500      	movs	r5, #0
 8000ccc:	03d2      	lsls	r2, r2, #15
 8000cce:	e786      	b.n	8000bde <__aeabi_fmul+0x19a>
 8000cd0:	003d      	movs	r5, r7
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	e783      	b.n	8000bde <__aeabi_fmul+0x19a>
 8000cd6:	0192      	lsls	r2, r2, #6
 8000cd8:	2300      	movs	r3, #0
 8000cda:	0a52      	lsrs	r2, r2, #9
 8000cdc:	e780      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000cde:	003d      	movs	r5, r7
 8000ce0:	4646      	mov	r6, r8
 8000ce2:	e777      	b.n	8000bd4 <__aeabi_fmul+0x190>
 8000ce4:	002a      	movs	r2, r5
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	407a      	eors	r2, r7
 8000cea:	408b      	lsls	r3, r1
 8000cec:	2003      	movs	r0, #3
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	e6e9      	b.n	8000ac6 <__aeabi_fmul+0x82>
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	f7ffffff 	.word	0xf7ffffff

08000cf8 <__aeabi_fsub>:
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	4647      	mov	r7, r8
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	0243      	lsls	r3, r0, #9
 8000d00:	b580      	push	{r7, lr}
 8000d02:	0a5f      	lsrs	r7, r3, #9
 8000d04:	099b      	lsrs	r3, r3, #6
 8000d06:	0045      	lsls	r5, r0, #1
 8000d08:	004a      	lsls	r2, r1, #1
 8000d0a:	469c      	mov	ip, r3
 8000d0c:	024b      	lsls	r3, r1, #9
 8000d0e:	0fc4      	lsrs	r4, r0, #31
 8000d10:	0fce      	lsrs	r6, r1, #31
 8000d12:	0e2d      	lsrs	r5, r5, #24
 8000d14:	0a58      	lsrs	r0, r3, #9
 8000d16:	0e12      	lsrs	r2, r2, #24
 8000d18:	0999      	lsrs	r1, r3, #6
 8000d1a:	2aff      	cmp	r2, #255	@ 0xff
 8000d1c:	d06b      	beq.n	8000df6 <__aeabi_fsub+0xfe>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	405e      	eors	r6, r3
 8000d22:	1aab      	subs	r3, r5, r2
 8000d24:	42b4      	cmp	r4, r6
 8000d26:	d04b      	beq.n	8000dc0 <__aeabi_fsub+0xc8>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dc00      	bgt.n	8000d2e <__aeabi_fsub+0x36>
 8000d2c:	e0ff      	b.n	8000f2e <__aeabi_fsub+0x236>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x3c>
 8000d32:	e088      	b.n	8000e46 <__aeabi_fsub+0x14e>
 8000d34:	2dff      	cmp	r5, #255	@ 0xff
 8000d36:	d100      	bne.n	8000d3a <__aeabi_fsub+0x42>
 8000d38:	e0ef      	b.n	8000f1a <__aeabi_fsub+0x222>
 8000d3a:	2280      	movs	r2, #128	@ 0x80
 8000d3c:	04d2      	lsls	r2, r2, #19
 8000d3e:	4311      	orrs	r1, r2
 8000d40:	2001      	movs	r0, #1
 8000d42:	2b1b      	cmp	r3, #27
 8000d44:	dc08      	bgt.n	8000d58 <__aeabi_fsub+0x60>
 8000d46:	0008      	movs	r0, r1
 8000d48:	2220      	movs	r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4099      	lsls	r1, r3
 8000d50:	000b      	movs	r3, r1
 8000d52:	1e5a      	subs	r2, r3, #1
 8000d54:	4193      	sbcs	r3, r2
 8000d56:	4318      	orrs	r0, r3
 8000d58:	4663      	mov	r3, ip
 8000d5a:	1a1b      	subs	r3, r3, r0
 8000d5c:	469c      	mov	ip, r3
 8000d5e:	4663      	mov	r3, ip
 8000d60:	015b      	lsls	r3, r3, #5
 8000d62:	d400      	bmi.n	8000d66 <__aeabi_fsub+0x6e>
 8000d64:	e0cd      	b.n	8000f02 <__aeabi_fsub+0x20a>
 8000d66:	4663      	mov	r3, ip
 8000d68:	019f      	lsls	r7, r3, #6
 8000d6a:	09bf      	lsrs	r7, r7, #6
 8000d6c:	0038      	movs	r0, r7
 8000d6e:	f000 fa8d 	bl	800128c <__clzsi2>
 8000d72:	003b      	movs	r3, r7
 8000d74:	3805      	subs	r0, #5
 8000d76:	4083      	lsls	r3, r0
 8000d78:	4285      	cmp	r5, r0
 8000d7a:	dc00      	bgt.n	8000d7e <__aeabi_fsub+0x86>
 8000d7c:	e0a2      	b.n	8000ec4 <__aeabi_fsub+0x1cc>
 8000d7e:	4ab7      	ldr	r2, [pc, #732]	@ (800105c <__aeabi_fsub+0x364>)
 8000d80:	1a2d      	subs	r5, r5, r0
 8000d82:	401a      	ands	r2, r3
 8000d84:	4694      	mov	ip, r2
 8000d86:	075a      	lsls	r2, r3, #29
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fsub+0x94>
 8000d8a:	e0c3      	b.n	8000f14 <__aeabi_fsub+0x21c>
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x9e>
 8000d94:	e0be      	b.n	8000f14 <__aeabi_fsub+0x21c>
 8000d96:	2304      	movs	r3, #4
 8000d98:	4698      	mov	r8, r3
 8000d9a:	44c4      	add	ip, r8
 8000d9c:	4663      	mov	r3, ip
 8000d9e:	015b      	lsls	r3, r3, #5
 8000da0:	d400      	bmi.n	8000da4 <__aeabi_fsub+0xac>
 8000da2:	e0b7      	b.n	8000f14 <__aeabi_fsub+0x21c>
 8000da4:	1c68      	adds	r0, r5, #1
 8000da6:	2dfe      	cmp	r5, #254	@ 0xfe
 8000da8:	d000      	beq.n	8000dac <__aeabi_fsub+0xb4>
 8000daa:	e0a5      	b.n	8000ef8 <__aeabi_fsub+0x200>
 8000dac:	20ff      	movs	r0, #255	@ 0xff
 8000dae:	2200      	movs	r2, #0
 8000db0:	05c0      	lsls	r0, r0, #23
 8000db2:	4310      	orrs	r0, r2
 8000db4:	07e4      	lsls	r4, r4, #31
 8000db6:	4320      	orrs	r0, r4
 8000db8:	bcc0      	pop	{r6, r7}
 8000dba:	46b9      	mov	r9, r7
 8000dbc:	46b0      	mov	r8, r6
 8000dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_fsub+0xce>
 8000dc4:	e1eb      	b.n	800119e <__aeabi_fsub+0x4a6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d046      	beq.n	8000e58 <__aeabi_fsub+0x160>
 8000dca:	2dff      	cmp	r5, #255	@ 0xff
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fsub+0xd8>
 8000dce:	e0a4      	b.n	8000f1a <__aeabi_fsub+0x222>
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	04d2      	lsls	r2, r2, #19
 8000dd4:	4311      	orrs	r1, r2
 8000dd6:	2b1b      	cmp	r3, #27
 8000dd8:	dc00      	bgt.n	8000ddc <__aeabi_fsub+0xe4>
 8000dda:	e0fb      	b.n	8000fd4 <__aeabi_fsub+0x2dc>
 8000ddc:	2305      	movs	r3, #5
 8000dde:	4698      	mov	r8, r3
 8000de0:	002b      	movs	r3, r5
 8000de2:	44c4      	add	ip, r8
 8000de4:	4662      	mov	r2, ip
 8000de6:	08d7      	lsrs	r7, r2, #3
 8000de8:	2bff      	cmp	r3, #255	@ 0xff
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0xf6>
 8000dec:	e095      	b.n	8000f1a <__aeabi_fsub+0x222>
 8000dee:	027a      	lsls	r2, r7, #9
 8000df0:	0a52      	lsrs	r2, r2, #9
 8000df2:	b2d8      	uxtb	r0, r3
 8000df4:	e7dc      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000df6:	002b      	movs	r3, r5
 8000df8:	3bff      	subs	r3, #255	@ 0xff
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	d118      	bne.n	8000e32 <__aeabi_fsub+0x13a>
 8000e00:	2301      	movs	r3, #1
 8000e02:	405e      	eors	r6, r3
 8000e04:	42b4      	cmp	r4, r6
 8000e06:	d100      	bne.n	8000e0a <__aeabi_fsub+0x112>
 8000e08:	e0ca      	b.n	8000fa0 <__aeabi_fsub+0x2a8>
 8000e0a:	464b      	mov	r3, r9
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d02d      	beq.n	8000e6c <__aeabi_fsub+0x174>
 8000e10:	2d00      	cmp	r5, #0
 8000e12:	d000      	beq.n	8000e16 <__aeabi_fsub+0x11e>
 8000e14:	e13c      	b.n	8001090 <__aeabi_fsub+0x398>
 8000e16:	23ff      	movs	r3, #255	@ 0xff
 8000e18:	4664      	mov	r4, ip
 8000e1a:	2c00      	cmp	r4, #0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_fsub+0x128>
 8000e1e:	e15f      	b.n	80010e0 <__aeabi_fsub+0x3e8>
 8000e20:	1e5d      	subs	r5, r3, #1
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d100      	bne.n	8000e28 <__aeabi_fsub+0x130>
 8000e26:	e174      	b.n	8001112 <__aeabi_fsub+0x41a>
 8000e28:	0034      	movs	r4, r6
 8000e2a:	2bff      	cmp	r3, #255	@ 0xff
 8000e2c:	d074      	beq.n	8000f18 <__aeabi_fsub+0x220>
 8000e2e:	002b      	movs	r3, r5
 8000e30:	e103      	b.n	800103a <__aeabi_fsub+0x342>
 8000e32:	42b4      	cmp	r4, r6
 8000e34:	d100      	bne.n	8000e38 <__aeabi_fsub+0x140>
 8000e36:	e09c      	b.n	8000f72 <__aeabi_fsub+0x27a>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d017      	beq.n	8000e6c <__aeabi_fsub+0x174>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d0ea      	beq.n	8000e16 <__aeabi_fsub+0x11e>
 8000e40:	0007      	movs	r7, r0
 8000e42:	0034      	movs	r4, r6
 8000e44:	e06c      	b.n	8000f20 <__aeabi_fsub+0x228>
 8000e46:	2900      	cmp	r1, #0
 8000e48:	d0cc      	beq.n	8000de4 <__aeabi_fsub+0xec>
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d02b      	beq.n	8000ea8 <__aeabi_fsub+0x1b0>
 8000e50:	2bff      	cmp	r3, #255	@ 0xff
 8000e52:	d062      	beq.n	8000f1a <__aeabi_fsub+0x222>
 8000e54:	0013      	movs	r3, r2
 8000e56:	e773      	b.n	8000d40 <__aeabi_fsub+0x48>
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d0c3      	beq.n	8000de4 <__aeabi_fsub+0xec>
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d100      	bne.n	8000e64 <__aeabi_fsub+0x16c>
 8000e62:	e11e      	b.n	80010a2 <__aeabi_fsub+0x3aa>
 8000e64:	2bff      	cmp	r3, #255	@ 0xff
 8000e66:	d058      	beq.n	8000f1a <__aeabi_fsub+0x222>
 8000e68:	0013      	movs	r3, r2
 8000e6a:	e7b4      	b.n	8000dd6 <__aeabi_fsub+0xde>
 8000e6c:	22fe      	movs	r2, #254	@ 0xfe
 8000e6e:	1c6b      	adds	r3, r5, #1
 8000e70:	421a      	tst	r2, r3
 8000e72:	d10d      	bne.n	8000e90 <__aeabi_fsub+0x198>
 8000e74:	2d00      	cmp	r5, #0
 8000e76:	d060      	beq.n	8000f3a <__aeabi_fsub+0x242>
 8000e78:	4663      	mov	r3, ip
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d000      	beq.n	8000e80 <__aeabi_fsub+0x188>
 8000e7e:	e120      	b.n	80010c2 <__aeabi_fsub+0x3ca>
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d000      	beq.n	8000e86 <__aeabi_fsub+0x18e>
 8000e84:	e128      	b.n	80010d8 <__aeabi_fsub+0x3e0>
 8000e86:	2280      	movs	r2, #128	@ 0x80
 8000e88:	2400      	movs	r4, #0
 8000e8a:	20ff      	movs	r0, #255	@ 0xff
 8000e8c:	03d2      	lsls	r2, r2, #15
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000e90:	4663      	mov	r3, ip
 8000e92:	1a5f      	subs	r7, r3, r1
 8000e94:	017b      	lsls	r3, r7, #5
 8000e96:	d500      	bpl.n	8000e9a <__aeabi_fsub+0x1a2>
 8000e98:	e0fe      	b.n	8001098 <__aeabi_fsub+0x3a0>
 8000e9a:	2f00      	cmp	r7, #0
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_fsub+0x1a8>
 8000e9e:	e765      	b.n	8000d6c <__aeabi_fsub+0x74>
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e783      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000ea8:	4663      	mov	r3, ip
 8000eaa:	1a59      	subs	r1, r3, r1
 8000eac:	014b      	lsls	r3, r1, #5
 8000eae:	d400      	bmi.n	8000eb2 <__aeabi_fsub+0x1ba>
 8000eb0:	e119      	b.n	80010e6 <__aeabi_fsub+0x3ee>
 8000eb2:	018f      	lsls	r7, r1, #6
 8000eb4:	09bf      	lsrs	r7, r7, #6
 8000eb6:	0038      	movs	r0, r7
 8000eb8:	f000 f9e8 	bl	800128c <__clzsi2>
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	3805      	subs	r0, #5
 8000ec0:	4083      	lsls	r3, r0
 8000ec2:	2501      	movs	r5, #1
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	1b40      	subs	r0, r0, r5
 8000ec8:	3001      	adds	r0, #1
 8000eca:	1a12      	subs	r2, r2, r0
 8000ecc:	0019      	movs	r1, r3
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	40c1      	lsrs	r1, r0
 8000ed2:	1e5a      	subs	r2, r3, #1
 8000ed4:	4193      	sbcs	r3, r2
 8000ed6:	4319      	orrs	r1, r3
 8000ed8:	468c      	mov	ip, r1
 8000eda:	1e0b      	subs	r3, r1, #0
 8000edc:	d0e1      	beq.n	8000ea2 <__aeabi_fsub+0x1aa>
 8000ede:	075b      	lsls	r3, r3, #29
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_fsub+0x1ec>
 8000ee2:	e152      	b.n	800118a <__aeabi_fsub+0x492>
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	400b      	ands	r3, r1
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_fsub+0x1f8>
 8000eee:	e752      	b.n	8000d96 <__aeabi_fsub+0x9e>
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	014a      	lsls	r2, r1, #5
 8000ef4:	d400      	bmi.n	8000ef8 <__aeabi_fsub+0x200>
 8000ef6:	e092      	b.n	800101e <__aeabi_fsub+0x326>
 8000ef8:	b2c0      	uxtb	r0, r0
 8000efa:	4663      	mov	r3, ip
 8000efc:	019a      	lsls	r2, r3, #6
 8000efe:	0a52      	lsrs	r2, r2, #9
 8000f00:	e756      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000f02:	4663      	mov	r3, ip
 8000f04:	075b      	lsls	r3, r3, #29
 8000f06:	d005      	beq.n	8000f14 <__aeabi_fsub+0x21c>
 8000f08:	230f      	movs	r3, #15
 8000f0a:	4662      	mov	r2, ip
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d000      	beq.n	8000f14 <__aeabi_fsub+0x21c>
 8000f12:	e740      	b.n	8000d96 <__aeabi_fsub+0x9e>
 8000f14:	002b      	movs	r3, r5
 8000f16:	e765      	b.n	8000de4 <__aeabi_fsub+0xec>
 8000f18:	0007      	movs	r7, r0
 8000f1a:	2f00      	cmp	r7, #0
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_fsub+0x228>
 8000f1e:	e745      	b.n	8000dac <__aeabi_fsub+0xb4>
 8000f20:	2280      	movs	r2, #128	@ 0x80
 8000f22:	03d2      	lsls	r2, r2, #15
 8000f24:	433a      	orrs	r2, r7
 8000f26:	0252      	lsls	r2, r2, #9
 8000f28:	20ff      	movs	r0, #255	@ 0xff
 8000f2a:	0a52      	lsrs	r2, r2, #9
 8000f2c:	e740      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d179      	bne.n	8001026 <__aeabi_fsub+0x32e>
 8000f32:	22fe      	movs	r2, #254	@ 0xfe
 8000f34:	1c6b      	adds	r3, r5, #1
 8000f36:	421a      	tst	r2, r3
 8000f38:	d1aa      	bne.n	8000e90 <__aeabi_fsub+0x198>
 8000f3a:	4663      	mov	r3, ip
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fsub+0x24a>
 8000f40:	e0f5      	b.n	800112e <__aeabi_fsub+0x436>
 8000f42:	2900      	cmp	r1, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x250>
 8000f46:	e0d1      	b.n	80010ec <__aeabi_fsub+0x3f4>
 8000f48:	1a5f      	subs	r7, r3, r1
 8000f4a:	2380      	movs	r3, #128	@ 0x80
 8000f4c:	04db      	lsls	r3, r3, #19
 8000f4e:	421f      	tst	r7, r3
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x25c>
 8000f52:	e10e      	b.n	8001172 <__aeabi_fsub+0x47a>
 8000f54:	4662      	mov	r2, ip
 8000f56:	2401      	movs	r4, #1
 8000f58:	1a8a      	subs	r2, r1, r2
 8000f5a:	4694      	mov	ip, r2
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	4034      	ands	r4, r6
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_fsub+0x26e>
 8000f64:	e724      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000f66:	2001      	movs	r0, #1
 8000f68:	421a      	tst	r2, r3
 8000f6a:	d1c6      	bne.n	8000efa <__aeabi_fsub+0x202>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	08d7      	lsrs	r7, r2, #3
 8000f70:	e73d      	b.n	8000dee <__aeabi_fsub+0xf6>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d017      	beq.n	8000fa6 <__aeabi_fsub+0x2ae>
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d000      	beq.n	8000f7c <__aeabi_fsub+0x284>
 8000f7a:	e0af      	b.n	80010dc <__aeabi_fsub+0x3e4>
 8000f7c:	23ff      	movs	r3, #255	@ 0xff
 8000f7e:	4665      	mov	r5, ip
 8000f80:	2d00      	cmp	r5, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_fsub+0x28e>
 8000f84:	e0ad      	b.n	80010e2 <__aeabi_fsub+0x3ea>
 8000f86:	1e5e      	subs	r6, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x296>
 8000f8c:	e089      	b.n	80010a2 <__aeabi_fsub+0x3aa>
 8000f8e:	2bff      	cmp	r3, #255	@ 0xff
 8000f90:	d0c2      	beq.n	8000f18 <__aeabi_fsub+0x220>
 8000f92:	2e1b      	cmp	r6, #27
 8000f94:	dc00      	bgt.n	8000f98 <__aeabi_fsub+0x2a0>
 8000f96:	e0ab      	b.n	80010f0 <__aeabi_fsub+0x3f8>
 8000f98:	1d4b      	adds	r3, r1, #5
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	e721      	b.n	8000de4 <__aeabi_fsub+0xec>
 8000fa0:	464b      	mov	r3, r9
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d170      	bne.n	8001088 <__aeabi_fsub+0x390>
 8000fa6:	22fe      	movs	r2, #254	@ 0xfe
 8000fa8:	1c6b      	adds	r3, r5, #1
 8000faa:	421a      	tst	r2, r3
 8000fac:	d15e      	bne.n	800106c <__aeabi_fsub+0x374>
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_fsub+0x2bc>
 8000fb2:	e0c3      	b.n	800113c <__aeabi_fsub+0x444>
 8000fb4:	4663      	mov	r3, ip
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_fsub+0x2c4>
 8000fba:	e0d0      	b.n	800115e <__aeabi_fsub+0x466>
 8000fbc:	2900      	cmp	r1, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x2ca>
 8000fc0:	e094      	b.n	80010ec <__aeabi_fsub+0x3f4>
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	4462      	add	r2, ip
 8000fc6:	0153      	lsls	r3, r2, #5
 8000fc8:	d400      	bmi.n	8000fcc <__aeabi_fsub+0x2d4>
 8000fca:	e0d8      	b.n	800117e <__aeabi_fsub+0x486>
 8000fcc:	0192      	lsls	r2, r2, #6
 8000fce:	2001      	movs	r0, #1
 8000fd0:	0a52      	lsrs	r2, r2, #9
 8000fd2:	e6ed      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000fd4:	0008      	movs	r0, r1
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	40d8      	lsrs	r0, r3
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4099      	lsls	r1, r3
 8000fde:	000b      	movs	r3, r1
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4193      	sbcs	r3, r2
 8000fe4:	4303      	orrs	r3, r0
 8000fe6:	449c      	add	ip, r3
 8000fe8:	4663      	mov	r3, ip
 8000fea:	015b      	lsls	r3, r3, #5
 8000fec:	d589      	bpl.n	8000f02 <__aeabi_fsub+0x20a>
 8000fee:	3501      	adds	r5, #1
 8000ff0:	2dff      	cmp	r5, #255	@ 0xff
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fsub+0x2fe>
 8000ff4:	e6da      	b.n	8000dac <__aeabi_fsub+0xb4>
 8000ff6:	4662      	mov	r2, ip
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4919      	ldr	r1, [pc, #100]	@ (8001060 <__aeabi_fsub+0x368>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	0852      	lsrs	r2, r2, #1
 8001000:	400a      	ands	r2, r1
 8001002:	431a      	orrs	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	4694      	mov	ip, r2
 8001008:	075b      	lsls	r3, r3, #29
 800100a:	d004      	beq.n	8001016 <__aeabi_fsub+0x31e>
 800100c:	230f      	movs	r3, #15
 800100e:	4013      	ands	r3, r2
 8001010:	2b04      	cmp	r3, #4
 8001012:	d000      	beq.n	8001016 <__aeabi_fsub+0x31e>
 8001014:	e6bf      	b.n	8000d96 <__aeabi_fsub+0x9e>
 8001016:	4663      	mov	r3, ip
 8001018:	015b      	lsls	r3, r3, #5
 800101a:	d500      	bpl.n	800101e <__aeabi_fsub+0x326>
 800101c:	e6c2      	b.n	8000da4 <__aeabi_fsub+0xac>
 800101e:	4663      	mov	r3, ip
 8001020:	08df      	lsrs	r7, r3, #3
 8001022:	002b      	movs	r3, r5
 8001024:	e6e3      	b.n	8000dee <__aeabi_fsub+0xf6>
 8001026:	1b53      	subs	r3, r2, r5
 8001028:	2d00      	cmp	r5, #0
 800102a:	d100      	bne.n	800102e <__aeabi_fsub+0x336>
 800102c:	e6f4      	b.n	8000e18 <__aeabi_fsub+0x120>
 800102e:	2080      	movs	r0, #128	@ 0x80
 8001030:	4664      	mov	r4, ip
 8001032:	04c0      	lsls	r0, r0, #19
 8001034:	4304      	orrs	r4, r0
 8001036:	46a4      	mov	ip, r4
 8001038:	0034      	movs	r4, r6
 800103a:	2001      	movs	r0, #1
 800103c:	2b1b      	cmp	r3, #27
 800103e:	dc09      	bgt.n	8001054 <__aeabi_fsub+0x35c>
 8001040:	2520      	movs	r5, #32
 8001042:	4660      	mov	r0, ip
 8001044:	40d8      	lsrs	r0, r3
 8001046:	1aeb      	subs	r3, r5, r3
 8001048:	4665      	mov	r5, ip
 800104a:	409d      	lsls	r5, r3
 800104c:	002b      	movs	r3, r5
 800104e:	1e5d      	subs	r5, r3, #1
 8001050:	41ab      	sbcs	r3, r5
 8001052:	4318      	orrs	r0, r3
 8001054:	1a0b      	subs	r3, r1, r0
 8001056:	469c      	mov	ip, r3
 8001058:	0015      	movs	r5, r2
 800105a:	e680      	b.n	8000d5e <__aeabi_fsub+0x66>
 800105c:	fbffffff 	.word	0xfbffffff
 8001060:	7dffffff 	.word	0x7dffffff
 8001064:	22fe      	movs	r2, #254	@ 0xfe
 8001066:	1c6b      	adds	r3, r5, #1
 8001068:	4213      	tst	r3, r2
 800106a:	d0a3      	beq.n	8000fb4 <__aeabi_fsub+0x2bc>
 800106c:	2bff      	cmp	r3, #255	@ 0xff
 800106e:	d100      	bne.n	8001072 <__aeabi_fsub+0x37a>
 8001070:	e69c      	b.n	8000dac <__aeabi_fsub+0xb4>
 8001072:	4461      	add	r1, ip
 8001074:	0849      	lsrs	r1, r1, #1
 8001076:	074a      	lsls	r2, r1, #29
 8001078:	d049      	beq.n	800110e <__aeabi_fsub+0x416>
 800107a:	220f      	movs	r2, #15
 800107c:	400a      	ands	r2, r1
 800107e:	2a04      	cmp	r2, #4
 8001080:	d045      	beq.n	800110e <__aeabi_fsub+0x416>
 8001082:	1d0a      	adds	r2, r1, #4
 8001084:	4694      	mov	ip, r2
 8001086:	e6ad      	b.n	8000de4 <__aeabi_fsub+0xec>
 8001088:	2d00      	cmp	r5, #0
 800108a:	d100      	bne.n	800108e <__aeabi_fsub+0x396>
 800108c:	e776      	b.n	8000f7c <__aeabi_fsub+0x284>
 800108e:	e68d      	b.n	8000dac <__aeabi_fsub+0xb4>
 8001090:	0034      	movs	r4, r6
 8001092:	20ff      	movs	r0, #255	@ 0xff
 8001094:	2200      	movs	r2, #0
 8001096:	e68b      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8001098:	4663      	mov	r3, ip
 800109a:	2401      	movs	r4, #1
 800109c:	1acf      	subs	r7, r1, r3
 800109e:	4034      	ands	r4, r6
 80010a0:	e664      	b.n	8000d6c <__aeabi_fsub+0x74>
 80010a2:	4461      	add	r1, ip
 80010a4:	014b      	lsls	r3, r1, #5
 80010a6:	d56d      	bpl.n	8001184 <__aeabi_fsub+0x48c>
 80010a8:	0848      	lsrs	r0, r1, #1
 80010aa:	4944      	ldr	r1, [pc, #272]	@ (80011bc <__aeabi_fsub+0x4c4>)
 80010ac:	4001      	ands	r1, r0
 80010ae:	0743      	lsls	r3, r0, #29
 80010b0:	d02c      	beq.n	800110c <__aeabi_fsub+0x414>
 80010b2:	230f      	movs	r3, #15
 80010b4:	4003      	ands	r3, r0
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d028      	beq.n	800110c <__aeabi_fsub+0x414>
 80010ba:	1d0b      	adds	r3, r1, #4
 80010bc:	469c      	mov	ip, r3
 80010be:	2302      	movs	r3, #2
 80010c0:	e690      	b.n	8000de4 <__aeabi_fsub+0xec>
 80010c2:	2900      	cmp	r1, #0
 80010c4:	d100      	bne.n	80010c8 <__aeabi_fsub+0x3d0>
 80010c6:	e72b      	b.n	8000f20 <__aeabi_fsub+0x228>
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	03db      	lsls	r3, r3, #15
 80010cc:	429f      	cmp	r7, r3
 80010ce:	d200      	bcs.n	80010d2 <__aeabi_fsub+0x3da>
 80010d0:	e726      	b.n	8000f20 <__aeabi_fsub+0x228>
 80010d2:	4298      	cmp	r0, r3
 80010d4:	d300      	bcc.n	80010d8 <__aeabi_fsub+0x3e0>
 80010d6:	e723      	b.n	8000f20 <__aeabi_fsub+0x228>
 80010d8:	2401      	movs	r4, #1
 80010da:	4034      	ands	r4, r6
 80010dc:	0007      	movs	r7, r0
 80010de:	e71f      	b.n	8000f20 <__aeabi_fsub+0x228>
 80010e0:	0034      	movs	r4, r6
 80010e2:	468c      	mov	ip, r1
 80010e4:	e67e      	b.n	8000de4 <__aeabi_fsub+0xec>
 80010e6:	2301      	movs	r3, #1
 80010e8:	08cf      	lsrs	r7, r1, #3
 80010ea:	e680      	b.n	8000dee <__aeabi_fsub+0xf6>
 80010ec:	2300      	movs	r3, #0
 80010ee:	e67e      	b.n	8000dee <__aeabi_fsub+0xf6>
 80010f0:	2020      	movs	r0, #32
 80010f2:	4665      	mov	r5, ip
 80010f4:	1b80      	subs	r0, r0, r6
 80010f6:	4085      	lsls	r5, r0
 80010f8:	4663      	mov	r3, ip
 80010fa:	0028      	movs	r0, r5
 80010fc:	40f3      	lsrs	r3, r6
 80010fe:	1e45      	subs	r5, r0, #1
 8001100:	41a8      	sbcs	r0, r5
 8001102:	4303      	orrs	r3, r0
 8001104:	469c      	mov	ip, r3
 8001106:	0015      	movs	r5, r2
 8001108:	448c      	add	ip, r1
 800110a:	e76d      	b.n	8000fe8 <__aeabi_fsub+0x2f0>
 800110c:	2302      	movs	r3, #2
 800110e:	08cf      	lsrs	r7, r1, #3
 8001110:	e66d      	b.n	8000dee <__aeabi_fsub+0xf6>
 8001112:	1b0f      	subs	r7, r1, r4
 8001114:	017b      	lsls	r3, r7, #5
 8001116:	d528      	bpl.n	800116a <__aeabi_fsub+0x472>
 8001118:	01bf      	lsls	r7, r7, #6
 800111a:	09bf      	lsrs	r7, r7, #6
 800111c:	0038      	movs	r0, r7
 800111e:	f000 f8b5 	bl	800128c <__clzsi2>
 8001122:	003b      	movs	r3, r7
 8001124:	3805      	subs	r0, #5
 8001126:	4083      	lsls	r3, r0
 8001128:	0034      	movs	r4, r6
 800112a:	2501      	movs	r5, #1
 800112c:	e6ca      	b.n	8000ec4 <__aeabi_fsub+0x1cc>
 800112e:	2900      	cmp	r1, #0
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x43c>
 8001132:	e6b5      	b.n	8000ea0 <__aeabi_fsub+0x1a8>
 8001134:	2401      	movs	r4, #1
 8001136:	0007      	movs	r7, r0
 8001138:	4034      	ands	r4, r6
 800113a:	e658      	b.n	8000dee <__aeabi_fsub+0xf6>
 800113c:	4663      	mov	r3, ip
 800113e:	2b00      	cmp	r3, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_fsub+0x44c>
 8001142:	e6e9      	b.n	8000f18 <__aeabi_fsub+0x220>
 8001144:	2900      	cmp	r1, #0
 8001146:	d100      	bne.n	800114a <__aeabi_fsub+0x452>
 8001148:	e6ea      	b.n	8000f20 <__aeabi_fsub+0x228>
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	03db      	lsls	r3, r3, #15
 800114e:	429f      	cmp	r7, r3
 8001150:	d200      	bcs.n	8001154 <__aeabi_fsub+0x45c>
 8001152:	e6e5      	b.n	8000f20 <__aeabi_fsub+0x228>
 8001154:	4298      	cmp	r0, r3
 8001156:	d300      	bcc.n	800115a <__aeabi_fsub+0x462>
 8001158:	e6e2      	b.n	8000f20 <__aeabi_fsub+0x228>
 800115a:	0007      	movs	r7, r0
 800115c:	e6e0      	b.n	8000f20 <__aeabi_fsub+0x228>
 800115e:	2900      	cmp	r1, #0
 8001160:	d100      	bne.n	8001164 <__aeabi_fsub+0x46c>
 8001162:	e69e      	b.n	8000ea2 <__aeabi_fsub+0x1aa>
 8001164:	2300      	movs	r3, #0
 8001166:	08cf      	lsrs	r7, r1, #3
 8001168:	e641      	b.n	8000dee <__aeabi_fsub+0xf6>
 800116a:	0034      	movs	r4, r6
 800116c:	2301      	movs	r3, #1
 800116e:	08ff      	lsrs	r7, r7, #3
 8001170:	e63d      	b.n	8000dee <__aeabi_fsub+0xf6>
 8001172:	2f00      	cmp	r7, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_fsub+0x480>
 8001176:	e693      	b.n	8000ea0 <__aeabi_fsub+0x1a8>
 8001178:	2300      	movs	r3, #0
 800117a:	08ff      	lsrs	r7, r7, #3
 800117c:	e637      	b.n	8000dee <__aeabi_fsub+0xf6>
 800117e:	2300      	movs	r3, #0
 8001180:	08d7      	lsrs	r7, r2, #3
 8001182:	e634      	b.n	8000dee <__aeabi_fsub+0xf6>
 8001184:	2301      	movs	r3, #1
 8001186:	08cf      	lsrs	r7, r1, #3
 8001188:	e631      	b.n	8000dee <__aeabi_fsub+0xf6>
 800118a:	2280      	movs	r2, #128	@ 0x80
 800118c:	000b      	movs	r3, r1
 800118e:	04d2      	lsls	r2, r2, #19
 8001190:	2001      	movs	r0, #1
 8001192:	4013      	ands	r3, r2
 8001194:	4211      	tst	r1, r2
 8001196:	d000      	beq.n	800119a <__aeabi_fsub+0x4a2>
 8001198:	e6ae      	b.n	8000ef8 <__aeabi_fsub+0x200>
 800119a:	08cf      	lsrs	r7, r1, #3
 800119c:	e627      	b.n	8000dee <__aeabi_fsub+0xf6>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x4ac>
 80011a2:	e75f      	b.n	8001064 <__aeabi_fsub+0x36c>
 80011a4:	1b56      	subs	r6, r2, r5
 80011a6:	2d00      	cmp	r5, #0
 80011a8:	d101      	bne.n	80011ae <__aeabi_fsub+0x4b6>
 80011aa:	0033      	movs	r3, r6
 80011ac:	e6e7      	b.n	8000f7e <__aeabi_fsub+0x286>
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	4660      	mov	r0, ip
 80011b2:	04db      	lsls	r3, r3, #19
 80011b4:	4318      	orrs	r0, r3
 80011b6:	4684      	mov	ip, r0
 80011b8:	e6eb      	b.n	8000f92 <__aeabi_fsub+0x29a>
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	7dffffff 	.word	0x7dffffff

080011c0 <__aeabi_f2iz>:
 80011c0:	0241      	lsls	r1, r0, #9
 80011c2:	0042      	lsls	r2, r0, #1
 80011c4:	0fc3      	lsrs	r3, r0, #31
 80011c6:	0a49      	lsrs	r1, r1, #9
 80011c8:	2000      	movs	r0, #0
 80011ca:	0e12      	lsrs	r2, r2, #24
 80011cc:	2a7e      	cmp	r2, #126	@ 0x7e
 80011ce:	dd03      	ble.n	80011d8 <__aeabi_f2iz+0x18>
 80011d0:	2a9d      	cmp	r2, #157	@ 0x9d
 80011d2:	dd02      	ble.n	80011da <__aeabi_f2iz+0x1a>
 80011d4:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <__aeabi_f2iz+0x3c>)
 80011d6:	1898      	adds	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	2080      	movs	r0, #128	@ 0x80
 80011dc:	0400      	lsls	r0, r0, #16
 80011de:	4301      	orrs	r1, r0
 80011e0:	2a95      	cmp	r2, #149	@ 0x95
 80011e2:	dc07      	bgt.n	80011f4 <__aeabi_f2iz+0x34>
 80011e4:	2096      	movs	r0, #150	@ 0x96
 80011e6:	1a82      	subs	r2, r0, r2
 80011e8:	40d1      	lsrs	r1, r2
 80011ea:	4248      	negs	r0, r1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f3      	bne.n	80011d8 <__aeabi_f2iz+0x18>
 80011f0:	0008      	movs	r0, r1
 80011f2:	e7f1      	b.n	80011d8 <__aeabi_f2iz+0x18>
 80011f4:	3a96      	subs	r2, #150	@ 0x96
 80011f6:	4091      	lsls	r1, r2
 80011f8:	e7f7      	b.n	80011ea <__aeabi_f2iz+0x2a>
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	7fffffff 	.word	0x7fffffff

08001200 <__aeabi_ui2f>:
 8001200:	b510      	push	{r4, lr}
 8001202:	1e04      	subs	r4, r0, #0
 8001204:	d00d      	beq.n	8001222 <__aeabi_ui2f+0x22>
 8001206:	f000 f841 	bl	800128c <__clzsi2>
 800120a:	239e      	movs	r3, #158	@ 0x9e
 800120c:	1a1b      	subs	r3, r3, r0
 800120e:	2b96      	cmp	r3, #150	@ 0x96
 8001210:	dc0c      	bgt.n	800122c <__aeabi_ui2f+0x2c>
 8001212:	2808      	cmp	r0, #8
 8001214:	d034      	beq.n	8001280 <__aeabi_ui2f+0x80>
 8001216:	3808      	subs	r0, #8
 8001218:	4084      	lsls	r4, r0
 800121a:	0264      	lsls	r4, r4, #9
 800121c:	0a64      	lsrs	r4, r4, #9
 800121e:	b2d8      	uxtb	r0, r3
 8001220:	e001      	b.n	8001226 <__aeabi_ui2f+0x26>
 8001222:	2000      	movs	r0, #0
 8001224:	2400      	movs	r4, #0
 8001226:	05c0      	lsls	r0, r0, #23
 8001228:	4320      	orrs	r0, r4
 800122a:	bd10      	pop	{r4, pc}
 800122c:	2b99      	cmp	r3, #153	@ 0x99
 800122e:	dc13      	bgt.n	8001258 <__aeabi_ui2f+0x58>
 8001230:	1f42      	subs	r2, r0, #5
 8001232:	4094      	lsls	r4, r2
 8001234:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <__aeabi_ui2f+0x88>)
 8001236:	4022      	ands	r2, r4
 8001238:	0761      	lsls	r1, r4, #29
 800123a:	d01c      	beq.n	8001276 <__aeabi_ui2f+0x76>
 800123c:	210f      	movs	r1, #15
 800123e:	4021      	ands	r1, r4
 8001240:	2904      	cmp	r1, #4
 8001242:	d018      	beq.n	8001276 <__aeabi_ui2f+0x76>
 8001244:	3204      	adds	r2, #4
 8001246:	08d4      	lsrs	r4, r2, #3
 8001248:	0152      	lsls	r2, r2, #5
 800124a:	d515      	bpl.n	8001278 <__aeabi_ui2f+0x78>
 800124c:	239f      	movs	r3, #159	@ 0x9f
 800124e:	0264      	lsls	r4, r4, #9
 8001250:	1a18      	subs	r0, r3, r0
 8001252:	0a64      	lsrs	r4, r4, #9
 8001254:	b2c0      	uxtb	r0, r0
 8001256:	e7e6      	b.n	8001226 <__aeabi_ui2f+0x26>
 8001258:	0002      	movs	r2, r0
 800125a:	0021      	movs	r1, r4
 800125c:	321b      	adds	r2, #27
 800125e:	4091      	lsls	r1, r2
 8001260:	000a      	movs	r2, r1
 8001262:	1e51      	subs	r1, r2, #1
 8001264:	418a      	sbcs	r2, r1
 8001266:	2105      	movs	r1, #5
 8001268:	1a09      	subs	r1, r1, r0
 800126a:	40cc      	lsrs	r4, r1
 800126c:	4314      	orrs	r4, r2
 800126e:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <__aeabi_ui2f+0x88>)
 8001270:	4022      	ands	r2, r4
 8001272:	0761      	lsls	r1, r4, #29
 8001274:	d1e2      	bne.n	800123c <__aeabi_ui2f+0x3c>
 8001276:	08d4      	lsrs	r4, r2, #3
 8001278:	0264      	lsls	r4, r4, #9
 800127a:	0a64      	lsrs	r4, r4, #9
 800127c:	b2d8      	uxtb	r0, r3
 800127e:	e7d2      	b.n	8001226 <__aeabi_ui2f+0x26>
 8001280:	0264      	lsls	r4, r4, #9
 8001282:	0a64      	lsrs	r4, r4, #9
 8001284:	308e      	adds	r0, #142	@ 0x8e
 8001286:	e7ce      	b.n	8001226 <__aeabi_ui2f+0x26>
 8001288:	fbffffff 	.word	0xfbffffff

0800128c <__clzsi2>:
 800128c:	211c      	movs	r1, #28
 800128e:	2301      	movs	r3, #1
 8001290:	041b      	lsls	r3, r3, #16
 8001292:	4298      	cmp	r0, r3
 8001294:	d301      	bcc.n	800129a <__clzsi2+0xe>
 8001296:	0c00      	lsrs	r0, r0, #16
 8001298:	3910      	subs	r1, #16
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	4298      	cmp	r0, r3
 800129e:	d301      	bcc.n	80012a4 <__clzsi2+0x18>
 80012a0:	0a00      	lsrs	r0, r0, #8
 80012a2:	3908      	subs	r1, #8
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	4298      	cmp	r0, r3
 80012a8:	d301      	bcc.n	80012ae <__clzsi2+0x22>
 80012aa:	0900      	lsrs	r0, r0, #4
 80012ac:	3904      	subs	r1, #4
 80012ae:	a202      	add	r2, pc, #8	@ (adr r2, 80012b8 <__clzsi2+0x2c>)
 80012b0:	5c10      	ldrb	r0, [r2, r0]
 80012b2:	1840      	adds	r0, r0, r1
 80012b4:	4770      	bx	lr
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	02020304 	.word	0x02020304
 80012bc:	01010101 	.word	0x01010101
	...

080012c8 <ADC_Module_Init>:

// Static DMA target buffer (one sample per channel)
static volatile uint16_t s_adc_raw[ADC_MODULE_NUM_CHANNELS] = {0};

HAL_StatusTypeDef ADC_Module_Init(ADC_HandleTypeDef *hadc_handle)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    if (hadc_handle == NULL) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <ADC_Module_Init+0x12>
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e065      	b.n	80013a6 <ADC_Module_Init+0xde>
    }

    // Ensure the dedicated ADC clock is on (HSI14)
    __HAL_RCC_HSI14_ENABLE();
 80012da:	4b35      	ldr	r3, [pc, #212]	@ (80013b0 <ADC_Module_Init+0xe8>)
 80012dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012de:	4b34      	ldr	r3, [pc, #208]	@ (80013b0 <ADC_Module_Init+0xe8>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	430a      	orrs	r2, r1
 80012e4:	635a      	str	r2, [r3, #52]	@ 0x34
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET) {
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <ADC_Module_Init+0xe8>)
 80012ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ec:	2202      	movs	r2, #2
 80012ee:	4013      	ands	r3, r2
 80012f0:	d0fa      	beq.n	80012e8 <ADC_Module_Init+0x20>
    	// wait until HSI14 is ready
    }

    HAL_Delay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 ffaa 	bl	800224c <HAL_Delay>

    if (HAL_ADCEx_Calibration_Start(hadc_handle) != HAL_OK) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	0018      	movs	r0, r3
 80012fc:	f001 fbba 	bl	8002a74 <HAL_ADCEx_Calibration_Start>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d001      	beq.n	8001308 <ADC_Module_Init+0x40>
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e04e      	b.n	80013a6 <ADC_Module_Init+0xde>
    }

    // Continuous mode and scan-forward should be set in Init
    hadc_handle->Init.ContinuousConvMode = ENABLE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	769a      	strb	r2, [r3, #26]
    hadc_handle->Init.ScanConvMode       = ADC_SCAN_DIRECTION_FORWARD;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	611a      	str	r2, [r3, #16]
    hadc_handle->Init.EOCSelection       = ADC_EOC_SEQ_CONV;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2208      	movs	r2, #8
 8001318:	615a      	str	r2, [r3, #20]

    // Re-init to apply changes to the HAL state machine if needed
    if (HAL_ADC_Init(hadc_handle) != HAL_OK) return HAL_ERROR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	0018      	movs	r0, r3
 800131e:	f000 ffb9 	bl	8002294 <HAL_ADC_Init>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d001      	beq.n	800132a <ADC_Module_Init+0x62>
 8001326:	2301      	movs	r3, #1
 8001328:	e03d      	b.n	80013a6 <ADC_Module_Init+0xde>

    // Enable DMA from ADC and set ADC to circular DMA mode
    hadc_handle->Instance->CFGR1 |= (ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_OVRMOD);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	491f      	ldr	r1, [pc, #124]	@ (80013b4 <ADC_Module_Init+0xec>)
 8001336:	430a      	orrs	r2, r1
 8001338:	60da      	str	r2, [r3, #12]

    // Configure channels ADC_IN0 .. ADC_IN7 into the regular sequence.
    // On STM32F0, "rank equals channel number"; setting Rank to ADC_RANK_CHANNEL_NUMBER
    // adds/removes the channel from the CHSELR. SamplingTime here applies to the group.
    hadc_handle->Instance->CHSELR = 0;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
    ADC_ChannelConfTypeDef s_config = {0};
 8001342:	2408      	movs	r4, #8
 8001344:	193b      	adds	r3, r7, r4
 8001346:	0018      	movs	r0, r3
 8001348:	230c      	movs	r3, #12
 800134a:	001a      	movs	r2, r3
 800134c:	2100      	movs	r1, #0
 800134e:	f003 f863 	bl	8004418 <memset>
    s_config.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001352:	0021      	movs	r1, r4
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	0152      	lsls	r2, r2, #5
 800135a:	605a      	str	r2, [r3, #4]
    s_config.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2207      	movs	r2, #7
 8001360:	609a      	str	r2, [r3, #8]

    // Add channels 0..7
    for (uint32_t ch = 0; ch < ADC_MODULE_NUM_CHANNELS; ++ch) {
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e010      	b.n	800138a <ADC_Module_Init+0xc2>
        s_config.Channel = ADC_CHANNEL_0 + ch; // sequential enum for CH0..CH7
 8001368:	2108      	movs	r1, #8
 800136a:	187b      	adds	r3, r7, r1
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]
        if (HAL_ADC_ConfigChannel(hadc_handle, &s_config) != HAL_OK) {
 8001370:	187a      	adds	r2, r7, r1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0011      	movs	r1, r2
 8001376:	0018      	movs	r0, r3
 8001378:	f001 f966 	bl	8002648 <HAL_ADC_ConfigChannel>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d001      	beq.n	8001384 <ADC_Module_Init+0xbc>
            return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e010      	b.n	80013a6 <ADC_Module_Init+0xde>
    for (uint32_t ch = 0; ch < ADC_MODULE_NUM_CHANNELS; ++ch) {
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b07      	cmp	r3, #7
 800138e:	d9eb      	bls.n	8001368 <ADC_Module_Init+0xa0>
    // - Direction: Peripheral-to-Memory
    // - Mode: Circular
    // - Peripheral increment: Disable
    // - Memory increment: Enable
    // - Data alignment: Halfword (16-bit)
    if (HAL_ADC_Start_DMA(hadc_handle, (uint32_t*)s_adc_raw, ADC_MODULE_NUM_CHANNELS) != HAL_OK) {
 8001390:	4909      	ldr	r1, [pc, #36]	@ (80013b8 <ADC_Module_Init+0xf0>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2208      	movs	r2, #8
 8001396:	0018      	movs	r0, r3
 8001398:	f001 f8bc 	bl	8002514 <HAL_ADC_Start_DMA>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d001      	beq.n	80013a4 <ADC_Module_Init+0xdc>
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <ADC_Module_Init+0xde>
    }

    return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b007      	add	sp, #28
 80013ac:	bd90      	pop	{r4, r7, pc}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	40021000 	.word	0x40021000
 80013b4:	00001003 	.word	0x00001003
 80013b8:	20000038 	.word	0x20000038

080013bc <ADC_Module_Get_Buffer>:
    }
    return s_adc_raw[channel_index];
}

const volatile uint16_t* ADC_Module_Get_Buffer(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    return s_adc_raw;
 80013c0:	4b01      	ldr	r3, [pc, #4]	@ (80013c8 <ADC_Module_Get_Buffer+0xc>)
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000038 	.word	0x20000038

080013cc <set_bit_timing_for_baud>:
 *  - 125 kbps: prescaler 24
 *
 * If your CAN kernel clock is not 48 MHz, adjust these values accordingly.
 */
static void set_bit_timing_for_baud(CAN_HandleTypeDef *hcan, uint32_t baud_enum)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
    /* Common time segments: 1 + 13 + 2 = 16 TQ, SJW=1 TQ */
    hcan->Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
    hcan->Init.TimeSeg1      = CAN_BS1_13TQ;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	22c0      	movs	r2, #192	@ 0xc0
 80013e0:	0312      	lsls	r2, r2, #12
 80013e2:	611a      	str	r2, [r3, #16]
    hcan->Init.TimeSeg2      = CAN_BS2_2TQ;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2280      	movs	r2, #128	@ 0x80
 80013e8:	0352      	lsls	r2, r2, #13
 80013ea:	615a      	str	r2, [r3, #20]

    switch (baud_enum) {
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d014      	beq.n	800141c <set_bit_timing_for_baud+0x50>
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d805      	bhi.n	8001404 <set_bit_timing_for_baud+0x38>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d006      	beq.n	800140c <set_bit_timing_for_baud+0x40>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d007      	beq.n	8001414 <set_bit_timing_for_baud+0x48>
    default:
    case 0: /* 125 kbps */
        hcan->Init.Prescaler = 24u;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2218      	movs	r2, #24
 8001408:	605a      	str	r2, [r3, #4]
        break;
 800140a:	e00b      	b.n	8001424 <set_bit_timing_for_baud+0x58>
    case 1: /* 250 kbps */
        hcan->Init.Prescaler = 12u;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	220c      	movs	r2, #12
 8001410:	605a      	str	r2, [r3, #4]
        break;
 8001412:	e007      	b.n	8001424 <set_bit_timing_for_baud+0x58>
    case 2: /* 500 kbps */
        hcan->Init.Prescaler = 6u;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2206      	movs	r2, #6
 8001418:	605a      	str	r2, [r3, #4]
        break;
 800141a:	e003      	b.n	8001424 <set_bit_timing_for_baud+0x58>
    case 3: /* 1 Mbps */
        hcan->Init.Prescaler = 3u;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	605a      	str	r2, [r3, #4]
        break;
 8001422:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001424:	46c0      	nop			@ (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}

0800142c <apply_accept_all_filter>:

/* Applies an "accept all" filter (mask=0) so all STD/EXT frames pass to FIFO0.
 * This is used at first init and if no explicit ID list has been configured.
 */
static HAL_StatusTypeDef apply_accept_all_filter(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
    if (s_can == NULL) {
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <apply_accept_all_filter+0x74>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <apply_accept_all_filter+0x12>
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e02b      	b.n	8001496 <apply_accept_all_filter+0x6a>
    }

    CAN_FilterTypeDef filter;
    memset(&filter, 0, sizeof(filter));
 800143e:	003b      	movs	r3, r7
 8001440:	2228      	movs	r2, #40	@ 0x28
 8001442:	2100      	movs	r1, #0
 8001444:	0018      	movs	r0, r3
 8001446:	f002 ffe7 	bl	8004418 <memset>

    filter.FilterBank = 0u;
 800144a:	003b      	movs	r3, r7
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001450:	003b      	movs	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001456:	003b      	movs	r3, r7
 8001458:	2201      	movs	r2, #1
 800145a:	61da      	str	r2, [r3, #28]

    /* Accept all: mask = 0x00000000. For STD IDs, ID and mask use 32-bit format:
       STDID at bits 31:21. Setting mask to zero makes all bits "don't care". */
    filter.FilterIdHigh      = 0x0000;
 800145c:	003b      	movs	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
    filter.FilterIdLow       = 0x0000;
 8001462:	003b      	movs	r3, r7
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
    filter.FilterMaskIdHigh  = 0x0000;
 8001468:	003b      	movs	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
    filter.FilterMaskIdLow   = 0x0000;
 800146e:	003b      	movs	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]

    filter.FilterFIFOAssignment = CAN_MODULE_RX_FIFO;
 8001474:	003b      	movs	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
    filter.FilterActivation = ENABLE;
 800147a:	003b      	movs	r3, r7
 800147c:	2201      	movs	r2, #1
 800147e:	621a      	str	r2, [r3, #32]
    filter.SlaveStartFilterBank = CAN_MODULE_FILTER_BANKS; /* not used on single CAN */
 8001480:	003b      	movs	r3, r7
 8001482:	220e      	movs	r2, #14
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_CAN_ConfigFilter(s_can, &filter);
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <apply_accept_all_filter+0x74>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	003a      	movs	r2, r7
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f001 fc96 	bl	8002dc0 <HAL_CAN_ConfigFilter>
 8001494:	0003      	movs	r3, r0
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b00a      	add	sp, #40	@ 0x28
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	20000048 	.word	0x20000048

080014a4 <wait_for_tx_mailbox>:
    return HAL_OK;
}

/* Waits until a TX mailbox is free or the timeout elapses. */
static HAL_StatusTypeDef wait_for_tx_mailbox(uint32_t timeout_ms)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    uint32_t start = HAL_GetTick();
 80014ac:	f000 fec4 	bl	8002238 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	60fb      	str	r3, [r7, #12]
    while (HAL_CAN_GetTxMailboxesFreeLevel(s_can) == 0u) {
 80014b4:	e009      	b.n	80014ca <wait_for_tx_mailbox+0x26>
        if ((HAL_GetTick() - start) >= timeout_ms) {
 80014b6:	f000 febf 	bl	8002238 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d801      	bhi.n	80014ca <wait_for_tx_mailbox+0x26>
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e007      	b.n	80014da <wait_for_tx_mailbox+0x36>
    while (HAL_CAN_GetTxMailboxesFreeLevel(s_can) == 0u) {
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <wait_for_tx_mailbox+0x40>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f001 fe80 	bl	80031d4 <HAL_CAN_GetTxMailboxesFreeLevel>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d0ee      	beq.n	80014b6 <wait_for_tx_mailbox+0x12>
        }
    }
    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	0018      	movs	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	b004      	add	sp, #16
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	20000048 	.word	0x20000048

080014e8 <CAN_Module_Init>:

/* Initializes the CAN peripheral with the requested baud, starts it, and applies
 * a default permissive filter. Stores the provided node_id.
 */
HAL_StatusTypeDef CAN_Module_Init(CAN_HandleTypeDef *hcan, uint32_t baud_enum)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    if (hcan == NULL) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <CAN_Module_Init+0x14>
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e041      	b.n	8001580 <CAN_Module_Init+0x98>
    }

    s_can = hcan;
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <CAN_Module_Init+0xa0>)
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
    s_baud_enum = baud_enum;
 8001502:	4b22      	ldr	r3, [pc, #136]	@ (800158c <CAN_Module_Init+0xa4>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	601a      	str	r2, [r3, #0]

    /* Base init fields. These may be overridden by CubeMX; set key ones here. */
    s_can->Init.Mode = CAN_MODE_NORMAL;
 8001508:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <CAN_Module_Init+0xa0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
    s_can->Init.TimeTriggeredMode = DISABLE;
 8001510:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <CAN_Module_Init+0xa0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2200      	movs	r2, #0
 8001516:	761a      	strb	r2, [r3, #24]
    s_can->Init.AutoBusOff = ENABLE;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <CAN_Module_Init+0xa0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2201      	movs	r2, #1
 800151e:	765a      	strb	r2, [r3, #25]
    s_can->Init.AutoWakeUp = ENABLE;
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <CAN_Module_Init+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	769a      	strb	r2, [r3, #26]
    s_can->Init.AutoRetransmission = ENABLE;
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <CAN_Module_Init+0xa0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2201      	movs	r2, #1
 800152e:	76da      	strb	r2, [r3, #27]
    s_can->Init.ReceiveFifoLocked = DISABLE;
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <CAN_Module_Init+0xa0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	771a      	strb	r2, [r3, #28]
    s_can->Init.TransmitFifoPriority = ENABLE;
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <CAN_Module_Init+0xa0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2201      	movs	r2, #1
 800153e:	775a      	strb	r2, [r3, #29]

    set_bit_timing_for_baud(s_can, baud_enum);
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <CAN_Module_Init+0xa0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	0011      	movs	r1, r2
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff ff3f 	bl	80013cc <set_bit_timing_for_baud>

    if (HAL_CAN_Init(s_can) != HAL_OK) {
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <CAN_Module_Init+0xa0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	0018      	movs	r0, r3
 8001554:	f001 fb36 	bl	8002bc4 <HAL_CAN_Init>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <CAN_Module_Init+0x78>
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e00f      	b.n	8001580 <CAN_Module_Init+0x98>
    }

    /* Default to accept-all until user configures specific IDs. */
    if (apply_accept_all_filter() != HAL_OK) {
 8001560:	f7ff ff64 	bl	800142c <apply_accept_all_filter>
 8001564:	1e03      	subs	r3, r0, #0
 8001566:	d001      	beq.n	800156c <CAN_Module_Init+0x84>
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e009      	b.n	8001580 <CAN_Module_Init+0x98>
    }

    if (HAL_CAN_Start(s_can) != HAL_OK) {
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <CAN_Module_Init+0xa0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0018      	movs	r0, r3
 8001572:	f001 fd17 	bl	8002fa4 <HAL_CAN_Start>
 8001576:	1e03      	subs	r3, r0, #0
 8001578:	d001      	beq.n	800157e <CAN_Module_Init+0x96>
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <CAN_Module_Init+0x98>
    }

    return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000048 	.word	0x20000048
 800158c:	20000000 	.word	0x20000000

08001590 <CAN_Module_Get_Node_Id>:
    s_node_id = node_id;
}

/* Returns the current node ID stored by this module. */
uint8_t CAN_Module_Get_Node_Id(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    return s_node_id;
 8001594:	4b02      	ldr	r3, [pc, #8]	@ (80015a0 <CAN_Module_Get_Node_Id+0x10>)
 8001596:	781b      	ldrb	r3, [r3, #0]
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	2000004c 	.word	0x2000004c

080015a4 <CAN_Module_Send_Std>:

/* Sends a Standard ID data frame with the given payload and DLC.
 * timeout_ms applies to waiting for a free TX mailbox.
 */
HAL_StatusTypeDef CAN_Module_Send_Std(uint16_t std_id, const uint8_t *data, uint8_t dlc, uint32_t timeout_ms)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b08c      	sub	sp, #48	@ 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	0011      	movs	r1, r2
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	230e      	movs	r3, #14
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	1c02      	adds	r2, r0, #0
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	200d      	movs	r0, #13
 80015ba:	183b      	adds	r3, r7, r0
 80015bc:	1c0a      	adds	r2, r1, #0
 80015be:	701a      	strb	r2, [r3, #0]
    if (s_can == NULL || data == NULL || dlc > 8u) {
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <CAN_Module_Send_Std+0xa0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <CAN_Module_Send_Std+0x32>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <CAN_Module_Send_Std+0x32>
 80015ce:	183b      	adds	r3, r7, r0
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d901      	bls.n	80015da <CAN_Module_Send_Std+0x36>
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e030      	b.n	800163c <CAN_Module_Send_Std+0x98>
    }

    HAL_StatusTypeDef st = wait_for_tx_mailbox(timeout_ms);
 80015da:	252f      	movs	r5, #47	@ 0x2f
 80015dc:	197c      	adds	r4, r7, r5
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff ff5f 	bl	80014a4 <wait_for_tx_mailbox>
 80015e6:	0003      	movs	r3, r0
 80015e8:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) {
 80015ea:	197b      	adds	r3, r7, r5
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <CAN_Module_Send_Std+0x54>
        return st;
 80015f2:	197b      	adds	r3, r7, r5
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	e021      	b.n	800163c <CAN_Module_Send_Std+0x98>
    }

    CAN_TxHeaderTypeDef tx_header;
    uint32_t mailbox;

    tx_header.StdId = (std_id & 0x7FFu);
 80015f8:	230e      	movs	r3, #14
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	055b      	lsls	r3, r3, #21
 8001600:	0d5a      	lsrs	r2, r3, #21
 8001602:	2114      	movs	r1, #20
 8001604:	187b      	adds	r3, r7, r1
 8001606:	601a      	str	r2, [r3, #0]
    tx_header.ExtId = 0u;
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
    tx_header.IDE   = CAN_ID_STD;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    tx_header.RTR   = CAN_RTR_DATA;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    tx_header.DLC   = dlc;
 800161a:	230d      	movs	r3, #13
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	187b      	adds	r3, r7, r1
 8001622:	611a      	str	r2, [r3, #16]
    tx_header.TransmitGlobalTime = DISABLE;
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2200      	movs	r2, #0
 8001628:	751a      	strb	r2, [r3, #20]

    return HAL_CAN_AddTxMessage(s_can, &tx_header, (uint8_t *)data, &mailbox);
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <CAN_Module_Send_Std+0xa0>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	2310      	movs	r3, #16
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	1879      	adds	r1, r7, r1
 8001636:	f001 fcfb 	bl	8003030 <HAL_CAN_AddTxMessage>
 800163a:	0003      	movs	r3, r0
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b00c      	add	sp, #48	@ 0x30
 8001642:	bdb0      	pop	{r4, r5, r7, pc}
 8001644:	20000048 	.word	0x20000048

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164c:	f000 fd9a 	bl	8002184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001650:	f000 f846 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001654:	f000 f99e 	bl	8001994 <MX_GPIO_Init>
  MX_DMA_Init();
 8001658:	f000 f97e 	bl	8001958 <MX_DMA_Init>
  MX_CAN_Init();
 800165c:	f000 f944 	bl	80018e8 <MX_CAN_Init>
  MX_ADC_Init();
 8001660:	f000 f88c 	bl	800177c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

	// Set Standby Pin on CAN transceiver low (normal mode) before initializing
	HAL_GPIO_WritePin(GPIOB, CAN_STANDBY_Pin, GPIO_PIN_RESET);
 8001664:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <main+0x78>)
 8001666:	2200      	movs	r2, #0
 8001668:	2110      	movs	r1, #16
 800166a:	0018      	movs	r0, r3
 800166c:	f002 f9c8 	bl	8003a00 <HAL_GPIO_WritePin>

	if (CAN_Module_Init(&hcan, baud_enum) != HAL_OK) {
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <main+0x7c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <main+0x80>)
 8001676:	0011      	movs	r1, r2
 8001678:	0018      	movs	r0, r3
 800167a:	f7ff ff35 	bl	80014e8 <CAN_Module_Init>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d001      	beq.n	8001686 <main+0x3e>
		// TODO
		Error_Handler();
 8001682:	f000 f9fb 	bl	8001a7c <Error_Handler>
	}

	// Start the bare-bones ADC module
	if (ADC_Module_Init(&hadc) != HAL_OK) {
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <main+0x84>)
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff fe1d 	bl	80012c8 <ADC_Module_Init>
		// TODO
	}

	Process_Signals_Init();
 800168e:	f000 fa61 	bl	8001b54 <Process_Signals_Init>

	last_tick = HAL_GetTick();
 8001692:	f000 fdd1 	bl	8002238 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <main+0x88>)
 800169a:	601a      	str	r2, [r3, #0]
	heartbeat_tick = last_tick;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <main+0x88>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <main+0x8c>)
 80016a2:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Heartbeat_Task();
 80016a4:	f000 f9cc 	bl	8001a40 <Heartbeat_Task>
	  Process_Signals_Update();
 80016a8:	f000 fab8 	bl	8001c1c <Process_Signals_Update>
	  Process_Signals_Send_Can_If_Due(sample_period, timeout_period);
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <main+0x90>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <main+0x94>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0019      	movs	r1, r3
 80016b6:	0010      	movs	r0, r2
 80016b8:	f000 fbda 	bl	8001e70 <Process_Signals_Send_Can_If_Due>
	  Heartbeat_Task();
 80016bc:	46c0      	nop			@ (mov r8, r8)
 80016be:	e7f1      	b.n	80016a4 <main+0x5c>
 80016c0:	48000400 	.word	0x48000400
 80016c4:	20000004 	.word	0x20000004
 80016c8:	200000d4 	.word	0x200000d4
 80016cc:	20000050 	.word	0x20000050
 80016d0:	20000100 	.word	0x20000100
 80016d4:	200000fc 	.word	0x200000fc
 80016d8:	20000008 	.word	0x20000008
 80016dc:	2000000c 	.word	0x2000000c

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b093      	sub	sp, #76	@ 0x4c
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	2414      	movs	r4, #20
 80016e8:	193b      	adds	r3, r7, r4
 80016ea:	0018      	movs	r0, r3
 80016ec:	2334      	movs	r3, #52	@ 0x34
 80016ee:	001a      	movs	r2, r3
 80016f0:	2100      	movs	r1, #0
 80016f2:	f002 fe91 	bl	8004418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	0018      	movs	r0, r3
 80016fa:	2310      	movs	r3, #16
 80016fc:	001a      	movs	r2, r3
 80016fe:	2100      	movs	r1, #0
 8001700:	f002 fe8a 	bl	8004418 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001704:	0021      	movs	r1, r4
 8001706:	187b      	adds	r3, r7, r1
 8001708:	2211      	movs	r2, #17
 800170a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800170c:	187b      	adds	r3, r7, r1
 800170e:	2201      	movs	r2, #1
 8001710:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2201      	movs	r2, #1
 8001716:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001718:	187b      	adds	r3, r7, r1
 800171a:	2210      	movs	r2, #16
 800171c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2202      	movs	r2, #2
 8001722:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2280      	movs	r2, #128	@ 0x80
 8001728:	0252      	lsls	r2, r2, #9
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	02d2      	lsls	r2, r2, #11
 8001732:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001734:	187b      	adds	r3, r7, r1
 8001736:	2200      	movs	r2, #0
 8001738:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173a:	187b      	adds	r3, r7, r1
 800173c:	0018      	movs	r0, r3
 800173e:	f002 f997 	bl	8003a70 <HAL_RCC_OscConfig>
 8001742:	1e03      	subs	r3, r0, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001746:	f000 f999 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2202      	movs	r2, #2
 8001754:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2101      	movs	r1, #1
 8001766:	0018      	movs	r0, r3
 8001768:	f002 fd08 	bl	800417c <HAL_RCC_ClockConfig>
 800176c:	1e03      	subs	r3, r0, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001770:	f000 f984 	bl	8001a7c <Error_Handler>
  }
}
 8001774:	46c0      	nop			@ (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b013      	add	sp, #76	@ 0x4c
 800177a:	bd90      	pop	{r4, r7, pc}

0800177c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	0018      	movs	r0, r3
 8001786:	230c      	movs	r3, #12
 8001788:	001a      	movs	r2, r3
 800178a:	2100      	movs	r1, #0
 800178c:	f002 fe44 	bl	8004418 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <MX_ADC_Init+0x164>)
 8001792:	4a54      	ldr	r2, [pc, #336]	@ (80018e4 <MX_ADC_Init+0x168>)
 8001794:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001796:	4b52      	ldr	r3, [pc, #328]	@ (80018e0 <MX_ADC_Init+0x164>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800179c:	4b50      	ldr	r3, [pc, #320]	@ (80018e0 <MX_ADC_Init+0x164>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b4f      	ldr	r3, [pc, #316]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80017a8:	4b4d      	ldr	r3, [pc, #308]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ae:	4b4c      	ldr	r3, [pc, #304]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017b0:	2204      	movs	r2, #4
 80017b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80017b4:	4b4a      	ldr	r3, [pc, #296]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80017ba:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017bc:	2200      	movs	r2, #0
 80017be:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80017c0:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80017c6:	4b46      	ldr	r3, [pc, #280]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017cc:	4b44      	ldr	r3, [pc, #272]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017ce:	22c2      	movs	r2, #194	@ 0xc2
 80017d0:	32ff      	adds	r2, #255	@ 0xff
 80017d2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d4:	4b42      	ldr	r3, [pc, #264]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017dc:	2224      	movs	r2, #36	@ 0x24
 80017de:	2101      	movs	r1, #1
 80017e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017e2:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80017e8:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <MX_ADC_Init+0x164>)
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 fd52 	bl	8002294 <HAL_ADC_Init>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80017f4:	f000 f942 	bl	8001a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2280      	movs	r2, #128	@ 0x80
 8001802:	0152      	lsls	r2, r2, #5
 8001804:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2280      	movs	r2, #128	@ 0x80
 800180a:	0552      	lsls	r2, r2, #21
 800180c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800180e:	1d3a      	adds	r2, r7, #4
 8001810:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <MX_ADC_Init+0x164>)
 8001812:	0011      	movs	r1, r2
 8001814:	0018      	movs	r0, r3
 8001816:	f000 ff17 	bl	8002648 <HAL_ADC_ConfigChannel>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d001      	beq.n	8001822 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800181e:	f000 f92d 	bl	8001a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001828:	1d3a      	adds	r2, r7, #4
 800182a:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <MX_ADC_Init+0x164>)
 800182c:	0011      	movs	r1, r2
 800182e:	0018      	movs	r0, r3
 8001830:	f000 ff0a 	bl	8002648 <HAL_ADC_ConfigChannel>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001838:	f000 f920 	bl	8001a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2202      	movs	r2, #2
 8001840:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001842:	1d3a      	adds	r2, r7, #4
 8001844:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <MX_ADC_Init+0x164>)
 8001846:	0011      	movs	r1, r2
 8001848:	0018      	movs	r0, r3
 800184a:	f000 fefd 	bl	8002648 <HAL_ADC_ConfigChannel>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d001      	beq.n	8001856 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8001852:	f000 f913 	bl	8001a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2203      	movs	r2, #3
 800185a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800185c:	1d3a      	adds	r2, r7, #4
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <MX_ADC_Init+0x164>)
 8001860:	0011      	movs	r1, r2
 8001862:	0018      	movs	r0, r3
 8001864:	f000 fef0 	bl	8002648 <HAL_ADC_ConfigChannel>
 8001868:	1e03      	subs	r3, r0, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800186c:	f000 f906 	bl	8001a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2204      	movs	r2, #4
 8001874:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001876:	1d3a      	adds	r2, r7, #4
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <MX_ADC_Init+0x164>)
 800187a:	0011      	movs	r1, r2
 800187c:	0018      	movs	r0, r3
 800187e:	f000 fee3 	bl	8002648 <HAL_ADC_ConfigChannel>
 8001882:	1e03      	subs	r3, r0, #0
 8001884:	d001      	beq.n	800188a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8001886:	f000 f8f9 	bl	8001a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2205      	movs	r2, #5
 800188e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001890:	1d3a      	adds	r2, r7, #4
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <MX_ADC_Init+0x164>)
 8001894:	0011      	movs	r1, r2
 8001896:	0018      	movs	r0, r3
 8001898:	f000 fed6 	bl	8002648 <HAL_ADC_ConfigChannel>
 800189c:	1e03      	subs	r3, r0, #0
 800189e:	d001      	beq.n	80018a4 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80018a0:	f000 f8ec 	bl	8001a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2206      	movs	r2, #6
 80018a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80018aa:	1d3a      	adds	r2, r7, #4
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_ADC_Init+0x164>)
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 fec9 	bl	8002648 <HAL_ADC_ConfigChannel>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80018ba:	f000 f8df 	bl	8001a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80018c4:	1d3a      	adds	r2, r7, #4
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <MX_ADC_Init+0x164>)
 80018c8:	0011      	movs	r1, r2
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 febc 	bl	8002648 <HAL_ADC_ConfigChannel>
 80018d0:	1e03      	subs	r3, r0, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80018d4:	f000 f8d2 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000050 	.word	0x20000050
 80018e4:	40012400 	.word	0x40012400

080018e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80018ec:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <MX_CAN_Init+0x68>)
 80018ee:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <MX_CAN_Init+0x6c>)
 80018f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <MX_CAN_Init+0x68>)
 80018f4:	2206      	movs	r2, #6
 80018f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <MX_CAN_Init+0x68>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <MX_CAN_Init+0x68>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <MX_CAN_Init+0x68>)
 8001906:	22c0      	movs	r2, #192	@ 0xc0
 8001908:	0312      	lsls	r2, r2, #12
 800190a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800190c:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <MX_CAN_Init+0x68>)
 800190e:	2280      	movs	r2, #128	@ 0x80
 8001910:	0352      	lsls	r2, r2, #13
 8001912:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <MX_CAN_Init+0x68>)
 8001916:	2200      	movs	r2, #0
 8001918:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800191a:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <MX_CAN_Init+0x68>)
 800191c:	2200      	movs	r2, #0
 800191e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <MX_CAN_Init+0x68>)
 8001922:	2200      	movs	r2, #0
 8001924:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001926:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <MX_CAN_Init+0x68>)
 8001928:	2200      	movs	r2, #0
 800192a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <MX_CAN_Init+0x68>)
 800192e:	2200      	movs	r2, #0
 8001930:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <MX_CAN_Init+0x68>)
 8001934:	2200      	movs	r2, #0
 8001936:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <MX_CAN_Init+0x68>)
 800193a:	0018      	movs	r0, r3
 800193c:	f001 f942 	bl	8002bc4 <HAL_CAN_Init>
 8001940:	1e03      	subs	r3, r0, #0
 8001942:	d001      	beq.n	8001948 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001944:	f000 f89a 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001948:	46c0      	nop			@ (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	200000d4 	.word	0x200000d4
 8001954:	40006400 	.word	0x40006400

08001958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800195e:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <MX_DMA_Init+0x38>)
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <MX_DMA_Init+0x38>)
 8001964:	2101      	movs	r1, #1
 8001966:	430a      	orrs	r2, r1
 8001968:	615a      	str	r2, [r3, #20]
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <MX_DMA_Init+0x38>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	2201      	movs	r2, #1
 8001970:	4013      	ands	r3, r2
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	2009      	movs	r0, #9
 800197c:	f001 fd0e 	bl	800339c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001980:	2009      	movs	r0, #9
 8001982:	f001 fd20 	bl	80033c6 <HAL_NVIC_EnableIRQ>

}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b002      	add	sp, #8
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	40021000 	.word	0x40021000

08001994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b089      	sub	sp, #36	@ 0x24
 8001998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	240c      	movs	r4, #12
 800199c:	193b      	adds	r3, r7, r4
 800199e:	0018      	movs	r0, r3
 80019a0:	2314      	movs	r3, #20
 80019a2:	001a      	movs	r2, r3
 80019a4:	2100      	movs	r1, #0
 80019a6:	f002 fd37 	bl	8004418 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019aa:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <MX_GPIO_Init+0xa4>)
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <MX_GPIO_Init+0xa4>)
 80019b0:	2180      	movs	r1, #128	@ 0x80
 80019b2:	03c9      	lsls	r1, r1, #15
 80019b4:	430a      	orrs	r2, r1
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <MX_GPIO_Init+0xa4>)
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	2380      	movs	r3, #128	@ 0x80
 80019be:	03db      	lsls	r3, r3, #15
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <MX_GPIO_Init+0xa4>)
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <MX_GPIO_Init+0xa4>)
 80019cc:	2180      	movs	r1, #128	@ 0x80
 80019ce:	0289      	lsls	r1, r1, #10
 80019d0:	430a      	orrs	r2, r1
 80019d2:	615a      	str	r2, [r3, #20]
 80019d4:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <MX_GPIO_Init+0xa4>)
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	2380      	movs	r3, #128	@ 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <MX_GPIO_Init+0xa4>)
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <MX_GPIO_Init+0xa4>)
 80019e8:	2180      	movs	r1, #128	@ 0x80
 80019ea:	02c9      	lsls	r1, r1, #11
 80019ec:	430a      	orrs	r2, r1
 80019ee:	615a      	str	r2, [r3, #20]
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <MX_GPIO_Init+0xa4>)
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	02db      	lsls	r3, r3, #11
 80019f8:	4013      	ands	r3, r2
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_1_Pin|LED_STATUS_2_Pin|CAN_STANDBY_Pin, GPIO_PIN_RESET);
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_GPIO_Init+0xa8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	2113      	movs	r1, #19
 8001a04:	0018      	movs	r0, r3
 8001a06:	f001 fffb 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STATUS_1_Pin LED_STATUS_2_Pin CAN_STANDBY_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_1_Pin|LED_STATUS_2_Pin|CAN_STANDBY_Pin;
 8001a0a:	0021      	movs	r1, r4
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2213      	movs	r2, #19
 8001a10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2201      	movs	r2, #1
 8001a16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	4a05      	ldr	r2, [pc, #20]	@ (8001a3c <MX_GPIO_Init+0xa8>)
 8001a28:	0019      	movs	r1, r3
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	f001 fe80 	bl	8003730 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a30:	46c0      	nop			@ (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b009      	add	sp, #36	@ 0x24
 8001a36:	bd90      	pop	{r4, r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000400 	.word	0x48000400

08001a40 <Heartbeat_Task>:

/* USER CODE BEGIN 4 */

void Heartbeat_Task(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	/* Check if enough time has passed */
	if ((HAL_GetTick() - heartbeat_tick) >= HEARTBEAT_INTERVAL_MS) {
 8001a44:	f000 fbf8 	bl	8002238 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <Heartbeat_Task+0x34>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	1ad2      	subs	r2, r2, r3
 8001a50:	23fa      	movs	r3, #250	@ 0xfa
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d309      	bcc.n	8001a6c <Heartbeat_Task+0x2c>
		/* Toggle the LED */
		HAL_GPIO_TogglePin(GPIOB, LED_STATUS_1_Pin); // Example: Port B
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <Heartbeat_Task+0x38>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f001 ffec 	bl	8003a3a <HAL_GPIO_TogglePin>

		/* Update last toggle time */
		heartbeat_tick = HAL_GetTick();
 8001a62:	f000 fbe9 	bl	8002238 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	4b02      	ldr	r3, [pc, #8]	@ (8001a74 <Heartbeat_Task+0x34>)
 8001a6a:	601a      	str	r2, [r3, #0]
	}
}
 8001a6c:	46c0      	nop			@ (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	200000fc 	.word	0x200000fc
 8001a78:	48000400 	.word	0x48000400

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a84:	46c0      	nop			@ (mov r8, r8)
 8001a86:	e7fd      	b.n	8001a84 <Error_Handler+0x8>

08001a88 <adc_raw_to_vpin>:

/* ---------- Helpers ---------- */

/* Convert raw ADC count to pin voltage, using PS_ADC_VREF_V and PS_ADC_FULL_SCALE. */
static inline float adc_raw_to_vpin(uint16_t raw)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	0002      	movs	r2, r0
 8001a90:	1dbb      	adds	r3, r7, #6
 8001a92:	801a      	strh	r2, [r3, #0]
    return (PS_ADC_VREF_V * (float)raw) / PS_ADC_FULL_SCALE;
 8001a94:	1dbb      	adds	r3, r7, #6
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff fbb1 	bl	8001200 <__aeabi_ui2f>
 8001a9e:	1c03      	adds	r3, r0, #0
 8001aa0:	4906      	ldr	r1, [pc, #24]	@ (8001abc <adc_raw_to_vpin+0x34>)
 8001aa2:	1c18      	adds	r0, r3, #0
 8001aa4:	f7fe ffce 	bl	8000a44 <__aeabi_fmul>
 8001aa8:	1c03      	adds	r3, r0, #0
 8001aaa:	4905      	ldr	r1, [pc, #20]	@ (8001ac0 <adc_raw_to_vpin+0x38>)
 8001aac:	1c18      	adds	r0, r3, #0
 8001aae:	f7fe fdfb 	bl	80006a8 <__aeabi_fdiv>
 8001ab2:	1c03      	adds	r3, r0, #0
}
 8001ab4:	1c18      	adds	r0, r3, #0
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b002      	add	sp, #8
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40533333 	.word	0x40533333
 8001ac0:	457ff000 	.word	0x457ff000

08001ac4 <volts_to_mV_u16>:

/* Saturate float volts to uint16 millivolts. */
static inline uint16_t volts_to_mV_u16(float v)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    /* Clamp to 0..65.535 V -> 0..65535 mV for transport.
       Adjust if your device input can exceed this. */
    if (v <= 0.0f) return 0u;
 8001acc:	2100      	movs	r1, #0
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe fbc2 	bl	8000258 <__aeabi_fcmple>
 8001ad4:	1e03      	subs	r3, r0, #0
 8001ad6:	d001      	beq.n	8001adc <volts_to_mV_u16+0x18>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e018      	b.n	8001b0e <volts_to_mV_u16+0x4a>
    float mv = v * 1000.0f;
 8001adc:	490e      	ldr	r1, [pc, #56]	@ (8001b18 <volts_to_mV_u16+0x54>)
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe ffb0 	bl	8000a44 <__aeabi_fmul>
 8001ae4:	1c03      	adds	r3, r0, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
    if (mv >= 65535.0f) return 65535u;
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <volts_to_mV_u16+0x58>)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7fe fbc8 	bl	8000280 <__aeabi_fcmpge>
 8001af0:	1e03      	subs	r3, r0, #0
 8001af2:	d001      	beq.n	8001af8 <volts_to_mV_u16+0x34>
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <volts_to_mV_u16+0x5c>)
 8001af6:	e00a      	b.n	8001b0e <volts_to_mV_u16+0x4a>
    return (uint16_t)(mv + 0.5f);
 8001af8:	21fc      	movs	r1, #252	@ 0xfc
 8001afa:	0589      	lsls	r1, r1, #22
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7fe fbe1 	bl	80002c4 <__aeabi_fadd>
 8001b02:	1c03      	adds	r3, r0, #0
 8001b04:	1c18      	adds	r0, r3, #0
 8001b06:	f7fe fbc5 	bl	8000294 <__aeabi_f2uiz>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	b29b      	uxth	r3, r3
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	447a0000 	.word	0x447a0000
 8001b1c:	477fff00 	.word	0x477fff00
 8001b20:	0000ffff 	.word	0x0000ffff

08001b24 <put_u16_be>:

/* Big-endian write of u16 into a byte buffer. */
static inline void put_u16_be(uint8_t *buf, uint16_t v)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	1cbb      	adds	r3, r7, #2
 8001b30:	801a      	strh	r2, [r3, #0]
    buf[0] = (uint8_t)((v >> 8) & 0xFFu);
 8001b32:	1cbb      	adds	r3, r7, #2
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)(v & 0xFFu);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3301      	adds	r3, #1
 8001b44:	1cba      	adds	r2, r7, #2
 8001b46:	8812      	ldrh	r2, [r2, #0]
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
}
 8001b4c:	46c0      	nop			@ (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <Process_Signals_Init>:

/* ---------- Public API ---------- */

void Process_Signals_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < PS_NUM_CHANNELS; ++i) {
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	e03c      	b.n	8001bdc <Process_Signals_Init+0x88>
        s_cal[i].gain   = 1.0f;             /* unity by default */
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <Process_Signals_Init+0xa8>)
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	21fe      	movs	r1, #254	@ 0xfe
 8001b6c:	0589      	lsls	r1, r1, #22
 8001b6e:	50d1      	str	r1, [r2, r3]
        s_cal[i].offset = 0.0f;
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4a21      	ldr	r2, [pc, #132]	@ (8001bfc <Process_Signals_Init+0xa8>)
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	18d3      	adds	r3, r2, r3
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
        s_cal[i].v_min  = PS_DEFAULT_MIN_V; /* device-input domain */
 8001b80:	1dfb      	adds	r3, r7, #7
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <Process_Signals_Init+0xa8>)
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	18d3      	adds	r3, r2, r3
 8001b8a:	3308      	adds	r3, #8
 8001b8c:	22fc      	movs	r2, #252	@ 0xfc
 8001b8e:	0592      	lsls	r2, r2, #22
 8001b90:	601a      	str	r2, [r3, #0]
        s_cal[i].v_max  = PS_DEFAULT_MAX_V;
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4a19      	ldr	r2, [pc, #100]	@ (8001bfc <Process_Signals_Init+0xa8>)
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	18d3      	adds	r3, r2, r3
 8001b9c:	330c      	adds	r3, #12
 8001b9e:	4a18      	ldr	r2, [pc, #96]	@ (8001c00 <Process_Signals_Init+0xac>)
 8001ba0:	601a      	str	r2, [r3, #0]
        s_raw[i]        = 0u;
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <Process_Signals_Init+0xb0>)
 8001ba8:	0052      	lsls	r2, r2, #1
 8001baa:	2100      	movs	r1, #0
 8001bac:	52d1      	strh	r1, [r2, r3]
        s_v_pin[i]      = 0.0f;
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <Process_Signals_Init+0xb4>)
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	50d1      	str	r1, [r2, r3]
        s_v_in[i]       = 0.0f;
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <Process_Signals_Init+0xb8>)
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	50d1      	str	r1, [r2, r3]
        s_v_in_mV[i]    = 0u;
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <Process_Signals_Init+0xbc>)
 8001bcc:	0052      	lsls	r2, r2, #1
 8001bce:	2100      	movs	r1, #0
 8001bd0:	52d1      	strh	r1, [r2, r3]
    for (uint8_t i = 0; i < PS_NUM_CHANNELS; ++i) {
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	1dfa      	adds	r2, r7, #7
 8001bd6:	7812      	ldrb	r2, [r2, #0]
 8001bd8:	3201      	adds	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d9be      	bls.n	8001b62 <Process_Signals_Init+0xe>
    }
    s_oor_mask = 0u;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <Process_Signals_Init+0xc0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
    s_last_send_tick = HAL_GetTick();
 8001bea:	f000 fb25 	bl	8002238 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <Process_Signals_Init+0xc4>)
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	46c0      	nop			@ (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b002      	add	sp, #8
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000104 	.word	0x20000104
 8001c00:	40900000 	.word	0x40900000
 8001c04:	20000184 	.word	0x20000184
 8001c08:	20000194 	.word	0x20000194
 8001c0c:	200001b4 	.word	0x200001b4
 8001c10:	200001d4 	.word	0x200001d4
 8001c14:	200001e4 	.word	0x200001e4
 8001c18:	200001e8 	.word	0x200001e8

08001c1c <Process_Signals_Update>:

void Process_Signals_Update(void)
{
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
    /* Take a stable snapshot of the DMA buffer first. */
    const volatile uint16_t *dma = ADC_Module_Get_Buffer();
 8001c22:	f7ff fbcb 	bl	80013bc <ADC_Module_Get_Buffer>
 8001c26:	0003      	movs	r3, r0
 8001c28:	60bb      	str	r3, [r7, #8]
    for (uint8_t i = 0; i < PS_NUM_CHANNELS; ++i) {
 8001c2a:	230f      	movs	r3, #15
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
 8001c32:	e011      	b.n	8001c58 <Process_Signals_Update+0x3c>
        s_raw[i] = dma[i];
 8001c34:	200f      	movs	r0, #15
 8001c36:	183b      	adds	r3, r7, r0
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	18d3      	adds	r3, r2, r3
 8001c40:	183a      	adds	r2, r7, r0
 8001c42:	7812      	ldrb	r2, [r2, #0]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b299      	uxth	r1, r3
 8001c48:	4b45      	ldr	r3, [pc, #276]	@ (8001d60 <Process_Signals_Update+0x144>)
 8001c4a:	0052      	lsls	r2, r2, #1
 8001c4c:	52d1      	strh	r1, [r2, r3]
    for (uint8_t i = 0; i < PS_NUM_CHANNELS; ++i) {
 8001c4e:	183b      	adds	r3, r7, r0
 8001c50:	183a      	adds	r2, r7, r0
 8001c52:	7812      	ldrb	r2, [r2, #0]
 8001c54:	3201      	adds	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	230f      	movs	r3, #15
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b07      	cmp	r3, #7
 8001c60:	d9e8      	bls.n	8001c34 <Process_Signals_Update+0x18>
    }

    /* Convert to pin volts, then device-input volts. */
    uint8_t mask = 0u;
 8001c62:	230e      	movs	r3, #14
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < PS_NUM_CHANNELS; ++i) {
 8001c6a:	230d      	movs	r3, #13
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	e066      	b.n	8001d42 <Process_Signals_Update+0x126>
        const float vpin = adc_raw_to_vpin(s_raw[i]);
 8001c74:	250d      	movs	r5, #13
 8001c76:	197b      	adds	r3, r7, r5
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	4b39      	ldr	r3, [pc, #228]	@ (8001d60 <Process_Signals_Update+0x144>)
 8001c7c:	0052      	lsls	r2, r2, #1
 8001c7e:	5ad3      	ldrh	r3, [r2, r3]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff ff01 	bl	8001a88 <adc_raw_to_vpin>
 8001c86:	1c03      	adds	r3, r0, #0
 8001c88:	607b      	str	r3, [r7, #4]
        const float vin  = s_cal[i].gain * vpin + s_cal[i].offset;
 8001c8a:	197b      	adds	r3, r7, r5
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	4b35      	ldr	r3, [pc, #212]	@ (8001d64 <Process_Signals_Update+0x148>)
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	58d3      	ldr	r3, [r2, r3]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	1c18      	adds	r0, r3, #0
 8001c98:	f7fe fed4 	bl	8000a44 <__aeabi_fmul>
 8001c9c:	1c03      	adds	r3, r0, #0
 8001c9e:	1c18      	adds	r0, r3, #0
 8001ca0:	197b      	adds	r3, r7, r5
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8001d64 <Process_Signals_Update+0x148>)
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	18d3      	adds	r3, r2, r3
 8001caa:	3304      	adds	r3, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	1c19      	adds	r1, r3, #0
 8001cb0:	f7fe fb08 	bl	80002c4 <__aeabi_fadd>
 8001cb4:	1c03      	adds	r3, r0, #0
 8001cb6:	603b      	str	r3, [r7, #0]

        s_v_pin[i]   = vpin;
 8001cb8:	197b      	adds	r3, r7, r5
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <Process_Signals_Update+0x14c>)
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	50d1      	str	r1, [r2, r3]
        s_v_in[i]    = vin;
 8001cc4:	197b      	adds	r3, r7, r5
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <Process_Signals_Update+0x150>)
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	6839      	ldr	r1, [r7, #0]
 8001cce:	50d1      	str	r1, [r2, r3]
        s_v_in_mV[i] = volts_to_mV_u16(vin);
 8001cd0:	197b      	adds	r3, r7, r5
 8001cd2:	781c      	ldrb	r4, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	1c18      	adds	r0, r3, #0
 8001cd8:	f7ff fef4 	bl	8001ac4 <volts_to_mV_u16>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	0019      	movs	r1, r3
 8001ce0:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <Process_Signals_Update+0x154>)
 8001ce2:	0062      	lsls	r2, r4, #1
 8001ce4:	52d1      	strh	r1, [r2, r3]

        if (vin < s_cal[i].v_min || vin > s_cal[i].v_max) {
 8001ce6:	002c      	movs	r4, r5
 8001ce8:	193b      	adds	r3, r7, r4
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4a1d      	ldr	r2, [pc, #116]	@ (8001d64 <Process_Signals_Update+0x148>)
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	18d3      	adds	r3, r2, r3
 8001cf2:	3308      	adds	r3, #8
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	1c19      	adds	r1, r3, #0
 8001cf8:	6838      	ldr	r0, [r7, #0]
 8001cfa:	f7fe faa3 	bl	8000244 <__aeabi_fcmplt>
 8001cfe:	1e03      	subs	r3, r0, #0
 8001d00:	d10c      	bne.n	8001d1c <Process_Signals_Update+0x100>
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <Process_Signals_Update+0x148>)
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	18d3      	adds	r3, r2, r3
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	1c19      	adds	r1, r3, #0
 8001d12:	6838      	ldr	r0, [r7, #0]
 8001d14:	f7fe faaa 	bl	800026c <__aeabi_fcmpgt>
 8001d18:	1e03      	subs	r3, r0, #0
 8001d1a:	d00c      	beq.n	8001d36 <Process_Signals_Update+0x11a>
            mask |= (uint8_t)(1u << i);
 8001d1c:	230d      	movs	r3, #13
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2201      	movs	r2, #1
 8001d24:	409a      	lsls	r2, r3
 8001d26:	0013      	movs	r3, r2
 8001d28:	b2d9      	uxtb	r1, r3
 8001d2a:	220e      	movs	r2, #14
 8001d2c:	18bb      	adds	r3, r7, r2
 8001d2e:	18ba      	adds	r2, r7, r2
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < PS_NUM_CHANNELS; ++i) {
 8001d36:	220d      	movs	r2, #13
 8001d38:	18bb      	adds	r3, r7, r2
 8001d3a:	18ba      	adds	r2, r7, r2
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	3201      	adds	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	230d      	movs	r3, #13
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b07      	cmp	r3, #7
 8001d4a:	d993      	bls.n	8001c74 <Process_Signals_Update+0x58>
        }
    }
    s_oor_mask = mask;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <Process_Signals_Update+0x158>)
 8001d4e:	220e      	movs	r2, #14
 8001d50:	18ba      	adds	r2, r7, r2
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	701a      	strb	r2, [r3, #0]
}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b004      	add	sp, #16
 8001d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	20000184 	.word	0x20000184
 8001d64:	20000104 	.word	0x20000104
 8001d68:	20000194 	.word	0x20000194
 8001d6c:	200001b4 	.word	0x200001b4
 8001d70:	200001d4 	.word	0x200001d4
 8001d74:	200001e4 	.word	0x200001e4

08001d78 <Process_Signals_Send_Can>:
    s_cal[ch].gain   = gain;
    s_cal[ch].offset = offset;
}

HAL_StatusTypeDef Process_Signals_Send_Can(uint32_t timeout_ms)
{
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
    /* Caller may have called Update() already; we do not force it. */

    uint8_t frame[8];

    /* Frame 1: channels 0..3 */
    put_u16_be(&frame[0], s_v_in_mV[0]);
 8001d80:	4b3a      	ldr	r3, [pc, #232]	@ (8001e6c <Process_Signals_Send_Can+0xf4>)
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	2508      	movs	r5, #8
 8001d86:	197b      	adds	r3, r7, r5
 8001d88:	0011      	movs	r1, r2
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7ff feca 	bl	8001b24 <put_u16_be>
    put_u16_be(&frame[2], s_v_in_mV[1]);
 8001d90:	4b36      	ldr	r3, [pc, #216]	@ (8001e6c <Process_Signals_Send_Can+0xf4>)
 8001d92:	885a      	ldrh	r2, [r3, #2]
 8001d94:	197b      	adds	r3, r7, r5
 8001d96:	3302      	adds	r3, #2
 8001d98:	0011      	movs	r1, r2
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff fec2 	bl	8001b24 <put_u16_be>
    put_u16_be(&frame[4], s_v_in_mV[2]);
 8001da0:	4b32      	ldr	r3, [pc, #200]	@ (8001e6c <Process_Signals_Send_Can+0xf4>)
 8001da2:	889a      	ldrh	r2, [r3, #4]
 8001da4:	197b      	adds	r3, r7, r5
 8001da6:	3304      	adds	r3, #4
 8001da8:	0011      	movs	r1, r2
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7ff feba 	bl	8001b24 <put_u16_be>
    put_u16_be(&frame[6], s_v_in_mV[3]);
 8001db0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e6c <Process_Signals_Send_Can+0xf4>)
 8001db2:	88da      	ldrh	r2, [r3, #6]
 8001db4:	197b      	adds	r3, r7, r5
 8001db6:	3306      	adds	r3, #6
 8001db8:	0011      	movs	r1, r2
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7ff feb2 	bl	8001b24 <put_u16_be>

    uint16_t id1 = (uint16_t)(CAN_Module_Get_Node_Id() + 0x1u);
 8001dc0:	f7ff fbe6 	bl	8001590 <CAN_Module_Get_Node_Id>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	2016      	movs	r0, #22
 8001dca:	183b      	adds	r3, r7, r0
 8001dcc:	3201      	adds	r2, #1
 8001dce:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef st = CAN_Module_Send_Std(id1, frame, 8u, timeout_ms);
 8001dd0:	2615      	movs	r6, #21
 8001dd2:	19bc      	adds	r4, r7, r6
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	1979      	adds	r1, r7, r5
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	8818      	ldrh	r0, [r3, #0]
 8001ddc:	0013      	movs	r3, r2
 8001dde:	2208      	movs	r2, #8
 8001de0:	f7ff fbe0 	bl	80015a4 <CAN_Module_Send_Std>
 8001de4:	0003      	movs	r3, r0
 8001de6:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) {
 8001de8:	19bb      	adds	r3, r7, r6
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <Process_Signals_Send_Can+0x7e>
        return st;
 8001df0:	19bb      	adds	r3, r7, r6
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	e035      	b.n	8001e62 <Process_Signals_Send_Can+0xea>
    }

    /* Frame 2: channels 4..7 */
    put_u16_be(&frame[0], s_v_in_mV[4]);
 8001df6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <Process_Signals_Send_Can+0xf4>)
 8001df8:	891a      	ldrh	r2, [r3, #8]
 8001dfa:	2508      	movs	r5, #8
 8001dfc:	197b      	adds	r3, r7, r5
 8001dfe:	0011      	movs	r1, r2
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff fe8f 	bl	8001b24 <put_u16_be>
    put_u16_be(&frame[2], s_v_in_mV[5]);
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <Process_Signals_Send_Can+0xf4>)
 8001e08:	895a      	ldrh	r2, [r3, #10]
 8001e0a:	197b      	adds	r3, r7, r5
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	0011      	movs	r1, r2
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff fe87 	bl	8001b24 <put_u16_be>
    put_u16_be(&frame[4], s_v_in_mV[6]);
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <Process_Signals_Send_Can+0xf4>)
 8001e18:	899a      	ldrh	r2, [r3, #12]
 8001e1a:	197b      	adds	r3, r7, r5
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	0011      	movs	r1, r2
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff fe7f 	bl	8001b24 <put_u16_be>
    put_u16_be(&frame[6], s_v_in_mV[7]);
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <Process_Signals_Send_Can+0xf4>)
 8001e28:	89da      	ldrh	r2, [r3, #14]
 8001e2a:	197b      	adds	r3, r7, r5
 8001e2c:	3306      	adds	r3, #6
 8001e2e:	0011      	movs	r1, r2
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff fe77 	bl	8001b24 <put_u16_be>

    uint16_t id2 = (uint16_t)(CAN_Module_Get_Node_Id() + 0x2u);
 8001e36:	f7ff fbab 	bl	8001590 <CAN_Module_Get_Node_Id>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	001a      	movs	r2, r3
 8001e3e:	2012      	movs	r0, #18
 8001e40:	183b      	adds	r3, r7, r0
 8001e42:	3202      	adds	r2, #2
 8001e44:	801a      	strh	r2, [r3, #0]
    st = CAN_Module_Send_Std(id2, frame, 8u, timeout_ms);
 8001e46:	2615      	movs	r6, #21
 8001e48:	19bc      	adds	r4, r7, r6
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	1979      	adds	r1, r7, r5
 8001e4e:	183b      	adds	r3, r7, r0
 8001e50:	8818      	ldrh	r0, [r3, #0]
 8001e52:	0013      	movs	r3, r2
 8001e54:	2208      	movs	r2, #8
 8001e56:	f7ff fba5 	bl	80015a4 <CAN_Module_Send_Std>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	7023      	strb	r3, [r4, #0]
    return st;
 8001e5e:	19bb      	adds	r3, r7, r6
 8001e60:	781b      	ldrb	r3, [r3, #0]
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b007      	add	sp, #28
 8001e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	200001d4 	.word	0x200001d4

08001e70 <Process_Signals_Send_Can_If_Due>:

HAL_StatusTypeDef Process_Signals_Send_Can_If_Due(uint32_t period_ms, uint32_t timeout_ms)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
    const uint32_t now = HAL_GetTick();
 8001e7a:	f000 f9dd 	bl	8002238 <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	60fb      	str	r3, [r7, #12]
    if ((now - s_last_send_tick) < period_ms) {
 8001e82:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <Process_Signals_Send_Can_If_Due+0x40>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d901      	bls.n	8001e94 <Process_Signals_Send_Can_If_Due+0x24>
        return HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
 8001e92:	e009      	b.n	8001ea8 <Process_Signals_Send_Can_If_Due+0x38>
    }
    s_last_send_tick = now;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <Process_Signals_Send_Can_If_Due+0x40>)
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	601a      	str	r2, [r3, #0]

    /* Update snapshot right before sending to minimize staleness. */
    Process_Signals_Update();
 8001e9a:	f7ff febf 	bl	8001c1c <Process_Signals_Update>
    return Process_Signals_Send_Can(timeout_ms);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff ff69 	bl	8001d78 <Process_Signals_Send_Can>
 8001ea6:	0003      	movs	r3, r0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200001e8 	.word	0x200001e8

08001eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	619a      	str	r2, [r3, #24]
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ed8:	2180      	movs	r1, #128	@ 0x80
 8001eda:	0549      	lsls	r1, r1, #21
 8001edc:	430a      	orrs	r2, r1
 8001ede:	61da      	str	r2, [r3, #28]
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	055b      	lsls	r3, r3, #21
 8001ee8:	4013      	ands	r3, r2
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b08b      	sub	sp, #44	@ 0x2c
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	2414      	movs	r4, #20
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	0018      	movs	r0, r3
 8001f0a:	2314      	movs	r3, #20
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	2100      	movs	r1, #0
 8001f10:	f002 fa82 	bl	8004418 <memset>
  if(hadc->Instance==ADC1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd0 <HAL_ADC_MspInit+0xd4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d154      	bne.n	8001fc8 <HAL_ADC_MspInit+0xcc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <HAL_ADC_MspInit+0xd8>)
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd4 <HAL_ADC_MspInit+0xd8>)
 8001f24:	2180      	movs	r1, #128	@ 0x80
 8001f26:	0089      	lsls	r1, r1, #2
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	619a      	str	r2, [r3, #24]
 8001f2c:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <HAL_ADC_MspInit+0xd8>)
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	2380      	movs	r3, #128	@ 0x80
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	4b26      	ldr	r3, [pc, #152]	@ (8001fd4 <HAL_ADC_MspInit+0xd8>)
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <HAL_ADC_MspInit+0xd8>)
 8001f40:	2180      	movs	r1, #128	@ 0x80
 8001f42:	0289      	lsls	r1, r1, #10
 8001f44:	430a      	orrs	r2, r1
 8001f46:	615a      	str	r2, [r3, #20]
 8001f48:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <HAL_ADC_MspInit+0xd8>)
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	029b      	lsls	r3, r3, #10
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	22ff      	movs	r2, #255	@ 0xff
 8001f5a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5c:	193b      	adds	r3, r7, r4
 8001f5e:	2203      	movs	r2, #3
 8001f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	193a      	adds	r2, r7, r4
 8001f6a:	2390      	movs	r3, #144	@ 0x90
 8001f6c:	05db      	lsls	r3, r3, #23
 8001f6e:	0011      	movs	r1, r2
 8001f70:	0018      	movs	r0, r3
 8001f72:	f001 fbdd 	bl	8003730 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001f78:	4a18      	ldr	r2, [pc, #96]	@ (8001fdc <HAL_ADC_MspInit+0xe0>)
 8001f7a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7c:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001f8a:	2280      	movs	r2, #128	@ 0x80
 8001f8c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f8e:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001f90:	2280      	movs	r2, #128	@ 0x80
 8001f92:	0052      	lsls	r2, r2, #1
 8001f94:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001f98:	2280      	movs	r2, #128	@ 0x80
 8001f9a:	00d2      	lsls	r2, r2, #3
 8001f9c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001fa6:	2280      	movs	r2, #128	@ 0x80
 8001fa8:	0152      	lsls	r2, r2, #5
 8001faa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001fac:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f001 fa26 	bl	8003400 <HAL_DMA_Init>
 8001fb4:	1e03      	subs	r3, r0, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001fb8:	f7ff fd60 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a06      	ldr	r2, [pc, #24]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_ADC_MspInit+0xdc>)
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b00b      	add	sp, #44	@ 0x2c
 8001fce:	bd90      	pop	{r4, r7, pc}
 8001fd0:	40012400 	.word	0x40012400
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	20000090 	.word	0x20000090
 8001fdc:	40020008 	.word	0x40020008

08001fe0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b08b      	sub	sp, #44	@ 0x2c
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	2414      	movs	r4, #20
 8001fea:	193b      	adds	r3, r7, r4
 8001fec:	0018      	movs	r0, r3
 8001fee:	2314      	movs	r3, #20
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f002 fa10 	bl	8004418 <memset>
  if(hcan->Instance==CAN)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	@ (80020a0 <HAL_CAN_MspInit+0xc0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d14a      	bne.n	8002098 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002002:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <HAL_CAN_MspInit+0xc4>)
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	4b27      	ldr	r3, [pc, #156]	@ (80020a4 <HAL_CAN_MspInit+0xc4>)
 8002008:	2180      	movs	r1, #128	@ 0x80
 800200a:	0489      	lsls	r1, r1, #18
 800200c:	430a      	orrs	r2, r1
 800200e:	61da      	str	r2, [r3, #28]
 8002010:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <HAL_CAN_MspInit+0xc4>)
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	049b      	lsls	r3, r3, #18
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <HAL_CAN_MspInit+0xc4>)
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_CAN_MspInit+0xc4>)
 8002024:	2180      	movs	r1, #128	@ 0x80
 8002026:	0289      	lsls	r1, r1, #10
 8002028:	430a      	orrs	r2, r1
 800202a:	615a      	str	r2, [r3, #20]
 800202c:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <HAL_CAN_MspInit+0xc4>)
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	029b      	lsls	r3, r3, #10
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800203a:	193b      	adds	r3, r7, r4
 800203c:	2280      	movs	r2, #128	@ 0x80
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	193b      	adds	r3, r7, r4
 8002044:	2202      	movs	r2, #2
 8002046:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002048:	193b      	adds	r3, r7, r4
 800204a:	2201      	movs	r2, #1
 800204c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204e:	193b      	adds	r3, r7, r4
 8002050:	2203      	movs	r2, #3
 8002052:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002054:	193b      	adds	r3, r7, r4
 8002056:	2204      	movs	r2, #4
 8002058:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	193a      	adds	r2, r7, r4
 800205c:	2390      	movs	r3, #144	@ 0x90
 800205e:	05db      	lsls	r3, r3, #23
 8002060:	0011      	movs	r1, r2
 8002062:	0018      	movs	r0, r3
 8002064:	f001 fb64 	bl	8003730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002068:	0021      	movs	r1, r4
 800206a:	187b      	adds	r3, r7, r1
 800206c:	2280      	movs	r2, #128	@ 0x80
 800206e:	0152      	lsls	r2, r2, #5
 8002070:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	187b      	adds	r3, r7, r1
 8002074:	2202      	movs	r2, #2
 8002076:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	187b      	adds	r3, r7, r1
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207e:	187b      	adds	r3, r7, r1
 8002080:	2203      	movs	r2, #3
 8002082:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002084:	187b      	adds	r3, r7, r1
 8002086:	2204      	movs	r2, #4
 8002088:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	187a      	adds	r2, r7, r1
 800208c:	2390      	movs	r3, #144	@ 0x90
 800208e:	05db      	lsls	r3, r3, #23
 8002090:	0011      	movs	r1, r2
 8002092:	0018      	movs	r0, r3
 8002094:	f001 fb4c 	bl	8003730 <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8002098:	46c0      	nop			@ (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	b00b      	add	sp, #44	@ 0x2c
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	40006400 	.word	0x40006400
 80020a4:	40021000 	.word	0x40021000

080020a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020ac:	46c0      	nop			@ (mov r8, r8)
 80020ae:	e7fd      	b.n	80020ac <NMI_Handler+0x4>

080020b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	e7fd      	b.n	80020b4 <HardFault_Handler+0x4>

080020b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d0:	f000 f8a0 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d4:	46c0      	nop			@ (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80020e0:	4b03      	ldr	r3, [pc, #12]	@ (80020f0 <DMA1_Channel1_IRQHandler+0x14>)
 80020e2:	0018      	movs	r0, r3
 80020e4:	f001 fa3a 	bl	800355c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	20000090 	.word	0x20000090

080020f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020f8:	46c0      	nop			@ (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002100:	4813      	ldr	r0, [pc, #76]	@ (8002150 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002102:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002104:	f7ff fff6 	bl	80020f4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002108:	4812      	ldr	r0, [pc, #72]	@ (8002154 <LoopForever+0x6>)
    LDR R1, [R0]
 800210a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800210c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <LoopForever+0xa>)
    CMP R1, R2
 8002110:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002112:	d105      	bne.n	8002120 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002114:	4811      	ldr	r0, [pc, #68]	@ (800215c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002116:	4912      	ldr	r1, [pc, #72]	@ (8002160 <LoopForever+0x12>)
    STR R1, [R0]
 8002118:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800211a:	4812      	ldr	r0, [pc, #72]	@ (8002164 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800211c:	4912      	ldr	r1, [pc, #72]	@ (8002168 <LoopForever+0x1a>)
    STR R1, [R0]
 800211e:	6001      	str	r1, [r0, #0]

08002120 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002120:	4812      	ldr	r0, [pc, #72]	@ (800216c <LoopForever+0x1e>)
  ldr r1, =_edata
 8002122:	4913      	ldr	r1, [pc, #76]	@ (8002170 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002124:	4a13      	ldr	r2, [pc, #76]	@ (8002174 <LoopForever+0x26>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002128:	e002      	b.n	8002130 <LoopCopyDataInit>

0800212a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800212c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212e:	3304      	adds	r3, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002134:	d3f9      	bcc.n	800212a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002136:	4a10      	ldr	r2, [pc, #64]	@ (8002178 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002138:	4c10      	ldr	r4, [pc, #64]	@ (800217c <LoopForever+0x2e>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800213c:	e001      	b.n	8002142 <LoopFillZerobss>

0800213e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002140:	3204      	adds	r2, #4

08002142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002144:	d3fb      	bcc.n	800213e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002146:	f002 f96f 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800214a:	f7ff fa7d 	bl	8001648 <main>

0800214e <LoopForever>:

LoopForever:
    b LoopForever
 800214e:	e7fe      	b.n	800214e <LoopForever>
  ldr   r0, =_estack
 8002150:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002154:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002158:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800215c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002160:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002164:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002168:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002170:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002174:	0800453c 	.word	0x0800453c
  ldr r2, =_sbss
 8002178:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800217c:	200001f0 	.word	0x200001f0

08002180 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002180:	e7fe      	b.n	8002180 <ADC1_IRQHandler>
	...

08002184 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002188:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <HAL_Init+0x24>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_Init+0x24>)
 800218e:	2110      	movs	r1, #16
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002194:	2003      	movs	r0, #3
 8002196:	f000 f809 	bl	80021ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800219a:	f7ff fe8b 	bl	8001eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	40022000 	.word	0x40022000

080021ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b4:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <HAL_InitTick+0x5c>)
 80021b6:	681c      	ldr	r4, [r3, #0]
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <HAL_InitTick+0x60>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	0019      	movs	r1, r3
 80021be:	23fa      	movs	r3, #250	@ 0xfa
 80021c0:	0098      	lsls	r0, r3, #2
 80021c2:	f7fd ffa1 	bl	8000108 <__udivsi3>
 80021c6:	0003      	movs	r3, r0
 80021c8:	0019      	movs	r1, r3
 80021ca:	0020      	movs	r0, r4
 80021cc:	f7fd ff9c 	bl	8000108 <__udivsi3>
 80021d0:	0003      	movs	r3, r0
 80021d2:	0018      	movs	r0, r3
 80021d4:	f001 f907 	bl	80033e6 <HAL_SYSTICK_Config>
 80021d8:	1e03      	subs	r3, r0, #0
 80021da:	d001      	beq.n	80021e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e00f      	b.n	8002200 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d80b      	bhi.n	80021fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	2301      	movs	r3, #1
 80021ea:	425b      	negs	r3, r3
 80021ec:	2200      	movs	r2, #0
 80021ee:	0018      	movs	r0, r3
 80021f0:	f001 f8d4 	bl	800339c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_InitTick+0x64>)
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b003      	add	sp, #12
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	20000010 	.word	0x20000010
 800220c:	20000018 	.word	0x20000018
 8002210:	20000014 	.word	0x20000014

08002214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <HAL_IncTick+0x1c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	001a      	movs	r2, r3
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_IncTick+0x20>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	18d2      	adds	r2, r2, r3
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <HAL_IncTick+0x20>)
 8002226:	601a      	str	r2, [r3, #0]
}
 8002228:	46c0      	nop			@ (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	20000018 	.word	0x20000018
 8002234:	200001ec 	.word	0x200001ec

08002238 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  return uwTick;
 800223c:	4b02      	ldr	r3, [pc, #8]	@ (8002248 <HAL_GetTick+0x10>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	200001ec 	.word	0x200001ec

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fff0 	bl	8002238 <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3301      	adds	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <HAL_Delay+0x44>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	001a      	movs	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	189b      	adds	r3, r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	f7ff ffe0 	bl	8002238 <HAL_GetTick>
 8002278:	0002      	movs	r2, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8f7      	bhi.n	8002274 <HAL_Delay+0x28>
  {
  }
}
 8002284:	46c0      	nop			@ (mov r8, r8)
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	46bd      	mov	sp, r7
 800228a:	b004      	add	sp, #16
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	20000018 	.word	0x20000018

08002294 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800229c:	230f      	movs	r3, #15
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e125      	b.n	80024fe <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2234      	movs	r2, #52	@ 0x34
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7ff fe16 	bl	8001efc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d4:	2210      	movs	r2, #16
 80022d6:	4013      	ands	r3, r2
 80022d8:	d000      	beq.n	80022dc <HAL_ADC_Init+0x48>
 80022da:	e103      	b.n	80024e4 <HAL_ADC_Init+0x250>
 80022dc:	230f      	movs	r3, #15
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d000      	beq.n	80022e8 <HAL_ADC_Init+0x54>
 80022e6:	e0fd      	b.n	80024e4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2204      	movs	r2, #4
 80022f0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80022f2:	d000      	beq.n	80022f6 <HAL_ADC_Init+0x62>
 80022f4:	e0f6      	b.n	80024e4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fa:	4a83      	ldr	r2, [pc, #524]	@ (8002508 <HAL_ADC_Init+0x274>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	2202      	movs	r2, #2
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2203      	movs	r2, #3
 800230e:	4013      	ands	r3, r2
 8002310:	2b01      	cmp	r3, #1
 8002312:	d112      	bne.n	800233a <HAL_ADC_Init+0xa6>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2201      	movs	r2, #1
 800231c:	4013      	ands	r3, r2
 800231e:	2b01      	cmp	r3, #1
 8002320:	d009      	beq.n	8002336 <HAL_ADC_Init+0xa2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	401a      	ands	r2, r3
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	429a      	cmp	r2, r3
 8002334:	d101      	bne.n	800233a <HAL_ADC_Init+0xa6>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_ADC_Init+0xa8>
 800233a:	2300      	movs	r3, #0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d116      	bne.n	800236e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2218      	movs	r2, #24
 8002348:	4393      	bics	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	0899      	lsrs	r1, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4964      	ldr	r1, [pc, #400]	@ (800250c <HAL_ADC_Init+0x278>)
 800237a:	400a      	ands	r2, r1
 800237c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	7e1b      	ldrb	r3, [r3, #24]
 8002382:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7e5b      	ldrb	r3, [r3, #25]
 8002388:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800238a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e9b      	ldrb	r3, [r3, #26]
 8002390:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002392:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	2b01      	cmp	r3, #1
 800239a:	d002      	beq.n	80023a2 <HAL_ADC_Init+0x10e>
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	015b      	lsls	r3, r3, #5
 80023a0:	e000      	b.n	80023a4 <HAL_ADC_Init+0x110>
 80023a2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023a4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80023aa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_Init+0x124>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e000      	b.n	80023ba <HAL_ADC_Init+0x126>
 80023b8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80023ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2124      	movs	r1, #36	@ 0x24
 80023c0:	5c5b      	ldrb	r3, [r3, r1]
 80023c2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80023c4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7edb      	ldrb	r3, [r3, #27]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d115      	bne.n	8002400 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7e9b      	ldrb	r3, [r3, #26]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2280      	movs	r2, #128	@ 0x80
 80023e0:	0252      	lsls	r2, r2, #9
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	e00b      	b.n	8002400 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ec:	2220      	movs	r2, #32
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f8:	2201      	movs	r2, #1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	23c2      	movs	r3, #194	@ 0xc2
 8002406:	33ff      	adds	r3, #255	@ 0xff
 8002408:	429a      	cmp	r2, r3
 800240a:	d007      	beq.n	800241c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002414:	4313      	orrs	r3, r2
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4313      	orrs	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68d9      	ldr	r1, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	430a      	orrs	r2, r1
 800242a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	055b      	lsls	r3, r3, #21
 8002434:	429a      	cmp	r2, r3
 8002436:	d01b      	beq.n	8002470 <HAL_ADC_Init+0x1dc>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d017      	beq.n	8002470 <HAL_ADC_Init+0x1dc>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002444:	2b02      	cmp	r3, #2
 8002446:	d013      	beq.n	8002470 <HAL_ADC_Init+0x1dc>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	2b03      	cmp	r3, #3
 800244e:	d00f      	beq.n	8002470 <HAL_ADC_Init+0x1dc>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002454:	2b04      	cmp	r3, #4
 8002456:	d00b      	beq.n	8002470 <HAL_ADC_Init+0x1dc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	2b05      	cmp	r3, #5
 800245e:	d007      	beq.n	8002470 <HAL_ADC_Init+0x1dc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002464:	2b06      	cmp	r3, #6
 8002466:	d003      	beq.n	8002470 <HAL_ADC_Init+0x1dc>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	2b07      	cmp	r3, #7
 800246e:	d112      	bne.n	8002496 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2107      	movs	r1, #7
 800247c:	438a      	bics	r2, r1
 800247e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6959      	ldr	r1, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248a:	2207      	movs	r2, #7
 800248c:	401a      	ands	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a1c      	ldr	r2, [pc, #112]	@ (8002510 <HAL_ADC_Init+0x27c>)
 800249e:	4013      	ands	r3, r2
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d10b      	bne.n	80024be <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b0:	2203      	movs	r2, #3
 80024b2:	4393      	bics	r3, r2
 80024b4:	2201      	movs	r2, #1
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80024bc:	e01c      	b.n	80024f8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c2:	2212      	movs	r2, #18
 80024c4:	4393      	bics	r3, r2
 80024c6:	2210      	movs	r2, #16
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d2:	2201      	movs	r2, #1
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80024da:	230f      	movs	r3, #15
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80024e2:	e009      	b.n	80024f8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e8:	2210      	movs	r2, #16
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80024f0:	230f      	movs	r3, #15
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024f8:	230f      	movs	r3, #15
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	781b      	ldrb	r3, [r3, #0]
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b004      	add	sp, #16
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	fffffefd 	.word	0xfffffefd
 800250c:	fffe0219 	.word	0xfffe0219
 8002510:	833fffe7 	.word	0x833fffe7

08002514 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002520:	2317      	movs	r3, #23
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2204      	movs	r2, #4
 8002530:	4013      	ands	r3, r2
 8002532:	d15e      	bne.n	80025f2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2234      	movs	r2, #52	@ 0x34
 8002538:	5c9b      	ldrb	r3, [r3, r2]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_ADC_Start_DMA+0x2e>
 800253e:	2302      	movs	r3, #2
 8002540:	e05e      	b.n	8002600 <HAL_ADC_Start_DMA+0xec>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2234      	movs	r2, #52	@ 0x34
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	7e5b      	ldrb	r3, [r3, #25]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d007      	beq.n	8002562 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002552:	2317      	movs	r3, #23
 8002554:	18fc      	adds	r4, r7, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f983 	bl	8002864 <ADC_Enable>
 800255e:	0003      	movs	r3, r0
 8002560:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002562:	2317      	movs	r3, #23
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d146      	bne.n	80025fa <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002570:	4a25      	ldr	r2, [pc, #148]	@ (8002608 <HAL_ADC_Start_DMA+0xf4>)
 8002572:	4013      	ands	r3, r2
 8002574:	2280      	movs	r2, #128	@ 0x80
 8002576:	0052      	lsls	r2, r2, #1
 8002578:	431a      	orrs	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2234      	movs	r2, #52	@ 0x34
 8002588:	2100      	movs	r1, #0
 800258a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	4a1e      	ldr	r2, [pc, #120]	@ (800260c <HAL_ADC_Start_DMA+0xf8>)
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	4a1d      	ldr	r2, [pc, #116]	@ (8002610 <HAL_ADC_Start_DMA+0xfc>)
 800259a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002614 <HAL_ADC_Start_DMA+0x100>)
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	221c      	movs	r2, #28
 80025aa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2110      	movs	r1, #16
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2101      	movs	r1, #1
 80025c8:	430a      	orrs	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3340      	adds	r3, #64	@ 0x40
 80025d6:	0019      	movs	r1, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f000 ff58 	bl	8003490 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2104      	movs	r1, #4
 80025ec:	430a      	orrs	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	e003      	b.n	80025fa <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025f2:	2317      	movs	r3, #23
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	2202      	movs	r2, #2
 80025f8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025fa:	2317      	movs	r3, #23
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	781b      	ldrb	r3, [r3, #0]
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	b007      	add	sp, #28
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	fffff0fe 	.word	0xfffff0fe
 800260c:	0800296d 	.word	0x0800296d
 8002610:	08002a21 	.word	0x08002a21
 8002614:	08002a3f 	.word	0x08002a3f

08002618 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002640:	46c0      	nop			@ (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002652:	230f      	movs	r3, #15
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	055b      	lsls	r3, r3, #21
 8002666:	429a      	cmp	r2, r3
 8002668:	d011      	beq.n	800268e <HAL_ADC_ConfigChannel+0x46>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d00d      	beq.n	800268e <HAL_ADC_ConfigChannel+0x46>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002676:	2b02      	cmp	r3, #2
 8002678:	d009      	beq.n	800268e <HAL_ADC_ConfigChannel+0x46>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267e:	2b03      	cmp	r3, #3
 8002680:	d005      	beq.n	800268e <HAL_ADC_ConfigChannel+0x46>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002686:	2b04      	cmp	r3, #4
 8002688:	d001      	beq.n	800268e <HAL_ADC_ConfigChannel+0x46>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2234      	movs	r2, #52	@ 0x34
 8002692:	5c9b      	ldrb	r3, [r3, r2]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x54>
 8002698:	2302      	movs	r3, #2
 800269a:	e0d0      	b.n	800283e <HAL_ADC_ConfigChannel+0x1f6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2234      	movs	r2, #52	@ 0x34
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2204      	movs	r2, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d000      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0x6a>
 80026b0:	e0b4      	b.n	800281c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a64      	ldr	r2, [pc, #400]	@ (8002848 <HAL_ADC_ConfigChannel+0x200>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d100      	bne.n	80026be <HAL_ADC_ConfigChannel+0x76>
 80026bc:	e082      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	409a      	lsls	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	055b      	lsls	r3, r3, #21
 80026dc:	429a      	cmp	r2, r3
 80026de:	d037      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x108>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d033      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x108>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d02f      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x108>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d02b      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x108>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d027      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x108>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	2b05      	cmp	r3, #5
 8002706:	d023      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x108>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	2b06      	cmp	r3, #6
 800270e:	d01f      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x108>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002714:	2b07      	cmp	r3, #7
 8002716:	d01b      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2107      	movs	r1, #7
 8002724:	400b      	ands	r3, r1
 8002726:	429a      	cmp	r2, r3
 8002728:	d012      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2107      	movs	r1, #7
 8002736:	438a      	bics	r2, r1
 8002738:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6959      	ldr	r1, [r3, #20]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2207      	movs	r2, #7
 8002746:	401a      	ands	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b10      	cmp	r3, #16
 8002756:	d007      	beq.n	8002768 <HAL_ADC_ConfigChannel+0x120>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b11      	cmp	r3, #17
 800275e:	d003      	beq.n	8002768 <HAL_ADC_ConfigChannel+0x120>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b12      	cmp	r3, #18
 8002766:	d163      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002768:	4b38      	ldr	r3, [pc, #224]	@ (800284c <HAL_ADC_ConfigChannel+0x204>)
 800276a:	6819      	ldr	r1, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b10      	cmp	r3, #16
 8002772:	d009      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x140>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b11      	cmp	r3, #17
 800277a:	d102      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x13a>
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	03db      	lsls	r3, r3, #15
 8002780:	e004      	b.n	800278c <HAL_ADC_ConfigChannel+0x144>
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	045b      	lsls	r3, r3, #17
 8002786:	e001      	b.n	800278c <HAL_ADC_ConfigChannel+0x144>
 8002788:	2380      	movs	r3, #128	@ 0x80
 800278a:	041b      	lsls	r3, r3, #16
 800278c:	4a2f      	ldr	r2, [pc, #188]	@ (800284c <HAL_ADC_ConfigChannel+0x204>)
 800278e:	430b      	orrs	r3, r1
 8002790:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b10      	cmp	r3, #16
 8002798:	d14a      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800279a:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <HAL_ADC_ConfigChannel+0x208>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	492d      	ldr	r1, [pc, #180]	@ (8002854 <HAL_ADC_ConfigChannel+0x20c>)
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7fd fcb1 	bl	8000108 <__udivsi3>
 80027a6:	0003      	movs	r3, r0
 80027a8:	001a      	movs	r2, r3
 80027aa:	0013      	movs	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027b4:	e002      	b.n	80027bc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f9      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x16e>
 80027c2:	e035      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2101      	movs	r1, #1
 80027d0:	4099      	lsls	r1, r3
 80027d2:	000b      	movs	r3, r1
 80027d4:	43d9      	mvns	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	400a      	ands	r2, r1
 80027dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b10      	cmp	r3, #16
 80027e4:	d007      	beq.n	80027f6 <HAL_ADC_ConfigChannel+0x1ae>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b11      	cmp	r3, #17
 80027ec:	d003      	beq.n	80027f6 <HAL_ADC_ConfigChannel+0x1ae>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b12      	cmp	r3, #18
 80027f4:	d11c      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80027f6:	4b15      	ldr	r3, [pc, #84]	@ (800284c <HAL_ADC_ConfigChannel+0x204>)
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d007      	beq.n	8002812 <HAL_ADC_ConfigChannel+0x1ca>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b11      	cmp	r3, #17
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x1c6>
 800280a:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <HAL_ADC_ConfigChannel+0x210>)
 800280c:	e002      	b.n	8002814 <HAL_ADC_ConfigChannel+0x1cc>
 800280e:	4b13      	ldr	r3, [pc, #76]	@ (800285c <HAL_ADC_ConfigChannel+0x214>)
 8002810:	e000      	b.n	8002814 <HAL_ADC_ConfigChannel+0x1cc>
 8002812:	4b13      	ldr	r3, [pc, #76]	@ (8002860 <HAL_ADC_ConfigChannel+0x218>)
 8002814:	4a0d      	ldr	r2, [pc, #52]	@ (800284c <HAL_ADC_ConfigChannel+0x204>)
 8002816:	400b      	ands	r3, r1
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e009      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	2220      	movs	r2, #32
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002828:	230f      	movs	r3, #15
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2234      	movs	r2, #52	@ 0x34
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002838:	230f      	movs	r3, #15
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	781b      	ldrb	r3, [r3, #0]
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	00001001 	.word	0x00001001
 800284c:	40012708 	.word	0x40012708
 8002850:	20000010 	.word	0x20000010
 8002854:	000f4240 	.word	0x000f4240
 8002858:	ffbfffff 	.word	0xffbfffff
 800285c:	feffffff 	.word	0xfeffffff
 8002860:	ff7fffff 	.word	0xff7fffff

08002864 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2203      	movs	r2, #3
 800287c:	4013      	ands	r3, r2
 800287e:	2b01      	cmp	r3, #1
 8002880:	d112      	bne.n	80028a8 <ADC_Enable+0x44>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	2b01      	cmp	r3, #1
 800288e:	d009      	beq.n	80028a4 <ADC_Enable+0x40>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	401a      	ands	r2, r3
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d101      	bne.n	80028a8 <ADC_Enable+0x44>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <ADC_Enable+0x46>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d152      	bne.n	8002954 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002960 <ADC_Enable+0xfc>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	d00d      	beq.n	80028d6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028be:	2210      	movs	r2, #16
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ca:	2201      	movs	r2, #1
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e03f      	b.n	8002956 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	430a      	orrs	r2, r1
 80028e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002964 <ADC_Enable+0x100>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	491f      	ldr	r1, [pc, #124]	@ (8002968 <ADC_Enable+0x104>)
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7fd fc0b 	bl	8000108 <__udivsi3>
 80028f2:	0003      	movs	r3, r0
 80028f4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028f6:	e002      	b.n	80028fe <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002904:	f7ff fc98 	bl	8002238 <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800290c:	e01b      	b.n	8002946 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800290e:	f7ff fc93 	bl	8002238 <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d914      	bls.n	8002946 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	4013      	ands	r3, r2
 8002926:	2b01      	cmp	r3, #1
 8002928:	d00d      	beq.n	8002946 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292e:	2210      	movs	r2, #16
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293a:	2201      	movs	r2, #1
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e007      	b.n	8002956 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	2b01      	cmp	r3, #1
 8002952:	d1dc      	bne.n	800290e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	80000017 	.word	0x80000017
 8002964:	20000010 	.word	0x20000010
 8002968:	000f4240 	.word	0x000f4240

0800296c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297e:	2250      	movs	r2, #80	@ 0x50
 8002980:	4013      	ands	r3, r2
 8002982:	d140      	bne.n	8002a06 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002988:	2280      	movs	r2, #128	@ 0x80
 800298a:	0092      	lsls	r2, r2, #2
 800298c:	431a      	orrs	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	23c0      	movs	r3, #192	@ 0xc0
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	4013      	ands	r3, r2
 800299e:	d12d      	bne.n	80029fc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d129      	bne.n	80029fc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2208      	movs	r2, #8
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d122      	bne.n	80029fc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2204      	movs	r2, #4
 80029be:	4013      	ands	r3, r2
 80029c0:	d110      	bne.n	80029e4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	210c      	movs	r1, #12
 80029ce:	438a      	bics	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d6:	4a11      	ldr	r2, [pc, #68]	@ (8002a1c <ADC_DMAConvCplt+0xb0>)
 80029d8:	4013      	ands	r3, r2
 80029da:	2201      	movs	r2, #1
 80029dc:	431a      	orrs	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80029e2:	e00b      	b.n	80029fc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e8:	2220      	movs	r2, #32
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f4:	2201      	movs	r2, #1
 80029f6:	431a      	orrs	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f7ff fe0a 	bl	8002618 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002a04:	e005      	b.n	8002a12 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	0010      	movs	r0, r2
 8002a10:	4798      	blx	r3
}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b004      	add	sp, #16
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	fffffefe 	.word	0xfffffefe

08002a20 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f7ff fdf9 	bl	8002628 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b004      	add	sp, #16
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	2240      	movs	r2, #64	@ 0x40
 8002a52:	431a      	orrs	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7ff fde6 	bl	8002638 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7c:	2317      	movs	r3, #23
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2234      	movs	r2, #52	@ 0x34
 8002a90:	5c9b      	ldrb	r3, [r3, r2]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_ADCEx_Calibration_Start+0x26>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e08d      	b.n	8002bb6 <HAL_ADCEx_Calibration_Start+0x142>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2234      	movs	r2, #52	@ 0x34
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d112      	bne.n	8002ad6 <HAL_ADCEx_Calibration_Start+0x62>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d009      	beq.n	8002ad2 <HAL_ADCEx_Calibration_Start+0x5e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	401a      	ands	r2, r3
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADCEx_Calibration_Start+0x62>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_ADCEx_Calibration_Start+0x64>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d15b      	bne.n	8002b94 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae0:	4a37      	ldr	r2, [pc, #220]	@ (8002bc0 <HAL_ADCEx_Calibration_Start+0x14c>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2203      	movs	r2, #3
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2103      	movs	r1, #3
 8002b04:	438a      	bics	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2180      	movs	r1, #128	@ 0x80
 8002b14:	0609      	lsls	r1, r1, #24
 8002b16:	430a      	orrs	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002b1a:	f7ff fb8d 	bl	8002238 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002b22:	e01d      	b.n	8002b60 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b24:	f7ff fb88 	bl	8002238 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d916      	bls.n	8002b60 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	0fdb      	lsrs	r3, r3, #31
 8002b3a:	07da      	lsls	r2, r3, #31
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d10d      	bne.n	8002b60 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b48:	2212      	movs	r2, #18
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2234      	movs	r2, #52	@ 0x34
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e02a      	b.n	8002bb6 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0fdb      	lsrs	r3, r3, #31
 8002b68:	07da      	lsls	r2, r3, #31
 8002b6a:	2380      	movs	r3, #128	@ 0x80
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d0d8      	beq.n	8002b24 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68d9      	ldr	r1, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b86:	2203      	movs	r2, #3
 8002b88:	4393      	bics	r3, r2
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b92:	e009      	b.n	8002ba8 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	2220      	movs	r2, #32
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002ba0:	2317      	movs	r3, #23
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2234      	movs	r2, #52	@ 0x34
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002bb0:	2317      	movs	r3, #23
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	781b      	ldrb	r3, [r3, #0]
}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b006      	add	sp, #24
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	fffffefd 	.word	0xfffffefd

08002bc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0f0      	b.n	8002db8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	5c9b      	ldrb	r3, [r3, r2]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7ff f9fb 	bl	8001fe0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfa:	f7ff fb1d 	bl	8002238 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c02:	e013      	b.n	8002c2c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c04:	f7ff fb18 	bl	8002238 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b0a      	cmp	r3, #10
 8002c10:	d90c      	bls.n	8002c2c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	2280      	movs	r2, #128	@ 0x80
 8002c18:	0292      	lsls	r2, r2, #10
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	2105      	movs	r1, #5
 8002c26:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0c5      	b.n	8002db8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	4013      	ands	r3, r2
 8002c36:	d0e5      	beq.n	8002c04 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2102      	movs	r1, #2
 8002c44:	438a      	bics	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c48:	f7ff faf6 	bl	8002238 <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c50:	e013      	b.n	8002c7a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c52:	f7ff faf1 	bl	8002238 <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b0a      	cmp	r3, #10
 8002c5e:	d90c      	bls.n	8002c7a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	2280      	movs	r2, #128	@ 0x80
 8002c66:	0292      	lsls	r2, r2, #10
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	2105      	movs	r1, #5
 8002c74:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e09e      	b.n	8002db8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d1e5      	bne.n	8002c52 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7e1b      	ldrb	r3, [r3, #24]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d108      	bne.n	8002ca0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2180      	movs	r1, #128	@ 0x80
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e007      	b.n	8002cb0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2180      	movs	r1, #128	@ 0x80
 8002cac:	438a      	bics	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7e5b      	ldrb	r3, [r3, #25]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d108      	bne.n	8002cca <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2140      	movs	r1, #64	@ 0x40
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e007      	b.n	8002cda <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2140      	movs	r1, #64	@ 0x40
 8002cd6:	438a      	bics	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	7e9b      	ldrb	r3, [r3, #26]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d108      	bne.n	8002cf4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2120      	movs	r1, #32
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e007      	b.n	8002d04 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2120      	movs	r1, #32
 8002d00:	438a      	bics	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7edb      	ldrb	r3, [r3, #27]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d108      	bne.n	8002d1e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2110      	movs	r1, #16
 8002d18:	438a      	bics	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e007      	b.n	8002d2e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2110      	movs	r1, #16
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7f1b      	ldrb	r3, [r3, #28]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d108      	bne.n	8002d48 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2108      	movs	r1, #8
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	e007      	b.n	8002d58 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2108      	movs	r1, #8
 8002d54:	438a      	bics	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7f5b      	ldrb	r3, [r3, #29]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d108      	bne.n	8002d72 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	e007      	b.n	8002d82 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	438a      	bics	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	0011      	movs	r1, r2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	1e5a      	subs	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b004      	add	sp, #16
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dd0:	2013      	movs	r0, #19
 8002dd2:	183b      	adds	r3, r7, r0
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	2120      	movs	r1, #32
 8002dd8:	5c52      	ldrb	r2, [r2, r1]
 8002dda:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ddc:	0002      	movs	r2, r0
 8002dde:	18bb      	adds	r3, r7, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d004      	beq.n	8002df0 <HAL_CAN_ConfigFilter+0x30>
 8002de6:	18bb      	adds	r3, r7, r2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d000      	beq.n	8002df0 <HAL_CAN_ConfigFilter+0x30>
 8002dee:	e0cd      	b.n	8002f8c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	58d3      	ldr	r3, [r2, r3]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	0011      	movs	r1, r2
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	221f      	movs	r2, #31
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2201      	movs	r2, #1
 8002e10:	409a      	lsls	r2, r3
 8002e12:	0013      	movs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	2387      	movs	r3, #135	@ 0x87
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	58d3      	ldr	r3, [r2, r3]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	43d2      	mvns	r2, r2
 8002e22:	401a      	ands	r2, r3
 8002e24:	0011      	movs	r1, r2
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	2387      	movs	r3, #135	@ 0x87
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d129      	bne.n	8002e8a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	2383      	movs	r3, #131	@ 0x83
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	58d3      	ldr	r3, [r2, r3]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	43d2      	mvns	r2, r2
 8002e42:	401a      	ands	r2, r3
 8002e44:	0011      	movs	r1, r2
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	2383      	movs	r3, #131	@ 0x83
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	041b      	lsls	r3, r3, #16
 8002e5a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e60:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3248      	adds	r2, #72	@ 0x48
 8002e66:	00d2      	lsls	r2, r2, #3
 8002e68:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e7e:	6979      	ldr	r1, [r7, #20]
 8002e80:	3348      	adds	r3, #72	@ 0x48
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	18cb      	adds	r3, r1, r3
 8002e86:	3304      	adds	r3, #4
 8002e88:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d128      	bne.n	8002ee4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	2383      	movs	r3, #131	@ 0x83
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	58d2      	ldr	r2, [r2, r3]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	0011      	movs	r1, r2
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	2383      	movs	r3, #131	@ 0x83
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002eba:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3248      	adds	r2, #72	@ 0x48
 8002ec0:	00d2      	lsls	r2, r2, #3
 8002ec2:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	041b      	lsls	r3, r3, #16
 8002ed0:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ed6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ed8:	6979      	ldr	r1, [r7, #20]
 8002eda:	3348      	adds	r3, #72	@ 0x48
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	18cb      	adds	r3, r1, r3
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10c      	bne.n	8002f06 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	2381      	movs	r3, #129	@ 0x81
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	58d3      	ldr	r3, [r2, r3]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	43d2      	mvns	r2, r2
 8002ef8:	401a      	ands	r2, r3
 8002efa:	0011      	movs	r1, r2
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	2381      	movs	r3, #129	@ 0x81
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	50d1      	str	r1, [r2, r3]
 8002f04:	e00a      	b.n	8002f1c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	2381      	movs	r3, #129	@ 0x81
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	58d2      	ldr	r2, [r2, r3]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	0011      	movs	r1, r2
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	2381      	movs	r3, #129	@ 0x81
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10c      	bne.n	8002f3e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	2385      	movs	r3, #133	@ 0x85
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	58d3      	ldr	r3, [r2, r3]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	43d2      	mvns	r2, r2
 8002f30:	401a      	ands	r2, r3
 8002f32:	0011      	movs	r1, r2
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	2385      	movs	r3, #133	@ 0x85
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	50d1      	str	r1, [r2, r3]
 8002f3c:	e00a      	b.n	8002f54 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	2385      	movs	r3, #133	@ 0x85
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	58d2      	ldr	r2, [r2, r3]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	2385      	movs	r3, #133	@ 0x85
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10a      	bne.n	8002f72 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	2387      	movs	r3, #135	@ 0x87
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	58d2      	ldr	r2, [r2, r3]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	0011      	movs	r1, r2
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	2387      	movs	r3, #135	@ 0x87
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	58d3      	ldr	r3, [r2, r3]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	2380      	movs	r3, #128	@ 0x80
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e007      	b.n	8002f9c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	2280      	movs	r2, #128	@ 0x80
 8002f92:	02d2      	lsls	r2, r2, #11
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
  }
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b006      	add	sp, #24
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	5c9b      	ldrb	r3, [r3, r2]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d12f      	bne.n	8003018 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2101      	movs	r1, #1
 8002fcc:	438a      	bics	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7ff f932 	bl	8002238 <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fd8:	e013      	b.n	8003002 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fda:	f7ff f92d 	bl	8002238 <HAL_GetTick>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b0a      	cmp	r3, #10
 8002fe6:	d90c      	bls.n	8003002 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	2280      	movs	r2, #128	@ 0x80
 8002fee:	0292      	lsls	r2, r2, #10
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	2105      	movs	r1, #5
 8002ffc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e012      	b.n	8003028 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	4013      	ands	r3, r2
 800300c:	d1e5      	bne.n	8002fda <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e007      	b.n	8003028 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	2280      	movs	r2, #128	@ 0x80
 800301e:	0312      	lsls	r2, r2, #12
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
  }
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b004      	add	sp, #16
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800303e:	201f      	movs	r0, #31
 8003040:	183b      	adds	r3, r7, r0
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	2120      	movs	r1, #32
 8003046:	5c52      	ldrb	r2, [r2, r1]
 8003048:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003052:	183b      	adds	r3, r7, r0
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d004      	beq.n	8003064 <HAL_CAN_AddTxMessage+0x34>
 800305a:	183b      	adds	r3, r7, r0
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d000      	beq.n	8003064 <HAL_CAN_AddTxMessage+0x34>
 8003062:	e0ab      	b.n	80031bc <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	2380      	movs	r3, #128	@ 0x80
 8003068:	04db      	lsls	r3, r3, #19
 800306a:	4013      	ands	r3, r2
 800306c:	d10a      	bne.n	8003084 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	051b      	lsls	r3, r3, #20
 8003074:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003076:	d105      	bne.n	8003084 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	2380      	movs	r3, #128	@ 0x80
 800307c:	055b      	lsls	r3, r3, #21
 800307e:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003080:	d100      	bne.n	8003084 <HAL_CAN_AddTxMessage+0x54>
 8003082:	e092      	b.n	80031aa <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	0e1b      	lsrs	r3, r3, #24
 8003088:	2203      	movs	r2, #3
 800308a:	4013      	ands	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800308e:	2201      	movs	r2, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	409a      	lsls	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10c      	bne.n	80030ba <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4311      	orrs	r1, r2
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	3218      	adds	r2, #24
 80030b4:	0112      	lsls	r2, r2, #4
 80030b6:	50d1      	str	r1, [r2, r3]
 80030b8:	e00f      	b.n	80030da <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030c4:	431a      	orrs	r2, r3
 80030c6:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80030d0:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	3218      	adds	r2, #24
 80030d6:	0112      	lsls	r2, r2, #4
 80030d8:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6819      	ldr	r1, [r3, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3318      	adds	r3, #24
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	18cb      	adds	r3, r1, r3
 80030ea:	3304      	adds	r3, #4
 80030ec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	7d1b      	ldrb	r3, [r3, #20]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d112      	bne.n	800311c <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3318      	adds	r3, #24
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	18d3      	adds	r3, r2, r3
 8003102:	3304      	adds	r3, #4
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	431a      	orrs	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	3318      	adds	r3, #24
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	18cb      	adds	r3, r1, r3
 8003118:	3304      	adds	r3, #4
 800311a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3307      	adds	r3, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	061a      	lsls	r2, r3, #24
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3306      	adds	r3, #6
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3305      	adds	r3, #5
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	0019      	movs	r1, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	6979      	ldr	r1, [r7, #20]
 8003148:	23c6      	movs	r3, #198	@ 0xc6
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	0109      	lsls	r1, r1, #4
 800314e:	1841      	adds	r1, r0, r1
 8003150:	18cb      	adds	r3, r1, r3
 8003152:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3303      	adds	r3, #3
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	061a      	lsls	r2, r3, #24
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3302      	adds	r3, #2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3301      	adds	r3, #1
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	0019      	movs	r1, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	6979      	ldr	r1, [r7, #20]
 800317e:	23c4      	movs	r3, #196	@ 0xc4
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	0109      	lsls	r1, r1, #4
 8003184:	1841      	adds	r1, r0, r1
 8003186:	18cb      	adds	r3, r1, r3
 8003188:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	3218      	adds	r2, #24
 8003192:	0112      	lsls	r2, r2, #4
 8003194:	58d2      	ldr	r2, [r2, r3]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2101      	movs	r1, #1
 800319c:	4311      	orrs	r1, r2
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	3218      	adds	r2, #24
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e010      	b.n	80031cc <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	2280      	movs	r2, #128	@ 0x80
 80031b0:	0392      	lsls	r2, r2, #14
 80031b2:	431a      	orrs	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e007      	b.n	80031cc <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	02d2      	lsls	r2, r2, #11
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
  }
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b008      	add	sp, #32
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031e0:	200b      	movs	r0, #11
 80031e2:	183b      	adds	r3, r7, r0
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	2120      	movs	r1, #32
 80031e8:	5c52      	ldrb	r2, [r2, r1]
 80031ea:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80031ec:	0002      	movs	r2, r0
 80031ee:	18bb      	adds	r3, r7, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d003      	beq.n	80031fe <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 80031f6:	18bb      	adds	r3, r7, r2
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d11d      	bne.n	800323a <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	2380      	movs	r3, #128	@ 0x80
 8003206:	04db      	lsls	r3, r3, #19
 8003208:	4013      	ands	r3, r2
 800320a:	d002      	beq.n	8003212 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	051b      	lsls	r3, r3, #20
 800321c:	4013      	ands	r3, r2
 800321e:	d002      	beq.n	8003226 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	055b      	lsls	r3, r3, #21
 8003230:	4013      	ands	r3, r2
 8003232:	d002      	beq.n	800323a <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3301      	adds	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800323a:	68fb      	ldr	r3, [r7, #12]
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b004      	add	sp, #16
 8003242:	bd80      	pop	{r7, pc}

08003244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	0002      	movs	r2, r0
 800324c:	1dfb      	adds	r3, r7, #7
 800324e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003250:	1dfb      	adds	r3, r7, #7
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b7f      	cmp	r3, #127	@ 0x7f
 8003256:	d809      	bhi.n	800326c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	001a      	movs	r2, r3
 800325e:	231f      	movs	r3, #31
 8003260:	401a      	ands	r2, r3
 8003262:	4b04      	ldr	r3, [pc, #16]	@ (8003274 <__NVIC_EnableIRQ+0x30>)
 8003264:	2101      	movs	r1, #1
 8003266:	4091      	lsls	r1, r2
 8003268:	000a      	movs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
  }
}
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}
 8003274:	e000e100 	.word	0xe000e100

08003278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	0002      	movs	r2, r0
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	1dfb      	adds	r3, r7, #7
 8003284:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b7f      	cmp	r3, #127	@ 0x7f
 800328c:	d828      	bhi.n	80032e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800328e:	4a2f      	ldr	r2, [pc, #188]	@ (800334c <__NVIC_SetPriority+0xd4>)
 8003290:	1dfb      	adds	r3, r7, #7
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	b25b      	sxtb	r3, r3
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	33c0      	adds	r3, #192	@ 0xc0
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	589b      	ldr	r3, [r3, r2]
 800329e:	1dfa      	adds	r2, r7, #7
 80032a0:	7812      	ldrb	r2, [r2, #0]
 80032a2:	0011      	movs	r1, r2
 80032a4:	2203      	movs	r2, #3
 80032a6:	400a      	ands	r2, r1
 80032a8:	00d2      	lsls	r2, r2, #3
 80032aa:	21ff      	movs	r1, #255	@ 0xff
 80032ac:	4091      	lsls	r1, r2
 80032ae:	000a      	movs	r2, r1
 80032b0:	43d2      	mvns	r2, r2
 80032b2:	401a      	ands	r2, r3
 80032b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	019b      	lsls	r3, r3, #6
 80032ba:	22ff      	movs	r2, #255	@ 0xff
 80032bc:	401a      	ands	r2, r3
 80032be:	1dfb      	adds	r3, r7, #7
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	0018      	movs	r0, r3
 80032c4:	2303      	movs	r3, #3
 80032c6:	4003      	ands	r3, r0
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032cc:	481f      	ldr	r0, [pc, #124]	@ (800334c <__NVIC_SetPriority+0xd4>)
 80032ce:	1dfb      	adds	r3, r7, #7
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b25b      	sxtb	r3, r3
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	430a      	orrs	r2, r1
 80032d8:	33c0      	adds	r3, #192	@ 0xc0
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032de:	e031      	b.n	8003344 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003350 <__NVIC_SetPriority+0xd8>)
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	0019      	movs	r1, r3
 80032e8:	230f      	movs	r3, #15
 80032ea:	400b      	ands	r3, r1
 80032ec:	3b08      	subs	r3, #8
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3306      	adds	r3, #6
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	18d3      	adds	r3, r2, r3
 80032f6:	3304      	adds	r3, #4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	1dfa      	adds	r2, r7, #7
 80032fc:	7812      	ldrb	r2, [r2, #0]
 80032fe:	0011      	movs	r1, r2
 8003300:	2203      	movs	r2, #3
 8003302:	400a      	ands	r2, r1
 8003304:	00d2      	lsls	r2, r2, #3
 8003306:	21ff      	movs	r1, #255	@ 0xff
 8003308:	4091      	lsls	r1, r2
 800330a:	000a      	movs	r2, r1
 800330c:	43d2      	mvns	r2, r2
 800330e:	401a      	ands	r2, r3
 8003310:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	019b      	lsls	r3, r3, #6
 8003316:	22ff      	movs	r2, #255	@ 0xff
 8003318:	401a      	ands	r2, r3
 800331a:	1dfb      	adds	r3, r7, #7
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	0018      	movs	r0, r3
 8003320:	2303      	movs	r3, #3
 8003322:	4003      	ands	r3, r0
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003328:	4809      	ldr	r0, [pc, #36]	@ (8003350 <__NVIC_SetPriority+0xd8>)
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	001c      	movs	r4, r3
 8003330:	230f      	movs	r3, #15
 8003332:	4023      	ands	r3, r4
 8003334:	3b08      	subs	r3, #8
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	430a      	orrs	r2, r1
 800333a:	3306      	adds	r3, #6
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	18c3      	adds	r3, r0, r3
 8003340:	3304      	adds	r3, #4
 8003342:	601a      	str	r2, [r3, #0]
}
 8003344:	46c0      	nop			@ (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b003      	add	sp, #12
 800334a:	bd90      	pop	{r4, r7, pc}
 800334c:	e000e100 	.word	0xe000e100
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	1e5a      	subs	r2, r3, #1
 8003360:	2380      	movs	r3, #128	@ 0x80
 8003362:	045b      	lsls	r3, r3, #17
 8003364:	429a      	cmp	r2, r3
 8003366:	d301      	bcc.n	800336c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003368:	2301      	movs	r3, #1
 800336a:	e010      	b.n	800338e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800336c:	4b0a      	ldr	r3, [pc, #40]	@ (8003398 <SysTick_Config+0x44>)
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	3a01      	subs	r2, #1
 8003372:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003374:	2301      	movs	r3, #1
 8003376:	425b      	negs	r3, r3
 8003378:	2103      	movs	r1, #3
 800337a:	0018      	movs	r0, r3
 800337c:	f7ff ff7c 	bl	8003278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <SysTick_Config+0x44>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003386:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <SysTick_Config+0x44>)
 8003388:	2207      	movs	r2, #7
 800338a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800338c:	2300      	movs	r3, #0
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b002      	add	sp, #8
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	e000e010 	.word	0xe000e010

0800339c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	210f      	movs	r1, #15
 80033a8:	187b      	adds	r3, r7, r1
 80033aa:	1c02      	adds	r2, r0, #0
 80033ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	0011      	movs	r1, r2
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7ff ff5d 	bl	8003278 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b004      	add	sp, #16
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	0002      	movs	r2, r0
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d2:	1dfb      	adds	r3, r7, #7
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b25b      	sxtb	r3, r3
 80033d8:	0018      	movs	r0, r3
 80033da:	f7ff ff33 	bl	8003244 <__NVIC_EnableIRQ>
}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff ffaf 	bl	8003354 <SysTick_Config>
 80033f6:	0003      	movs	r3, r0
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e036      	b.n	8003484 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2221      	movs	r2, #33	@ 0x21
 800341a:	2102      	movs	r1, #2
 800341c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a18      	ldr	r2, [pc, #96]	@ (800348c <HAL_DMA_Init+0x8c>)
 800342a:	4013      	ands	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003436:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 f946 	bl	80036f8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2221      	movs	r2, #33	@ 0x21
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	2100      	movs	r1, #0
 8003480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b004      	add	sp, #16
 800348a:	bd80      	pop	{r7, pc}
 800348c:	ffffc00f 	.word	0xffffc00f

08003490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2317      	movs	r3, #23
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	5c9b      	ldrb	r3, [r3, r2]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_DMA_Start_IT+0x24>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e04f      	b.n	8003554 <HAL_DMA_Start_IT+0xc4>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	2101      	movs	r1, #1
 80034ba:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2221      	movs	r2, #33	@ 0x21
 80034c0:	5c9b      	ldrb	r3, [r3, r2]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d13a      	bne.n	800353e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2221      	movs	r2, #33	@ 0x21
 80034cc:	2102      	movs	r1, #2
 80034ce:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2101      	movs	r1, #1
 80034e2:	438a      	bics	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f8d7 	bl	80036a0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	210e      	movs	r1, #14
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e00f      	b.n	800352c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	210a      	movs	r1, #10
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2104      	movs	r1, #4
 8003528:	438a      	bics	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2101      	movs	r1, #1
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e007      	b.n	800354e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	2100      	movs	r1, #0
 8003544:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003546:	2317      	movs	r3, #23
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	2202      	movs	r2, #2
 800354c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800354e:	2317      	movs	r3, #23
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	781b      	ldrb	r3, [r3, #0]
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	b006      	add	sp, #24
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	2204      	movs	r2, #4
 800357a:	409a      	lsls	r2, r3
 800357c:	0013      	movs	r3, r2
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4013      	ands	r3, r2
 8003582:	d024      	beq.n	80035ce <HAL_DMA_IRQHandler+0x72>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2204      	movs	r2, #4
 8003588:	4013      	ands	r3, r2
 800358a:	d020      	beq.n	80035ce <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2220      	movs	r2, #32
 8003594:	4013      	ands	r3, r2
 8003596:	d107      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2104      	movs	r1, #4
 80035a4:	438a      	bics	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	2104      	movs	r1, #4
 80035b2:	4091      	lsls	r1, r2
 80035b4:	000a      	movs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d100      	bne.n	80035c2 <HAL_DMA_IRQHandler+0x66>
 80035c0:	e06a      	b.n	8003698 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	0010      	movs	r0, r2
 80035ca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035cc:	e064      	b.n	8003698 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2202      	movs	r2, #2
 80035d4:	409a      	lsls	r2, r3
 80035d6:	0013      	movs	r3, r2
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4013      	ands	r3, r2
 80035dc:	d02b      	beq.n	8003636 <HAL_DMA_IRQHandler+0xda>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2202      	movs	r2, #2
 80035e2:	4013      	ands	r3, r2
 80035e4:	d027      	beq.n	8003636 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2220      	movs	r2, #32
 80035ee:	4013      	ands	r3, r2
 80035f0:	d10b      	bne.n	800360a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	210a      	movs	r1, #10
 80035fe:	438a      	bics	r2, r1
 8003600:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2221      	movs	r2, #33	@ 0x21
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003612:	2102      	movs	r1, #2
 8003614:	4091      	lsls	r1, r2
 8003616:	000a      	movs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	2100      	movs	r1, #0
 8003620:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d036      	beq.n	8003698 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	0010      	movs	r0, r2
 8003632:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003634:	e030      	b.n	8003698 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	2208      	movs	r2, #8
 800363c:	409a      	lsls	r2, r3
 800363e:	0013      	movs	r3, r2
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4013      	ands	r3, r2
 8003644:	d028      	beq.n	8003698 <HAL_DMA_IRQHandler+0x13c>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2208      	movs	r2, #8
 800364a:	4013      	ands	r3, r2
 800364c:	d024      	beq.n	8003698 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	210e      	movs	r1, #14
 800365a:	438a      	bics	r2, r1
 800365c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003666:	2101      	movs	r1, #1
 8003668:	4091      	lsls	r1, r2
 800366a:	000a      	movs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2221      	movs	r2, #33	@ 0x21
 8003678:	2101      	movs	r1, #1
 800367a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	0010      	movs	r0, r2
 8003694:	4798      	blx	r3
    }
  }
}
 8003696:	e7ff      	b.n	8003698 <HAL_DMA_IRQHandler+0x13c>
 8003698:	46c0      	nop			@ (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b004      	add	sp, #16
 800369e:	bd80      	pop	{r7, pc}

080036a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	2101      	movs	r1, #1
 80036b8:	4091      	lsls	r1, r2
 80036ba:	000a      	movs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d108      	bne.n	80036e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036de:	e007      	b.n	80036f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a08      	ldr	r2, [pc, #32]	@ (8003728 <DMA_CalcBaseAndBitshift+0x30>)
 8003706:	4694      	mov	ip, r2
 8003708:	4463      	add	r3, ip
 800370a:	2114      	movs	r1, #20
 800370c:	0018      	movs	r0, r3
 800370e:	f7fc fcfb 	bl	8000108 <__udivsi3>
 8003712:	0003      	movs	r3, r0
 8003714:	009a      	lsls	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a03      	ldr	r2, [pc, #12]	@ (800372c <DMA_CalcBaseAndBitshift+0x34>)
 800371e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003720:	46c0      	nop			@ (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	b002      	add	sp, #8
 8003726:	bd80      	pop	{r7, pc}
 8003728:	bffdfff8 	.word	0xbffdfff8
 800372c:	40020000 	.word	0x40020000

08003730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800373e:	e149      	b.n	80039d4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2101      	movs	r1, #1
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4091      	lsls	r1, r2
 800374a:	000a      	movs	r2, r1
 800374c:	4013      	ands	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d100      	bne.n	8003758 <HAL_GPIO_Init+0x28>
 8003756:	e13a      	b.n	80039ce <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2203      	movs	r2, #3
 800375e:	4013      	ands	r3, r2
 8003760:	2b01      	cmp	r3, #1
 8003762:	d005      	beq.n	8003770 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2203      	movs	r2, #3
 800376a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800376c:	2b02      	cmp	r3, #2
 800376e:	d130      	bne.n	80037d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	409a      	lsls	r2, r3
 800377e:	0013      	movs	r3, r2
 8003780:	43da      	mvns	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	0013      	movs	r3, r2
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037a6:	2201      	movs	r2, #1
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	409a      	lsls	r2, r3
 80037ac:	0013      	movs	r3, r2
 80037ae:	43da      	mvns	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	2201      	movs	r2, #1
 80037be:	401a      	ands	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	409a      	lsls	r2, r3
 80037c4:	0013      	movs	r3, r2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2203      	movs	r2, #3
 80037d8:	4013      	ands	r3, r2
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d017      	beq.n	800380e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	2203      	movs	r2, #3
 80037ea:	409a      	lsls	r2, r3
 80037ec:	0013      	movs	r3, r2
 80037ee:	43da      	mvns	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	409a      	lsls	r2, r3
 8003800:	0013      	movs	r3, r2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2203      	movs	r2, #3
 8003814:	4013      	ands	r3, r2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d123      	bne.n	8003862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	58d3      	ldr	r3, [r2, r3]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2207      	movs	r2, #7
 800382c:	4013      	ands	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	220f      	movs	r2, #15
 8003832:	409a      	lsls	r2, r3
 8003834:	0013      	movs	r3, r2
 8003836:	43da      	mvns	r2, r3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2107      	movs	r1, #7
 8003846:	400b      	ands	r3, r1
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	409a      	lsls	r2, r3
 800384c:	0013      	movs	r3, r2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	08da      	lsrs	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3208      	adds	r2, #8
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	6939      	ldr	r1, [r7, #16]
 8003860:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	2203      	movs	r2, #3
 800386e:	409a      	lsls	r2, r3
 8003870:	0013      	movs	r3, r2
 8003872:	43da      	mvns	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2203      	movs	r2, #3
 8003880:	401a      	ands	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	409a      	lsls	r2, r3
 8003888:	0013      	movs	r3, r2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	23c0      	movs	r3, #192	@ 0xc0
 800389c:	029b      	lsls	r3, r3, #10
 800389e:	4013      	ands	r3, r2
 80038a0:	d100      	bne.n	80038a4 <HAL_GPIO_Init+0x174>
 80038a2:	e094      	b.n	80039ce <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a4:	4b51      	ldr	r3, [pc, #324]	@ (80039ec <HAL_GPIO_Init+0x2bc>)
 80038a6:	699a      	ldr	r2, [r3, #24]
 80038a8:	4b50      	ldr	r3, [pc, #320]	@ (80039ec <HAL_GPIO_Init+0x2bc>)
 80038aa:	2101      	movs	r1, #1
 80038ac:	430a      	orrs	r2, r1
 80038ae:	619a      	str	r2, [r3, #24]
 80038b0:	4b4e      	ldr	r3, [pc, #312]	@ (80039ec <HAL_GPIO_Init+0x2bc>)
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2201      	movs	r2, #1
 80038b6:	4013      	ands	r3, r2
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038bc:	4a4c      	ldr	r2, [pc, #304]	@ (80039f0 <HAL_GPIO_Init+0x2c0>)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	3302      	adds	r3, #2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	589b      	ldr	r3, [r3, r2]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2203      	movs	r2, #3
 80038ce:	4013      	ands	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	220f      	movs	r2, #15
 80038d4:	409a      	lsls	r2, r3
 80038d6:	0013      	movs	r3, r2
 80038d8:	43da      	mvns	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	2390      	movs	r3, #144	@ 0x90
 80038e4:	05db      	lsls	r3, r3, #23
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d00d      	beq.n	8003906 <HAL_GPIO_Init+0x1d6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a41      	ldr	r2, [pc, #260]	@ (80039f4 <HAL_GPIO_Init+0x2c4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <HAL_GPIO_Init+0x1d2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a40      	ldr	r2, [pc, #256]	@ (80039f8 <HAL_GPIO_Init+0x2c8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_GPIO_Init+0x1ce>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e004      	b.n	8003908 <HAL_GPIO_Init+0x1d8>
 80038fe:	2305      	movs	r3, #5
 8003900:	e002      	b.n	8003908 <HAL_GPIO_Init+0x1d8>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_GPIO_Init+0x1d8>
 8003906:	2300      	movs	r3, #0
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	2103      	movs	r1, #3
 800390c:	400a      	ands	r2, r1
 800390e:	0092      	lsls	r2, r2, #2
 8003910:	4093      	lsls	r3, r2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003918:	4935      	ldr	r1, [pc, #212]	@ (80039f0 <HAL_GPIO_Init+0x2c0>)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	3302      	adds	r3, #2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003926:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <HAL_GPIO_Init+0x2cc>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	43da      	mvns	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	035b      	lsls	r3, r3, #13
 800393e:	4013      	ands	r3, r2
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800394a:	4b2c      	ldr	r3, [pc, #176]	@ (80039fc <HAL_GPIO_Init+0x2cc>)
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003950:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <HAL_GPIO_Init+0x2cc>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	43da      	mvns	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	2380      	movs	r3, #128	@ 0x80
 8003966:	039b      	lsls	r3, r3, #14
 8003968:	4013      	ands	r3, r2
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003974:	4b21      	ldr	r3, [pc, #132]	@ (80039fc <HAL_GPIO_Init+0x2cc>)
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <HAL_GPIO_Init+0x2cc>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	43da      	mvns	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	2380      	movs	r3, #128	@ 0x80
 8003990:	029b      	lsls	r3, r3, #10
 8003992:	4013      	ands	r3, r2
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800399e:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <HAL_GPIO_Init+0x2cc>)
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80039a4:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <HAL_GPIO_Init+0x2cc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	43da      	mvns	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	2380      	movs	r3, #128	@ 0x80
 80039ba:	025b      	lsls	r3, r3, #9
 80039bc:	4013      	ands	r3, r2
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039c8:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <HAL_GPIO_Init+0x2cc>)
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	3301      	adds	r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	40da      	lsrs	r2, r3
 80039dc:	1e13      	subs	r3, r2, #0
 80039de:	d000      	beq.n	80039e2 <HAL_GPIO_Init+0x2b2>
 80039e0:	e6ae      	b.n	8003740 <HAL_GPIO_Init+0x10>
  } 
}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b006      	add	sp, #24
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40010000 	.word	0x40010000
 80039f4:	48000400 	.word	0x48000400
 80039f8:	48000800 	.word	0x48000800
 80039fc:	40010400 	.word	0x40010400

08003a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	0008      	movs	r0, r1
 8003a0a:	0011      	movs	r1, r2
 8003a0c:	1cbb      	adds	r3, r7, #2
 8003a0e:	1c02      	adds	r2, r0, #0
 8003a10:	801a      	strh	r2, [r3, #0]
 8003a12:	1c7b      	adds	r3, r7, #1
 8003a14:	1c0a      	adds	r2, r1, #0
 8003a16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a18:	1c7b      	adds	r3, r7, #1
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a20:	1cbb      	adds	r3, r7, #2
 8003a22:	881a      	ldrh	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a28:	e003      	b.n	8003a32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a2a:	1cbb      	adds	r3, r7, #2
 8003a2c:	881a      	ldrh	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b002      	add	sp, #8
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	000a      	movs	r2, r1
 8003a44:	1cbb      	adds	r3, r7, #2
 8003a46:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a4e:	1cbb      	adds	r3, r7, #2
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4013      	ands	r3, r2
 8003a56:	041a      	lsls	r2, r3, #16
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	1cb9      	adds	r1, r7, #2
 8003a5e:	8809      	ldrh	r1, [r1, #0]
 8003a60:	400b      	ands	r3, r1
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	619a      	str	r2, [r3, #24]
}
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b004      	add	sp, #16
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f000 fb76 	bl	8004170 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d100      	bne.n	8003a90 <HAL_RCC_OscConfig+0x20>
 8003a8e:	e08e      	b.n	8003bae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a90:	4bc5      	ldr	r3, [pc, #788]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	220c      	movs	r2, #12
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d00e      	beq.n	8003aba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a9c:	4bc2      	ldr	r3, [pc, #776]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	220c      	movs	r2, #12
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d117      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x68>
 8003aa8:	4bbf      	ldr	r3, [pc, #764]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	23c0      	movs	r3, #192	@ 0xc0
 8003aae:	025b      	lsls	r3, r3, #9
 8003ab0:	401a      	ands	r2, r3
 8003ab2:	2380      	movs	r3, #128	@ 0x80
 8003ab4:	025b      	lsls	r3, r3, #9
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aba:	4bbb      	ldr	r3, [pc, #748]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	2380      	movs	r3, #128	@ 0x80
 8003ac0:	029b      	lsls	r3, r3, #10
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d100      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x58>
 8003ac6:	e071      	b.n	8003bac <HAL_RCC_OscConfig+0x13c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d000      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x62>
 8003ad0:	e06c      	b.n	8003bac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f000 fb4c 	bl	8004170 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_OscConfig+0x80>
 8003ae0:	4bb1      	ldr	r3, [pc, #708]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4bb0      	ldr	r3, [pc, #704]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003ae6:	2180      	movs	r1, #128	@ 0x80
 8003ae8:	0249      	lsls	r1, r1, #9
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e02f      	b.n	8003b50 <HAL_RCC_OscConfig+0xe0>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCC_OscConfig+0xa2>
 8003af8:	4bab      	ldr	r3, [pc, #684]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4baa      	ldr	r3, [pc, #680]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003afe:	49ab      	ldr	r1, [pc, #684]	@ (8003dac <HAL_RCC_OscConfig+0x33c>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	4ba8      	ldr	r3, [pc, #672]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4ba7      	ldr	r3, [pc, #668]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b0a:	49a9      	ldr	r1, [pc, #676]	@ (8003db0 <HAL_RCC_OscConfig+0x340>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e01e      	b.n	8003b50 <HAL_RCC_OscConfig+0xe0>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d10e      	bne.n	8003b38 <HAL_RCC_OscConfig+0xc8>
 8003b1a:	4ba3      	ldr	r3, [pc, #652]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4ba2      	ldr	r3, [pc, #648]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b20:	2180      	movs	r1, #128	@ 0x80
 8003b22:	02c9      	lsls	r1, r1, #11
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	4b9f      	ldr	r3, [pc, #636]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b9e      	ldr	r3, [pc, #632]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b2e:	2180      	movs	r1, #128	@ 0x80
 8003b30:	0249      	lsls	r1, r1, #9
 8003b32:	430a      	orrs	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e00b      	b.n	8003b50 <HAL_RCC_OscConfig+0xe0>
 8003b38:	4b9b      	ldr	r3, [pc, #620]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b9a      	ldr	r3, [pc, #616]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b3e:	499b      	ldr	r1, [pc, #620]	@ (8003dac <HAL_RCC_OscConfig+0x33c>)
 8003b40:	400a      	ands	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	4b98      	ldr	r3, [pc, #608]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b97      	ldr	r3, [pc, #604]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b4a:	4999      	ldr	r1, [pc, #612]	@ (8003db0 <HAL_RCC_OscConfig+0x340>)
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d014      	beq.n	8003b82 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fe fb6e 	bl	8002238 <HAL_GetTick>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b62:	f7fe fb69 	bl	8002238 <HAL_GetTick>
 8003b66:	0002      	movs	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	@ 0x64
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e2fd      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b74:	4b8c      	ldr	r3, [pc, #560]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	029b      	lsls	r3, r3, #10
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0xf2>
 8003b80:	e015      	b.n	8003bae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fe fb59 	bl	8002238 <HAL_GetTick>
 8003b86:	0003      	movs	r3, r0
 8003b88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe fb54 	bl	8002238 <HAL_GetTick>
 8003b90:	0002      	movs	r2, r0
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e2e8      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	4b82      	ldr	r3, [pc, #520]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	2380      	movs	r3, #128	@ 0x80
 8003ba4:	029b      	lsls	r3, r3, #10
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x11c>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d100      	bne.n	8003bba <HAL_RCC_OscConfig+0x14a>
 8003bb8:	e06c      	b.n	8003c94 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bba:	4b7b      	ldr	r3, [pc, #492]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bc4:	4b78      	ldr	r3, [pc, #480]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	220c      	movs	r2, #12
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d11f      	bne.n	8003c10 <HAL_RCC_OscConfig+0x1a0>
 8003bd0:	4b75      	ldr	r3, [pc, #468]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	23c0      	movs	r3, #192	@ 0xc0
 8003bd6:	025b      	lsls	r3, r3, #9
 8003bd8:	401a      	ands	r2, r3
 8003bda:	2380      	movs	r3, #128	@ 0x80
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d116      	bne.n	8003c10 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be2:	4b71      	ldr	r3, [pc, #452]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2202      	movs	r2, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x188>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e2bb      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	22f8      	movs	r2, #248	@ 0xf8
 8003bfe:	4393      	bics	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	00da      	lsls	r2, r3, #3
 8003c08:	4b67      	ldr	r3, [pc, #412]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0e:	e041      	b.n	8003c94 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d024      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c18:	4b63      	ldr	r3, [pc, #396]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b62      	ldr	r3, [pc, #392]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003c1e:	2101      	movs	r1, #1
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fe fb08 	bl	8002238 <HAL_GetTick>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fe fb03 	bl	8002238 <HAL_GetTick>
 8003c32:	0002      	movs	r2, r0
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e297      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	4b59      	ldr	r3, [pc, #356]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2202      	movs	r2, #2
 8003c46:	4013      	ands	r3, r2
 8003c48:	d0f1      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4a:	4b57      	ldr	r3, [pc, #348]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	22f8      	movs	r2, #248	@ 0xf8
 8003c50:	4393      	bics	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	00da      	lsls	r2, r3, #3
 8003c5a:	4b53      	ldr	r3, [pc, #332]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e018      	b.n	8003c94 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c62:	4b51      	ldr	r3, [pc, #324]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b50      	ldr	r3, [pc, #320]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003c68:	2101      	movs	r1, #1
 8003c6a:	438a      	bics	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6e:	f7fe fae3 	bl	8002238 <HAL_GetTick>
 8003c72:	0003      	movs	r3, r0
 8003c74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c78:	f7fe fade 	bl	8002238 <HAL_GetTick>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e272      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	4b47      	ldr	r3, [pc, #284]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	4013      	ands	r3, r2
 8003c92:	d1f1      	bne.n	8003c78 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d036      	beq.n	8003d0c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d019      	beq.n	8003cda <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca6:	4b40      	ldr	r3, [pc, #256]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003ca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003caa:	4b3f      	ldr	r3, [pc, #252]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003cac:	2101      	movs	r1, #1
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fe fac1 	bl	8002238 <HAL_GetTick>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7fe fabc 	bl	8002238 <HAL_GetTick>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e250      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d0f1      	beq.n	8003cbc <HAL_RCC_OscConfig+0x24c>
 8003cd8:	e018      	b.n	8003d0c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cda:	4b33      	ldr	r3, [pc, #204]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cde:	4b32      	ldr	r3, [pc, #200]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	438a      	bics	r2, r1
 8003ce4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce6:	f7fe faa7 	bl	8002238 <HAL_GetTick>
 8003cea:	0003      	movs	r3, r0
 8003cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf0:	f7fe faa2 	bl	8002238 <HAL_GetTick>
 8003cf4:	0002      	movs	r2, r0
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e236      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d02:	4b29      	ldr	r3, [pc, #164]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	2202      	movs	r2, #2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d1f1      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2204      	movs	r2, #4
 8003d12:	4013      	ands	r3, r2
 8003d14:	d100      	bne.n	8003d18 <HAL_RCC_OscConfig+0x2a8>
 8003d16:	e0b5      	b.n	8003e84 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d18:	201f      	movs	r0, #31
 8003d1a:	183b      	adds	r3, r7, r0
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d20:	4b21      	ldr	r3, [pc, #132]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	2380      	movs	r3, #128	@ 0x80
 8003d26:	055b      	lsls	r3, r3, #21
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d110      	bne.n	8003d4e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003d32:	2180      	movs	r1, #128	@ 0x80
 8003d34:	0549      	lsls	r1, r1, #21
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	2380      	movs	r3, #128	@ 0x80
 8003d40:	055b      	lsls	r3, r3, #21
 8003d42:	4013      	ands	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d48:	183b      	adds	r3, r7, r0
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4e:	4b19      	ldr	r3, [pc, #100]	@ (8003db4 <HAL_RCC_OscConfig+0x344>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	2380      	movs	r3, #128	@ 0x80
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4013      	ands	r3, r2
 8003d58:	d11a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5a:	4b16      	ldr	r3, [pc, #88]	@ (8003db4 <HAL_RCC_OscConfig+0x344>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b15      	ldr	r3, [pc, #84]	@ (8003db4 <HAL_RCC_OscConfig+0x344>)
 8003d60:	2180      	movs	r1, #128	@ 0x80
 8003d62:	0049      	lsls	r1, r1, #1
 8003d64:	430a      	orrs	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d68:	f7fe fa66 	bl	8002238 <HAL_GetTick>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7fe fa61 	bl	8002238 <HAL_GetTick>
 8003d76:	0002      	movs	r2, r0
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b64      	cmp	r3, #100	@ 0x64
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1f5      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <HAL_RCC_OscConfig+0x344>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	2380      	movs	r3, #128	@ 0x80
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d10f      	bne.n	8003db8 <HAL_RCC_OscConfig+0x348>
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	4b02      	ldr	r3, [pc, #8]	@ (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003d9e:	2101      	movs	r1, #1
 8003da0:	430a      	orrs	r2, r1
 8003da2:	621a      	str	r2, [r3, #32]
 8003da4:	e036      	b.n	8003e14 <HAL_RCC_OscConfig+0x3a4>
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	40021000 	.word	0x40021000
 8003dac:	fffeffff 	.word	0xfffeffff
 8003db0:	fffbffff 	.word	0xfffbffff
 8003db4:	40007000 	.word	0x40007000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10c      	bne.n	8003dda <HAL_RCC_OscConfig+0x36a>
 8003dc0:	4bca      	ldr	r3, [pc, #808]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003dc2:	6a1a      	ldr	r2, [r3, #32]
 8003dc4:	4bc9      	ldr	r3, [pc, #804]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	438a      	bics	r2, r1
 8003dca:	621a      	str	r2, [r3, #32]
 8003dcc:	4bc7      	ldr	r3, [pc, #796]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003dce:	6a1a      	ldr	r2, [r3, #32]
 8003dd0:	4bc6      	ldr	r3, [pc, #792]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003dd2:	2104      	movs	r1, #4
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	621a      	str	r2, [r3, #32]
 8003dd8:	e01c      	b.n	8003e14 <HAL_RCC_OscConfig+0x3a4>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b05      	cmp	r3, #5
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x38c>
 8003de2:	4bc2      	ldr	r3, [pc, #776]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003de4:	6a1a      	ldr	r2, [r3, #32]
 8003de6:	4bc1      	ldr	r3, [pc, #772]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003de8:	2104      	movs	r1, #4
 8003dea:	430a      	orrs	r2, r1
 8003dec:	621a      	str	r2, [r3, #32]
 8003dee:	4bbf      	ldr	r3, [pc, #764]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003df0:	6a1a      	ldr	r2, [r3, #32]
 8003df2:	4bbe      	ldr	r3, [pc, #760]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003df4:	2101      	movs	r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	621a      	str	r2, [r3, #32]
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCC_OscConfig+0x3a4>
 8003dfc:	4bbb      	ldr	r3, [pc, #748]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	4bba      	ldr	r3, [pc, #744]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003e02:	2101      	movs	r1, #1
 8003e04:	438a      	bics	r2, r1
 8003e06:	621a      	str	r2, [r3, #32]
 8003e08:	4bb8      	ldr	r3, [pc, #736]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	4bb7      	ldr	r3, [pc, #732]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003e0e:	2104      	movs	r1, #4
 8003e10:	438a      	bics	r2, r1
 8003e12:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d014      	beq.n	8003e46 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1c:	f7fe fa0c 	bl	8002238 <HAL_GetTick>
 8003e20:	0003      	movs	r3, r0
 8003e22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e24:	e009      	b.n	8003e3a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fe fa07 	bl	8002238 <HAL_GetTick>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	4aaf      	ldr	r2, [pc, #700]	@ (80040f0 <HAL_RCC_OscConfig+0x680>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e19a      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3a:	4bac      	ldr	r3, [pc, #688]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x3b6>
 8003e44:	e013      	b.n	8003e6e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e46:	f7fe f9f7 	bl	8002238 <HAL_GetTick>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4e:	e009      	b.n	8003e64 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7fe f9f2 	bl	8002238 <HAL_GetTick>
 8003e54:	0002      	movs	r2, r0
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	4aa5      	ldr	r2, [pc, #660]	@ (80040f0 <HAL_RCC_OscConfig+0x680>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e185      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e64:	4ba1      	ldr	r3, [pc, #644]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e6e:	231f      	movs	r3, #31
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d105      	bne.n	8003e84 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e78:	4b9c      	ldr	r3, [pc, #624]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	4b9b      	ldr	r3, [pc, #620]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003e7e:	499d      	ldr	r1, [pc, #628]	@ (80040f4 <HAL_RCC_OscConfig+0x684>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2210      	movs	r2, #16
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d063      	beq.n	8003f56 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d12a      	bne.n	8003eec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e96:	4b95      	ldr	r3, [pc, #596]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e9a:	4b94      	ldr	r3, [pc, #592]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003e9c:	2104      	movs	r1, #4
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003ea2:	4b92      	ldr	r3, [pc, #584]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea6:	4b91      	ldr	r3, [pc, #580]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eae:	f7fe f9c3 	bl	8002238 <HAL_GetTick>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003eb8:	f7fe f9be 	bl	8002238 <HAL_GetTick>
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e152      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003eca:	4b88      	ldr	r3, [pc, #544]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ece:	2202      	movs	r2, #2
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d0f1      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ed4:	4b85      	ldr	r3, [pc, #532]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed8:	22f8      	movs	r2, #248	@ 0xf8
 8003eda:	4393      	bics	r3, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	00da      	lsls	r2, r3, #3
 8003ee4:	4b81      	ldr	r3, [pc, #516]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003eea:	e034      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	3305      	adds	r3, #5
 8003ef2:	d111      	bne.n	8003f18 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003ef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ef8:	4b7c      	ldr	r3, [pc, #496]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003efa:	2104      	movs	r1, #4
 8003efc:	438a      	bics	r2, r1
 8003efe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f00:	4b7a      	ldr	r3, [pc, #488]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f04:	22f8      	movs	r2, #248	@ 0xf8
 8003f06:	4393      	bics	r3, r2
 8003f08:	0019      	movs	r1, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	00da      	lsls	r2, r3, #3
 8003f10:	4b76      	ldr	r3, [pc, #472]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f12:	430a      	orrs	r2, r1
 8003f14:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f16:	e01e      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f18:	4b74      	ldr	r3, [pc, #464]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f1c:	4b73      	ldr	r3, [pc, #460]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f1e:	2104      	movs	r1, #4
 8003f20:	430a      	orrs	r2, r1
 8003f22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003f24:	4b71      	ldr	r3, [pc, #452]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f28:	4b70      	ldr	r3, [pc, #448]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f30:	f7fe f982 	bl	8002238 <HAL_GetTick>
 8003f34:	0003      	movs	r3, r0
 8003f36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f3a:	f7fe f97d 	bl	8002238 <HAL_GetTick>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e111      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f4c:	4b67      	ldr	r3, [pc, #412]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	2202      	movs	r2, #2
 8003f52:	4013      	ands	r3, r2
 8003f54:	d1f1      	bne.n	8003f3a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d05c      	beq.n	800401a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f60:	4b62      	ldr	r3, [pc, #392]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	220c      	movs	r2, #12
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	d00e      	beq.n	8003f8a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f6c:	4b5f      	ldr	r3, [pc, #380]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	220c      	movs	r2, #12
 8003f72:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d114      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f78:	4b5c      	ldr	r3, [pc, #368]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	23c0      	movs	r3, #192	@ 0xc0
 8003f7e:	025b      	lsls	r3, r3, #9
 8003f80:	401a      	ands	r2, r3
 8003f82:	23c0      	movs	r3, #192	@ 0xc0
 8003f84:	025b      	lsls	r3, r3, #9
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d10b      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003f8a:	4b58      	ldr	r3, [pc, #352]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f8e:	2380      	movs	r3, #128	@ 0x80
 8003f90:	029b      	lsls	r3, r3, #10
 8003f92:	4013      	ands	r3, r2
 8003f94:	d040      	beq.n	8004018 <HAL_RCC_OscConfig+0x5a8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d03c      	beq.n	8004018 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0e6      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01b      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003faa:	4b50      	ldr	r3, [pc, #320]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fae:	4b4f      	ldr	r3, [pc, #316]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003fb0:	2180      	movs	r1, #128	@ 0x80
 8003fb2:	0249      	lsls	r1, r1, #9
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fe f93e 	bl	8002238 <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc2:	f7fe f939 	bl	8002238 <HAL_GetTick>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0cd      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fd4:	4b45      	ldr	r3, [pc, #276]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fd8:	2380      	movs	r3, #128	@ 0x80
 8003fda:	029b      	lsls	r3, r3, #10
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x552>
 8003fe0:	e01b      	b.n	800401a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003fe2:	4b42      	ldr	r3, [pc, #264]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fe6:	4b41      	ldr	r3, [pc, #260]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003fe8:	4943      	ldr	r1, [pc, #268]	@ (80040f8 <HAL_RCC_OscConfig+0x688>)
 8003fea:	400a      	ands	r2, r1
 8003fec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fee:	f7fe f923 	bl	8002238 <HAL_GetTick>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ff8:	f7fe f91e 	bl	8002238 <HAL_GetTick>
 8003ffc:	0002      	movs	r2, r0
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0b2      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800400a:	4b38      	ldr	r3, [pc, #224]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 800400c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800400e:	2380      	movs	r3, #128	@ 0x80
 8004010:	029b      	lsls	r3, r3, #10
 8004012:	4013      	ands	r3, r2
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x588>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004018:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d100      	bne.n	8004024 <HAL_RCC_OscConfig+0x5b4>
 8004022:	e0a4      	b.n	800416e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004024:	4b31      	ldr	r3, [pc, #196]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	220c      	movs	r2, #12
 800402a:	4013      	ands	r3, r2
 800402c:	2b08      	cmp	r3, #8
 800402e:	d100      	bne.n	8004032 <HAL_RCC_OscConfig+0x5c2>
 8004030:	e078      	b.n	8004124 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	2b02      	cmp	r3, #2
 8004038:	d14c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b2c      	ldr	r3, [pc, #176]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b2b      	ldr	r3, [pc, #172]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8004040:	492e      	ldr	r1, [pc, #184]	@ (80040fc <HAL_RCC_OscConfig+0x68c>)
 8004042:	400a      	ands	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004046:	f7fe f8f7 	bl	8002238 <HAL_GetTick>
 800404a:	0003      	movs	r3, r0
 800404c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004050:	f7fe f8f2 	bl	8002238 <HAL_GetTick>
 8004054:	0002      	movs	r2, r0
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e086      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004062:	4b22      	ldr	r3, [pc, #136]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	2380      	movs	r3, #128	@ 0x80
 8004068:	049b      	lsls	r3, r3, #18
 800406a:	4013      	ands	r3, r2
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800406e:	4b1f      	ldr	r3, [pc, #124]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8004070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004072:	220f      	movs	r2, #15
 8004074:	4393      	bics	r3, r2
 8004076:	0019      	movs	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800407c:	4b1b      	ldr	r3, [pc, #108]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 800407e:	430a      	orrs	r2, r1
 8004080:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004082:	4b1a      	ldr	r3, [pc, #104]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4a1e      	ldr	r2, [pc, #120]	@ (8004100 <HAL_RCC_OscConfig+0x690>)
 8004088:	4013      	ands	r3, r2
 800408a:	0019      	movs	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004094:	431a      	orrs	r2, r3
 8004096:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800409c:	4b13      	ldr	r3, [pc, #76]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b12      	ldr	r3, [pc, #72]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 80040a2:	2180      	movs	r1, #128	@ 0x80
 80040a4:	0449      	lsls	r1, r1, #17
 80040a6:	430a      	orrs	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040aa:	f7fe f8c5 	bl	8002238 <HAL_GetTick>
 80040ae:	0003      	movs	r3, r0
 80040b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fe f8c0 	bl	8002238 <HAL_GetTick>
 80040b8:	0002      	movs	r2, r0
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e054      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040c6:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	049b      	lsls	r3, r3, #18
 80040ce:	4013      	ands	r3, r2
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x644>
 80040d2:	e04c      	b.n	800416e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d4:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4b04      	ldr	r3, [pc, #16]	@ (80040ec <HAL_RCC_OscConfig+0x67c>)
 80040da:	4908      	ldr	r1, [pc, #32]	@ (80040fc <HAL_RCC_OscConfig+0x68c>)
 80040dc:	400a      	ands	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fe f8aa 	bl	8002238 <HAL_GetTick>
 80040e4:	0003      	movs	r3, r0
 80040e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e8:	e015      	b.n	8004116 <HAL_RCC_OscConfig+0x6a6>
 80040ea:	46c0      	nop			@ (mov r8, r8)
 80040ec:	40021000 	.word	0x40021000
 80040f0:	00001388 	.word	0x00001388
 80040f4:	efffffff 	.word	0xefffffff
 80040f8:	fffeffff 	.word	0xfffeffff
 80040fc:	feffffff 	.word	0xfeffffff
 8004100:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7fe f898 	bl	8002238 <HAL_GetTick>
 8004108:	0002      	movs	r2, r0
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e02c      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004116:	4b18      	ldr	r3, [pc, #96]	@ (8004178 <HAL_RCC_OscConfig+0x708>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	049b      	lsls	r3, r3, #18
 800411e:	4013      	ands	r3, r2
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x694>
 8004122:	e024      	b.n	800416e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e01f      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004130:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <HAL_RCC_OscConfig+0x708>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <HAL_RCC_OscConfig+0x708>)
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	23c0      	movs	r3, #192	@ 0xc0
 8004140:	025b      	lsls	r3, r3, #9
 8004142:	401a      	ands	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	429a      	cmp	r2, r3
 800414a:	d10e      	bne.n	800416a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	220f      	movs	r2, #15
 8004150:	401a      	ands	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d107      	bne.n	800416a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	23f0      	movs	r3, #240	@ 0xf0
 800415e:	039b      	lsls	r3, r3, #14
 8004160:	401a      	ands	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d001      	beq.n	800416e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	0018      	movs	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	b008      	add	sp, #32
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000

0800417c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0bf      	b.n	8004310 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004190:	4b61      	ldr	r3, [pc, #388]	@ (8004318 <HAL_RCC_ClockConfig+0x19c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	4013      	ands	r3, r2
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d911      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419e:	4b5e      	ldr	r3, [pc, #376]	@ (8004318 <HAL_RCC_ClockConfig+0x19c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2201      	movs	r2, #1
 80041a4:	4393      	bics	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	4b5b      	ldr	r3, [pc, #364]	@ (8004318 <HAL_RCC_ClockConfig+0x19c>)
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b0:	4b59      	ldr	r3, [pc, #356]	@ (8004318 <HAL_RCC_ClockConfig+0x19c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2201      	movs	r2, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e0a6      	b.n	8004310 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2202      	movs	r2, #2
 80041c8:	4013      	ands	r3, r2
 80041ca:	d015      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2204      	movs	r2, #4
 80041d2:	4013      	ands	r3, r2
 80041d4:	d006      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041d6:	4b51      	ldr	r3, [pc, #324]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	4b50      	ldr	r3, [pc, #320]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 80041dc:	21e0      	movs	r1, #224	@ 0xe0
 80041de:	00c9      	lsls	r1, r1, #3
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b4d      	ldr	r3, [pc, #308]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	22f0      	movs	r2, #240	@ 0xf0
 80041ea:	4393      	bics	r3, r2
 80041ec:	0019      	movs	r1, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4b4a      	ldr	r3, [pc, #296]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2201      	movs	r2, #1
 80041fe:	4013      	ands	r3, r2
 8004200:	d04c      	beq.n	800429c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b44      	ldr	r3, [pc, #272]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	2380      	movs	r3, #128	@ 0x80
 8004210:	029b      	lsls	r3, r3, #10
 8004212:	4013      	ands	r3, r2
 8004214:	d120      	bne.n	8004258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07a      	b.n	8004310 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b3e      	ldr	r3, [pc, #248]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	2380      	movs	r3, #128	@ 0x80
 8004228:	049b      	lsls	r3, r3, #18
 800422a:	4013      	ands	r3, r2
 800422c:	d114      	bne.n	8004258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e06e      	b.n	8004310 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d107      	bne.n	800424a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800423a:	4b38      	ldr	r3, [pc, #224]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 800423c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800423e:	2380      	movs	r3, #128	@ 0x80
 8004240:	029b      	lsls	r3, r3, #10
 8004242:	4013      	ands	r3, r2
 8004244:	d108      	bne.n	8004258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e062      	b.n	8004310 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424a:	4b34      	ldr	r3, [pc, #208]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2202      	movs	r2, #2
 8004250:	4013      	ands	r3, r2
 8004252:	d101      	bne.n	8004258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e05b      	b.n	8004310 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004258:	4b30      	ldr	r3, [pc, #192]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2203      	movs	r2, #3
 800425e:	4393      	bics	r3, r2
 8004260:	0019      	movs	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	4b2d      	ldr	r3, [pc, #180]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800426c:	f7fd ffe4 	bl	8002238 <HAL_GetTick>
 8004270:	0003      	movs	r3, r0
 8004272:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004274:	e009      	b.n	800428a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004276:	f7fd ffdf 	bl	8002238 <HAL_GetTick>
 800427a:	0002      	movs	r2, r0
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	4a27      	ldr	r2, [pc, #156]	@ (8004320 <HAL_RCC_ClockConfig+0x1a4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e042      	b.n	8004310 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428a:	4b24      	ldr	r3, [pc, #144]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	220c      	movs	r2, #12
 8004290:	401a      	ands	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	429a      	cmp	r2, r3
 800429a:	d1ec      	bne.n	8004276 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800429c:	4b1e      	ldr	r3, [pc, #120]	@ (8004318 <HAL_RCC_ClockConfig+0x19c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2201      	movs	r2, #1
 80042a2:	4013      	ands	r3, r2
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d211      	bcs.n	80042ce <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <HAL_RCC_ClockConfig+0x19c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2201      	movs	r2, #1
 80042b0:	4393      	bics	r3, r2
 80042b2:	0019      	movs	r1, r3
 80042b4:	4b18      	ldr	r3, [pc, #96]	@ (8004318 <HAL_RCC_ClockConfig+0x19c>)
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042bc:	4b16      	ldr	r3, [pc, #88]	@ (8004318 <HAL_RCC_ClockConfig+0x19c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	4013      	ands	r3, r2
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e020      	b.n	8004310 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2204      	movs	r2, #4
 80042d4:	4013      	ands	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042d8:	4b10      	ldr	r3, [pc, #64]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <HAL_RCC_ClockConfig+0x1a8>)
 80042de:	4013      	ands	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042ec:	f000 f820 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042f0:	0001      	movs	r1, r0
 80042f2:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <HAL_RCC_ClockConfig+0x1a0>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	220f      	movs	r2, #15
 80042fa:	4013      	ands	r3, r2
 80042fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <HAL_RCC_ClockConfig+0x1ac>)
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	000a      	movs	r2, r1
 8004302:	40da      	lsrs	r2, r3
 8004304:	4b09      	ldr	r3, [pc, #36]	@ (800432c <HAL_RCC_ClockConfig+0x1b0>)
 8004306:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004308:	2003      	movs	r0, #3
 800430a:	f7fd ff4f 	bl	80021ac <HAL_InitTick>
  
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	b004      	add	sp, #16
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40022000 	.word	0x40022000
 800431c:	40021000 	.word	0x40021000
 8004320:	00001388 	.word	0x00001388
 8004324:	fffff8ff 	.word	0xfffff8ff
 8004328:	08004504 	.word	0x08004504
 800432c:	20000010 	.word	0x20000010

08004330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	2300      	movs	r3, #0
 8004344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800434a:	4b2d      	ldr	r3, [pc, #180]	@ (8004400 <HAL_RCC_GetSysClockFreq+0xd0>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	220c      	movs	r2, #12
 8004354:	4013      	ands	r3, r2
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d046      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0xb8>
 800435a:	d848      	bhi.n	80043ee <HAL_RCC_GetSysClockFreq+0xbe>
 800435c:	2b04      	cmp	r3, #4
 800435e:	d002      	beq.n	8004366 <HAL_RCC_GetSysClockFreq+0x36>
 8004360:	2b08      	cmp	r3, #8
 8004362:	d003      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x3c>
 8004364:	e043      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004366:	4b27      	ldr	r3, [pc, #156]	@ (8004404 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004368:	613b      	str	r3, [r7, #16]
      break;
 800436a:	e043      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	0c9b      	lsrs	r3, r3, #18
 8004370:	220f      	movs	r2, #15
 8004372:	4013      	ands	r3, r2
 8004374:	4a24      	ldr	r2, [pc, #144]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004376:	5cd3      	ldrb	r3, [r2, r3]
 8004378:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800437a:	4b21      	ldr	r3, [pc, #132]	@ (8004400 <HAL_RCC_GetSysClockFreq+0xd0>)
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	220f      	movs	r2, #15
 8004380:	4013      	ands	r3, r2
 8004382:	4a22      	ldr	r2, [pc, #136]	@ (800440c <HAL_RCC_GetSysClockFreq+0xdc>)
 8004384:	5cd3      	ldrb	r3, [r2, r3]
 8004386:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	23c0      	movs	r3, #192	@ 0xc0
 800438c:	025b      	lsls	r3, r3, #9
 800438e:	401a      	ands	r2, r3
 8004390:	2380      	movs	r3, #128	@ 0x80
 8004392:	025b      	lsls	r3, r3, #9
 8004394:	429a      	cmp	r2, r3
 8004396:	d109      	bne.n	80043ac <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	481a      	ldr	r0, [pc, #104]	@ (8004404 <HAL_RCC_GetSysClockFreq+0xd4>)
 800439c:	f7fb feb4 	bl	8000108 <__udivsi3>
 80043a0:	0003      	movs	r3, r0
 80043a2:	001a      	movs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4353      	muls	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e01a      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	23c0      	movs	r3, #192	@ 0xc0
 80043b0:	025b      	lsls	r3, r3, #9
 80043b2:	401a      	ands	r2, r3
 80043b4:	23c0      	movs	r3, #192	@ 0xc0
 80043b6:	025b      	lsls	r3, r3, #9
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d109      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4814      	ldr	r0, [pc, #80]	@ (8004410 <HAL_RCC_GetSysClockFreq+0xe0>)
 80043c0:	f7fb fea2 	bl	8000108 <__udivsi3>
 80043c4:	0003      	movs	r3, r0
 80043c6:	001a      	movs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4353      	muls	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	4810      	ldr	r0, [pc, #64]	@ (8004414 <HAL_RCC_GetSysClockFreq+0xe4>)
 80043d4:	f7fb fe98 	bl	8000108 <__udivsi3>
 80043d8:	0003      	movs	r3, r0
 80043da:	001a      	movs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4353      	muls	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	613b      	str	r3, [r7, #16]
      break;
 80043e6:	e005      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80043e8:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <HAL_RCC_GetSysClockFreq+0xe0>)
 80043ea:	613b      	str	r3, [r7, #16]
      break;
 80043ec:	e002      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043ee:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <HAL_RCC_GetSysClockFreq+0xe4>)
 80043f0:	613b      	str	r3, [r7, #16]
      break;
 80043f2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80043f4:	693b      	ldr	r3, [r7, #16]
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b006      	add	sp, #24
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	40021000 	.word	0x40021000
 8004404:	00f42400 	.word	0x00f42400
 8004408:	08004514 	.word	0x08004514
 800440c:	08004524 	.word	0x08004524
 8004410:	02dc6c00 	.word	0x02dc6c00
 8004414:	007a1200 	.word	0x007a1200

08004418 <memset>:
 8004418:	0003      	movs	r3, r0
 800441a:	1882      	adds	r2, r0, r2
 800441c:	4293      	cmp	r3, r2
 800441e:	d100      	bne.n	8004422 <memset+0xa>
 8004420:	4770      	bx	lr
 8004422:	7019      	strb	r1, [r3, #0]
 8004424:	3301      	adds	r3, #1
 8004426:	e7f9      	b.n	800441c <memset+0x4>

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	2600      	movs	r6, #0
 800442c:	4c0c      	ldr	r4, [pc, #48]	@ (8004460 <__libc_init_array+0x38>)
 800442e:	4d0d      	ldr	r5, [pc, #52]	@ (8004464 <__libc_init_array+0x3c>)
 8004430:	1b64      	subs	r4, r4, r5
 8004432:	10a4      	asrs	r4, r4, #2
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	2600      	movs	r6, #0
 800443a:	f000 f819 	bl	8004470 <_init>
 800443e:	4c0a      	ldr	r4, [pc, #40]	@ (8004468 <__libc_init_array+0x40>)
 8004440:	4d0a      	ldr	r5, [pc, #40]	@ (800446c <__libc_init_array+0x44>)
 8004442:	1b64      	subs	r4, r4, r5
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	00b3      	lsls	r3, r6, #2
 800444e:	58eb      	ldr	r3, [r5, r3]
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	00b3      	lsls	r3, r6, #2
 8004458:	58eb      	ldr	r3, [r5, r3]
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08004534 	.word	0x08004534
 8004464:	08004534 	.word	0x08004534
 8004468:	08004538 	.word	0x08004538
 800446c:	08004534 	.word	0x08004534

08004470 <_init>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	46c0      	nop			@ (mov r8, r8)
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr

0800447c <_fini>:
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004482:	bc08      	pop	{r3}
 8004484:	469e      	mov	lr, r3
 8004486:	4770      	bx	lr
