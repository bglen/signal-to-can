
signal_to_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e08  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002ec8  08002ec8  00003ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef8  08002ef8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002ef8  08002ef8  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002ef8  08002ef8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef8  08002ef8  00003ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002efc  08002efc  00003efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08002f0c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08002f0c  0000415c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006724  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017bc  00000000  00000000  0000a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  0000bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000484  00000000  00000000  0000c538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018565  00000000  00000000  0000c9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008325  00000000  00000000  00024f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a052  00000000  00000000  0002d246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001494  00000000  00000000  000b72dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b8770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002eb0 	.word	0x08002eb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002eb0 	.word	0x08002eb0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_fmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0044      	lsls	r4, r0, #1
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0246      	lsls	r6, r0, #9
 800022e:	1c0f      	adds	r7, r1, #0
 8000230:	0a76      	lsrs	r6, r6, #9
 8000232:	0e24      	lsrs	r4, r4, #24
 8000234:	0fc5      	lsrs	r5, r0, #31
 8000236:	2c00      	cmp	r4, #0
 8000238:	d100      	bne.n	800023c <__aeabi_fmul+0x1c>
 800023a:	e0da      	b.n	80003f2 <__aeabi_fmul+0x1d2>
 800023c:	2cff      	cmp	r4, #255	@ 0xff
 800023e:	d074      	beq.n	800032a <__aeabi_fmul+0x10a>
 8000240:	2380      	movs	r3, #128	@ 0x80
 8000242:	00f6      	lsls	r6, r6, #3
 8000244:	04db      	lsls	r3, r3, #19
 8000246:	431e      	orrs	r6, r3
 8000248:	2300      	movs	r3, #0
 800024a:	4699      	mov	r9, r3
 800024c:	469a      	mov	sl, r3
 800024e:	3c7f      	subs	r4, #127	@ 0x7f
 8000250:	027b      	lsls	r3, r7, #9
 8000252:	0a5b      	lsrs	r3, r3, #9
 8000254:	4698      	mov	r8, r3
 8000256:	007b      	lsls	r3, r7, #1
 8000258:	0e1b      	lsrs	r3, r3, #24
 800025a:	0fff      	lsrs	r7, r7, #31
 800025c:	2b00      	cmp	r3, #0
 800025e:	d074      	beq.n	800034a <__aeabi_fmul+0x12a>
 8000260:	2bff      	cmp	r3, #255	@ 0xff
 8000262:	d100      	bne.n	8000266 <__aeabi_fmul+0x46>
 8000264:	e08e      	b.n	8000384 <__aeabi_fmul+0x164>
 8000266:	4642      	mov	r2, r8
 8000268:	2180      	movs	r1, #128	@ 0x80
 800026a:	00d2      	lsls	r2, r2, #3
 800026c:	04c9      	lsls	r1, r1, #19
 800026e:	4311      	orrs	r1, r2
 8000270:	3b7f      	subs	r3, #127	@ 0x7f
 8000272:	002a      	movs	r2, r5
 8000274:	18e4      	adds	r4, r4, r3
 8000276:	464b      	mov	r3, r9
 8000278:	407a      	eors	r2, r7
 800027a:	4688      	mov	r8, r1
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	2b0a      	cmp	r3, #10
 8000280:	dc75      	bgt.n	800036e <__aeabi_fmul+0x14e>
 8000282:	464b      	mov	r3, r9
 8000284:	2000      	movs	r0, #0
 8000286:	2b02      	cmp	r3, #2
 8000288:	dd0f      	ble.n	80002aa <__aeabi_fmul+0x8a>
 800028a:	4649      	mov	r1, r9
 800028c:	2301      	movs	r3, #1
 800028e:	408b      	lsls	r3, r1
 8000290:	21a6      	movs	r1, #166	@ 0xa6
 8000292:	00c9      	lsls	r1, r1, #3
 8000294:	420b      	tst	r3, r1
 8000296:	d169      	bne.n	800036c <__aeabi_fmul+0x14c>
 8000298:	2190      	movs	r1, #144	@ 0x90
 800029a:	0089      	lsls	r1, r1, #2
 800029c:	420b      	tst	r3, r1
 800029e:	d000      	beq.n	80002a2 <__aeabi_fmul+0x82>
 80002a0:	e100      	b.n	80004a4 <__aeabi_fmul+0x284>
 80002a2:	2188      	movs	r1, #136	@ 0x88
 80002a4:	4219      	tst	r1, r3
 80002a6:	d000      	beq.n	80002aa <__aeabi_fmul+0x8a>
 80002a8:	e0f5      	b.n	8000496 <__aeabi_fmul+0x276>
 80002aa:	4641      	mov	r1, r8
 80002ac:	0409      	lsls	r1, r1, #16
 80002ae:	0c09      	lsrs	r1, r1, #16
 80002b0:	4643      	mov	r3, r8
 80002b2:	0008      	movs	r0, r1
 80002b4:	0c35      	lsrs	r5, r6, #16
 80002b6:	0436      	lsls	r6, r6, #16
 80002b8:	0c1b      	lsrs	r3, r3, #16
 80002ba:	0c36      	lsrs	r6, r6, #16
 80002bc:	4370      	muls	r0, r6
 80002be:	4369      	muls	r1, r5
 80002c0:	435e      	muls	r6, r3
 80002c2:	435d      	muls	r5, r3
 80002c4:	1876      	adds	r6, r6, r1
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	199b      	adds	r3, r3, r6
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d903      	bls.n	80002d6 <__aeabi_fmul+0xb6>
 80002ce:	2180      	movs	r1, #128	@ 0x80
 80002d0:	0249      	lsls	r1, r1, #9
 80002d2:	468c      	mov	ip, r1
 80002d4:	4465      	add	r5, ip
 80002d6:	0400      	lsls	r0, r0, #16
 80002d8:	0419      	lsls	r1, r3, #16
 80002da:	0c00      	lsrs	r0, r0, #16
 80002dc:	1809      	adds	r1, r1, r0
 80002de:	018e      	lsls	r6, r1, #6
 80002e0:	1e70      	subs	r0, r6, #1
 80002e2:	4186      	sbcs	r6, r0
 80002e4:	0c1b      	lsrs	r3, r3, #16
 80002e6:	0e89      	lsrs	r1, r1, #26
 80002e8:	195b      	adds	r3, r3, r5
 80002ea:	430e      	orrs	r6, r1
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	431e      	orrs	r6, r3
 80002f0:	011b      	lsls	r3, r3, #4
 80002f2:	d46c      	bmi.n	80003ce <__aeabi_fmul+0x1ae>
 80002f4:	0023      	movs	r3, r4
 80002f6:	337f      	adds	r3, #127	@ 0x7f
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	dc00      	bgt.n	80002fe <__aeabi_fmul+0xde>
 80002fc:	e0b1      	b.n	8000462 <__aeabi_fmul+0x242>
 80002fe:	0015      	movs	r5, r2
 8000300:	0771      	lsls	r1, r6, #29
 8000302:	d00b      	beq.n	800031c <__aeabi_fmul+0xfc>
 8000304:	200f      	movs	r0, #15
 8000306:	0021      	movs	r1, r4
 8000308:	4030      	ands	r0, r6
 800030a:	2804      	cmp	r0, #4
 800030c:	d006      	beq.n	800031c <__aeabi_fmul+0xfc>
 800030e:	3604      	adds	r6, #4
 8000310:	0132      	lsls	r2, r6, #4
 8000312:	d503      	bpl.n	800031c <__aeabi_fmul+0xfc>
 8000314:	4b6e      	ldr	r3, [pc, #440]	@ (80004d0 <__aeabi_fmul+0x2b0>)
 8000316:	401e      	ands	r6, r3
 8000318:	000b      	movs	r3, r1
 800031a:	3380      	adds	r3, #128	@ 0x80
 800031c:	2bfe      	cmp	r3, #254	@ 0xfe
 800031e:	dd00      	ble.n	8000322 <__aeabi_fmul+0x102>
 8000320:	e0bd      	b.n	800049e <__aeabi_fmul+0x27e>
 8000322:	01b2      	lsls	r2, r6, #6
 8000324:	0a52      	lsrs	r2, r2, #9
 8000326:	b2db      	uxtb	r3, r3
 8000328:	e048      	b.n	80003bc <__aeabi_fmul+0x19c>
 800032a:	2e00      	cmp	r6, #0
 800032c:	d000      	beq.n	8000330 <__aeabi_fmul+0x110>
 800032e:	e092      	b.n	8000456 <__aeabi_fmul+0x236>
 8000330:	2308      	movs	r3, #8
 8000332:	4699      	mov	r9, r3
 8000334:	3b06      	subs	r3, #6
 8000336:	469a      	mov	sl, r3
 8000338:	027b      	lsls	r3, r7, #9
 800033a:	0a5b      	lsrs	r3, r3, #9
 800033c:	4698      	mov	r8, r3
 800033e:	007b      	lsls	r3, r7, #1
 8000340:	24ff      	movs	r4, #255	@ 0xff
 8000342:	0e1b      	lsrs	r3, r3, #24
 8000344:	0fff      	lsrs	r7, r7, #31
 8000346:	2b00      	cmp	r3, #0
 8000348:	d18a      	bne.n	8000260 <__aeabi_fmul+0x40>
 800034a:	4642      	mov	r2, r8
 800034c:	2a00      	cmp	r2, #0
 800034e:	d164      	bne.n	800041a <__aeabi_fmul+0x1fa>
 8000350:	4649      	mov	r1, r9
 8000352:	3201      	adds	r2, #1
 8000354:	4311      	orrs	r1, r2
 8000356:	4689      	mov	r9, r1
 8000358:	290a      	cmp	r1, #10
 800035a:	dc08      	bgt.n	800036e <__aeabi_fmul+0x14e>
 800035c:	407d      	eors	r5, r7
 800035e:	2001      	movs	r0, #1
 8000360:	b2ea      	uxtb	r2, r5
 8000362:	2902      	cmp	r1, #2
 8000364:	dc91      	bgt.n	800028a <__aeabi_fmul+0x6a>
 8000366:	0015      	movs	r5, r2
 8000368:	2200      	movs	r2, #0
 800036a:	e027      	b.n	80003bc <__aeabi_fmul+0x19c>
 800036c:	0015      	movs	r5, r2
 800036e:	4653      	mov	r3, sl
 8000370:	2b02      	cmp	r3, #2
 8000372:	d100      	bne.n	8000376 <__aeabi_fmul+0x156>
 8000374:	e093      	b.n	800049e <__aeabi_fmul+0x27e>
 8000376:	2b03      	cmp	r3, #3
 8000378:	d01a      	beq.n	80003b0 <__aeabi_fmul+0x190>
 800037a:	2b01      	cmp	r3, #1
 800037c:	d12c      	bne.n	80003d8 <__aeabi_fmul+0x1b8>
 800037e:	2300      	movs	r3, #0
 8000380:	2200      	movs	r2, #0
 8000382:	e01b      	b.n	80003bc <__aeabi_fmul+0x19c>
 8000384:	4643      	mov	r3, r8
 8000386:	34ff      	adds	r4, #255	@ 0xff
 8000388:	2b00      	cmp	r3, #0
 800038a:	d055      	beq.n	8000438 <__aeabi_fmul+0x218>
 800038c:	2103      	movs	r1, #3
 800038e:	464b      	mov	r3, r9
 8000390:	430b      	orrs	r3, r1
 8000392:	0019      	movs	r1, r3
 8000394:	2b0a      	cmp	r3, #10
 8000396:	dc00      	bgt.n	800039a <__aeabi_fmul+0x17a>
 8000398:	e092      	b.n	80004c0 <__aeabi_fmul+0x2a0>
 800039a:	2b0f      	cmp	r3, #15
 800039c:	d000      	beq.n	80003a0 <__aeabi_fmul+0x180>
 800039e:	e08c      	b.n	80004ba <__aeabi_fmul+0x29a>
 80003a0:	2280      	movs	r2, #128	@ 0x80
 80003a2:	03d2      	lsls	r2, r2, #15
 80003a4:	4216      	tst	r6, r2
 80003a6:	d003      	beq.n	80003b0 <__aeabi_fmul+0x190>
 80003a8:	4643      	mov	r3, r8
 80003aa:	4213      	tst	r3, r2
 80003ac:	d100      	bne.n	80003b0 <__aeabi_fmul+0x190>
 80003ae:	e07d      	b.n	80004ac <__aeabi_fmul+0x28c>
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	03d2      	lsls	r2, r2, #15
 80003b4:	4332      	orrs	r2, r6
 80003b6:	0252      	lsls	r2, r2, #9
 80003b8:	0a52      	lsrs	r2, r2, #9
 80003ba:	23ff      	movs	r3, #255	@ 0xff
 80003bc:	05d8      	lsls	r0, r3, #23
 80003be:	07ed      	lsls	r5, r5, #31
 80003c0:	4310      	orrs	r0, r2
 80003c2:	4328      	orrs	r0, r5
 80003c4:	bce0      	pop	{r5, r6, r7}
 80003c6:	46ba      	mov	sl, r7
 80003c8:	46b1      	mov	r9, r6
 80003ca:	46a8      	mov	r8, r5
 80003cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ce:	2301      	movs	r3, #1
 80003d0:	0015      	movs	r5, r2
 80003d2:	0871      	lsrs	r1, r6, #1
 80003d4:	401e      	ands	r6, r3
 80003d6:	430e      	orrs	r6, r1
 80003d8:	0023      	movs	r3, r4
 80003da:	3380      	adds	r3, #128	@ 0x80
 80003dc:	1c61      	adds	r1, r4, #1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	dd41      	ble.n	8000466 <__aeabi_fmul+0x246>
 80003e2:	0772      	lsls	r2, r6, #29
 80003e4:	d094      	beq.n	8000310 <__aeabi_fmul+0xf0>
 80003e6:	220f      	movs	r2, #15
 80003e8:	4032      	ands	r2, r6
 80003ea:	2a04      	cmp	r2, #4
 80003ec:	d000      	beq.n	80003f0 <__aeabi_fmul+0x1d0>
 80003ee:	e78e      	b.n	800030e <__aeabi_fmul+0xee>
 80003f0:	e78e      	b.n	8000310 <__aeabi_fmul+0xf0>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d105      	bne.n	8000402 <__aeabi_fmul+0x1e2>
 80003f6:	2304      	movs	r3, #4
 80003f8:	4699      	mov	r9, r3
 80003fa:	3b03      	subs	r3, #3
 80003fc:	2400      	movs	r4, #0
 80003fe:	469a      	mov	sl, r3
 8000400:	e726      	b.n	8000250 <__aeabi_fmul+0x30>
 8000402:	0030      	movs	r0, r6
 8000404:	f000 f8ac 	bl	8000560 <__clzsi2>
 8000408:	2476      	movs	r4, #118	@ 0x76
 800040a:	1f43      	subs	r3, r0, #5
 800040c:	409e      	lsls	r6, r3
 800040e:	2300      	movs	r3, #0
 8000410:	4264      	negs	r4, r4
 8000412:	4699      	mov	r9, r3
 8000414:	469a      	mov	sl, r3
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	e71a      	b.n	8000250 <__aeabi_fmul+0x30>
 800041a:	4640      	mov	r0, r8
 800041c:	f000 f8a0 	bl	8000560 <__clzsi2>
 8000420:	464b      	mov	r3, r9
 8000422:	1a24      	subs	r4, r4, r0
 8000424:	3c76      	subs	r4, #118	@ 0x76
 8000426:	2b0a      	cmp	r3, #10
 8000428:	dca1      	bgt.n	800036e <__aeabi_fmul+0x14e>
 800042a:	4643      	mov	r3, r8
 800042c:	3805      	subs	r0, #5
 800042e:	4083      	lsls	r3, r0
 8000430:	407d      	eors	r5, r7
 8000432:	4698      	mov	r8, r3
 8000434:	b2ea      	uxtb	r2, r5
 8000436:	e724      	b.n	8000282 <__aeabi_fmul+0x62>
 8000438:	464a      	mov	r2, r9
 800043a:	3302      	adds	r3, #2
 800043c:	4313      	orrs	r3, r2
 800043e:	002a      	movs	r2, r5
 8000440:	407a      	eors	r2, r7
 8000442:	b2d2      	uxtb	r2, r2
 8000444:	2b0a      	cmp	r3, #10
 8000446:	dc92      	bgt.n	800036e <__aeabi_fmul+0x14e>
 8000448:	4649      	mov	r1, r9
 800044a:	0015      	movs	r5, r2
 800044c:	2900      	cmp	r1, #0
 800044e:	d026      	beq.n	800049e <__aeabi_fmul+0x27e>
 8000450:	4699      	mov	r9, r3
 8000452:	2002      	movs	r0, #2
 8000454:	e719      	b.n	800028a <__aeabi_fmul+0x6a>
 8000456:	230c      	movs	r3, #12
 8000458:	4699      	mov	r9, r3
 800045a:	3b09      	subs	r3, #9
 800045c:	24ff      	movs	r4, #255	@ 0xff
 800045e:	469a      	mov	sl, r3
 8000460:	e6f6      	b.n	8000250 <__aeabi_fmul+0x30>
 8000462:	0015      	movs	r5, r2
 8000464:	0021      	movs	r1, r4
 8000466:	2201      	movs	r2, #1
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	2b1b      	cmp	r3, #27
 800046c:	dd00      	ble.n	8000470 <__aeabi_fmul+0x250>
 800046e:	e786      	b.n	800037e <__aeabi_fmul+0x15e>
 8000470:	319e      	adds	r1, #158	@ 0x9e
 8000472:	0032      	movs	r2, r6
 8000474:	408e      	lsls	r6, r1
 8000476:	40da      	lsrs	r2, r3
 8000478:	1e73      	subs	r3, r6, #1
 800047a:	419e      	sbcs	r6, r3
 800047c:	4332      	orrs	r2, r6
 800047e:	0753      	lsls	r3, r2, #29
 8000480:	d004      	beq.n	800048c <__aeabi_fmul+0x26c>
 8000482:	230f      	movs	r3, #15
 8000484:	4013      	ands	r3, r2
 8000486:	2b04      	cmp	r3, #4
 8000488:	d000      	beq.n	800048c <__aeabi_fmul+0x26c>
 800048a:	3204      	adds	r2, #4
 800048c:	0153      	lsls	r3, r2, #5
 800048e:	d510      	bpl.n	80004b2 <__aeabi_fmul+0x292>
 8000490:	2301      	movs	r3, #1
 8000492:	2200      	movs	r2, #0
 8000494:	e792      	b.n	80003bc <__aeabi_fmul+0x19c>
 8000496:	003d      	movs	r5, r7
 8000498:	4646      	mov	r6, r8
 800049a:	4682      	mov	sl, r0
 800049c:	e767      	b.n	800036e <__aeabi_fmul+0x14e>
 800049e:	23ff      	movs	r3, #255	@ 0xff
 80004a0:	2200      	movs	r2, #0
 80004a2:	e78b      	b.n	80003bc <__aeabi_fmul+0x19c>
 80004a4:	2280      	movs	r2, #128	@ 0x80
 80004a6:	2500      	movs	r5, #0
 80004a8:	03d2      	lsls	r2, r2, #15
 80004aa:	e786      	b.n	80003ba <__aeabi_fmul+0x19a>
 80004ac:	003d      	movs	r5, r7
 80004ae:	431a      	orrs	r2, r3
 80004b0:	e783      	b.n	80003ba <__aeabi_fmul+0x19a>
 80004b2:	0192      	lsls	r2, r2, #6
 80004b4:	2300      	movs	r3, #0
 80004b6:	0a52      	lsrs	r2, r2, #9
 80004b8:	e780      	b.n	80003bc <__aeabi_fmul+0x19c>
 80004ba:	003d      	movs	r5, r7
 80004bc:	4646      	mov	r6, r8
 80004be:	e777      	b.n	80003b0 <__aeabi_fmul+0x190>
 80004c0:	002a      	movs	r2, r5
 80004c2:	2301      	movs	r3, #1
 80004c4:	407a      	eors	r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	2003      	movs	r0, #3
 80004ca:	b2d2      	uxtb	r2, r2
 80004cc:	e6e9      	b.n	80002a2 <__aeabi_fmul+0x82>
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	f7ffffff 	.word	0xf7ffffff

080004d4 <__aeabi_ui2f>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	1e04      	subs	r4, r0, #0
 80004d8:	d00d      	beq.n	80004f6 <__aeabi_ui2f+0x22>
 80004da:	f000 f841 	bl	8000560 <__clzsi2>
 80004de:	239e      	movs	r3, #158	@ 0x9e
 80004e0:	1a1b      	subs	r3, r3, r0
 80004e2:	2b96      	cmp	r3, #150	@ 0x96
 80004e4:	dc0c      	bgt.n	8000500 <__aeabi_ui2f+0x2c>
 80004e6:	2808      	cmp	r0, #8
 80004e8:	d034      	beq.n	8000554 <__aeabi_ui2f+0x80>
 80004ea:	3808      	subs	r0, #8
 80004ec:	4084      	lsls	r4, r0
 80004ee:	0264      	lsls	r4, r4, #9
 80004f0:	0a64      	lsrs	r4, r4, #9
 80004f2:	b2d8      	uxtb	r0, r3
 80004f4:	e001      	b.n	80004fa <__aeabi_ui2f+0x26>
 80004f6:	2000      	movs	r0, #0
 80004f8:	2400      	movs	r4, #0
 80004fa:	05c0      	lsls	r0, r0, #23
 80004fc:	4320      	orrs	r0, r4
 80004fe:	bd10      	pop	{r4, pc}
 8000500:	2b99      	cmp	r3, #153	@ 0x99
 8000502:	dc13      	bgt.n	800052c <__aeabi_ui2f+0x58>
 8000504:	1f42      	subs	r2, r0, #5
 8000506:	4094      	lsls	r4, r2
 8000508:	4a14      	ldr	r2, [pc, #80]	@ (800055c <__aeabi_ui2f+0x88>)
 800050a:	4022      	ands	r2, r4
 800050c:	0761      	lsls	r1, r4, #29
 800050e:	d01c      	beq.n	800054a <__aeabi_ui2f+0x76>
 8000510:	210f      	movs	r1, #15
 8000512:	4021      	ands	r1, r4
 8000514:	2904      	cmp	r1, #4
 8000516:	d018      	beq.n	800054a <__aeabi_ui2f+0x76>
 8000518:	3204      	adds	r2, #4
 800051a:	08d4      	lsrs	r4, r2, #3
 800051c:	0152      	lsls	r2, r2, #5
 800051e:	d515      	bpl.n	800054c <__aeabi_ui2f+0x78>
 8000520:	239f      	movs	r3, #159	@ 0x9f
 8000522:	0264      	lsls	r4, r4, #9
 8000524:	1a18      	subs	r0, r3, r0
 8000526:	0a64      	lsrs	r4, r4, #9
 8000528:	b2c0      	uxtb	r0, r0
 800052a:	e7e6      	b.n	80004fa <__aeabi_ui2f+0x26>
 800052c:	0002      	movs	r2, r0
 800052e:	0021      	movs	r1, r4
 8000530:	321b      	adds	r2, #27
 8000532:	4091      	lsls	r1, r2
 8000534:	000a      	movs	r2, r1
 8000536:	1e51      	subs	r1, r2, #1
 8000538:	418a      	sbcs	r2, r1
 800053a:	2105      	movs	r1, #5
 800053c:	1a09      	subs	r1, r1, r0
 800053e:	40cc      	lsrs	r4, r1
 8000540:	4314      	orrs	r4, r2
 8000542:	4a06      	ldr	r2, [pc, #24]	@ (800055c <__aeabi_ui2f+0x88>)
 8000544:	4022      	ands	r2, r4
 8000546:	0761      	lsls	r1, r4, #29
 8000548:	d1e2      	bne.n	8000510 <__aeabi_ui2f+0x3c>
 800054a:	08d4      	lsrs	r4, r2, #3
 800054c:	0264      	lsls	r4, r4, #9
 800054e:	0a64      	lsrs	r4, r4, #9
 8000550:	b2d8      	uxtb	r0, r3
 8000552:	e7d2      	b.n	80004fa <__aeabi_ui2f+0x26>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	308e      	adds	r0, #142	@ 0x8e
 800055a:	e7ce      	b.n	80004fa <__aeabi_ui2f+0x26>
 800055c:	fbffffff 	.word	0xfbffffff

08000560 <__clzsi2>:
 8000560:	211c      	movs	r1, #28
 8000562:	2301      	movs	r3, #1
 8000564:	041b      	lsls	r3, r3, #16
 8000566:	4298      	cmp	r0, r3
 8000568:	d301      	bcc.n	800056e <__clzsi2+0xe>
 800056a:	0c00      	lsrs	r0, r0, #16
 800056c:	3910      	subs	r1, #16
 800056e:	0a1b      	lsrs	r3, r3, #8
 8000570:	4298      	cmp	r0, r3
 8000572:	d301      	bcc.n	8000578 <__clzsi2+0x18>
 8000574:	0a00      	lsrs	r0, r0, #8
 8000576:	3908      	subs	r1, #8
 8000578:	091b      	lsrs	r3, r3, #4
 800057a:	4298      	cmp	r0, r3
 800057c:	d301      	bcc.n	8000582 <__clzsi2+0x22>
 800057e:	0900      	lsrs	r0, r0, #4
 8000580:	3904      	subs	r1, #4
 8000582:	a202      	add	r2, pc, #8	@ (adr r2, 800058c <__clzsi2+0x2c>)
 8000584:	5c10      	ldrb	r0, [r2, r0]
 8000586:	1840      	adds	r0, r0, r1
 8000588:	4770      	bx	lr
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	02020304 	.word	0x02020304
 8000590:	01010101 	.word	0x01010101
	...

0800059c <ADC_Module_Init>:
extern ADC_HandleTypeDef hadc;

static ADC_ChannelConfig_t *adcConfigs = NULL;
static uint8_t adcNumChannels = 0;

HAL_StatusTypeDef ADC_Module_Init(ADC_ChannelConfig_t *configs, uint8_t numChannels) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	000a      	movs	r2, r1
 80005a6:	1cfb      	adds	r3, r7, #3
 80005a8:	701a      	strb	r2, [r3, #0]
    adcConfigs = configs;
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <ADC_Module_Init+0x28>)
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	601a      	str	r2, [r3, #0]
    adcNumChannels = numChannels;
 80005b0:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <ADC_Module_Init+0x2c>)
 80005b2:	1cfa      	adds	r2, r7, #3
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	701a      	strb	r2, [r3, #0]
    // Assume HAL_ADC_Init(&hadc) was called by MX_ADC_Init()
    return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	20000028 	.word	0x20000028
 80005c8:	2000002c 	.word	0x2000002c

080005cc <ADC_Module_Poll>:

HAL_StatusTypeDef ADC_Module_Poll(float *outValues) {
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    ADC_ChannelConfTypeDef sConfig;

    for (uint8_t i = 0; i < adcNumChannels; i++) {
 80005d4:	231f      	movs	r3, #31
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e06f      	b.n	80006be <ADC_Module_Poll+0xf2>
        // Configure channel
        memset(&sConfig, 0, sizeof(sConfig));
 80005de:	240c      	movs	r4, #12
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	220c      	movs	r2, #12
 80005e4:	2100      	movs	r1, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f002 fc2c 	bl	8002e44 <memset>
        sConfig.Channel      = adcConfigs[i].channel;
 80005ec:	4b3a      	ldr	r3, [pc, #232]	@ (80006d8 <ADC_Module_Poll+0x10c>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	231f      	movs	r3, #31
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	18d3      	adds	r3, r2, r3
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	0021      	movs	r1, r4
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	601a      	str	r2, [r3, #0]
        sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2280      	movs	r2, #128	@ 0x80
 8000606:	0152      	lsls	r2, r2, #5
 8000608:	605a      	str	r2, [r3, #4]
        sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2201      	movs	r2, #1
 800060e:	609a      	str	r2, [r3, #8]

        ret = HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000610:	251e      	movs	r5, #30
 8000612:	197c      	adds	r4, r7, r5
 8000614:	187a      	adds	r2, r7, r1
 8000616:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <ADC_Module_Poll+0x110>)
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f000 ff82 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000620:	0003      	movs	r3, r0
 8000622:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8000624:	197b      	adds	r3, r7, r5
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <ADC_Module_Poll+0x66>
            return ret;
 800062c:	197b      	adds	r3, r7, r5
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	e04d      	b.n	80006ce <ADC_Module_Poll+0x102>
        }
        // Start conversion
        ret = HAL_ADC_Start(&hadc);
 8000632:	251e      	movs	r5, #30
 8000634:	197c      	adds	r4, r7, r5
 8000636:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <ADC_Module_Poll+0x110>)
 8000638:	0018      	movs	r0, r3
 800063a:	f000 fe3b 	bl	80012b4 <HAL_ADC_Start>
 800063e:	0003      	movs	r3, r0
 8000640:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8000642:	197b      	adds	r3, r7, r5
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <ADC_Module_Poll+0x84>
            return ret;
 800064a:	197b      	adds	r3, r7, r5
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	e03e      	b.n	80006ce <ADC_Module_Poll+0x102>
        }
        // Wait for conversion complete (timeout 10 ms)
        ret = HAL_ADC_PollForConversion(&hadc, 10);
 8000650:	251e      	movs	r5, #30
 8000652:	197c      	adds	r4, r7, r5
 8000654:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <ADC_Module_Poll+0x110>)
 8000656:	210a      	movs	r1, #10
 8000658:	0018      	movs	r0, r3
 800065a:	f000 febf 	bl	80013dc <HAL_ADC_PollForConversion>
 800065e:	0003      	movs	r3, r0
 8000660:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8000662:	197b      	adds	r3, r7, r5
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <ADC_Module_Poll+0xac>
            HAL_ADC_Stop(&hadc);
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <ADC_Module_Poll+0x110>)
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fe75 	bl	800135c <HAL_ADC_Stop>
            return ret;
 8000672:	197b      	adds	r3, r7, r5
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	e02a      	b.n	80006ce <ADC_Module_Poll+0x102>
        }
        uint32_t raw = HAL_ADC_GetValue(&hadc);
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <ADC_Module_Poll+0x110>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 ff46 	bl	800150c <HAL_ADC_GetValue>
 8000680:	0003      	movs	r3, r0
 8000682:	61bb      	str	r3, [r7, #24]
        // Scale and store
        outValues[i] = raw * adcConfigs[i].scale;
 8000684:	69b8      	ldr	r0, [r7, #24]
 8000686:	f7ff ff25 	bl	80004d4 <__aeabi_ui2f>
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <ADC_Module_Poll+0x10c>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	251f      	movs	r5, #31
 8000690:	197b      	adds	r3, r7, r5
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	18d3      	adds	r3, r2, r3
 8000698:	6859      	ldr	r1, [r3, #4]
 800069a:	197b      	adds	r3, r7, r5
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	18d4      	adds	r4, r2, r3
 80006a4:	f7ff fdbc 	bl	8000220 <__aeabi_fmul>
 80006a8:	1c03      	adds	r3, r0, #0
 80006aa:	6023      	str	r3, [r4, #0]
        // Stop ADC
        HAL_ADC_Stop(&hadc);
 80006ac:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <ADC_Module_Poll+0x110>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fe54 	bl	800135c <HAL_ADC_Stop>
    for (uint8_t i = 0; i < adcNumChannels; i++) {
 80006b4:	197b      	adds	r3, r7, r5
 80006b6:	781a      	ldrb	r2, [r3, #0]
 80006b8:	197b      	adds	r3, r7, r5
 80006ba:	3201      	adds	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <ADC_Module_Poll+0x114>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	221f      	movs	r2, #31
 80006c4:	18ba      	adds	r2, r7, r2
 80006c6:	7812      	ldrb	r2, [r2, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d388      	bcc.n	80005de <ADC_Module_Poll+0x12>
    }
    return HAL_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	0018      	movs	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b008      	add	sp, #32
 80006d4:	bdb0      	pop	{r4, r5, r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	20000028 	.word	0x20000028
 80006dc:	20000084 	.word	0x20000084
 80006e0:	2000002c 	.word	0x2000002c

080006e4 <CAN_Module_Init>:
static CanRxCbEntry_t rxCbs[MAX_CAN_RX_CALLBACKS];
static uint8_t rxCbCount = 0;

extern CAN_HandleTypeDef hcan;

HAL_StatusTypeDef CAN_Module_Init(void) {
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;
    // Start CAN peripheral
    ret = HAL_CAN_Start(&hcan);
 80006ea:	1dfc      	adds	r4, r7, #7
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <CAN_Module_Init+0x40>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fb57 	bl	8001da2 <HAL_CAN_Start>
 80006f4:	0003      	movs	r3, r0
 80006f6:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <CAN_Module_Init+0x22>
        return ret;
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	e009      	b.n	800071a <CAN_Module_Init+0x36>
    }
    // Enable RX FIFO0 message pending interrupt
    ret = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000706:	1dfc      	adds	r4, r7, #7
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <CAN_Module_Init+0x40>)
 800070a:	2102      	movs	r1, #2
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fc60 	bl	8001fd2 <HAL_CAN_ActivateNotification>
 8000712:	0003      	movs	r3, r0
 8000714:	7023      	strb	r3, [r4, #0]
    return ret;
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b003      	add	sp, #12
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	200000c4 	.word	0x200000c4

08000728 <CAN_Module_Send>:

HAL_StatusTypeDef CAN_Module_Send(uint32_t id, uint8_t *data, uint8_t length) {
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b08d      	sub	sp, #52	@ 0x34
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	701a      	strb	r2, [r3, #0]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;
    memset(&txHeader, 0, sizeof(txHeader));
 8000736:	2418      	movs	r4, #24
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2218      	movs	r2, #24
 800073c:	2100      	movs	r1, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f002 fb80 	bl	8002e44 <memset>
    txHeader.StdId = id;
 8000744:	0021      	movs	r1, r4
 8000746:	187b      	adds	r3, r7, r1
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	601a      	str	r2, [r3, #0]
    txHeader.IDE   = CAN_ID_STD;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
    txHeader.RTR   = CAN_RTR_DATA;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
    txHeader.DLC   = length;
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	187b      	adds	r3, r7, r1
 800075e:	611a      	str	r2, [r3, #16]
    return HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &txMailbox);
 8000760:	2314      	movs	r3, #20
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	1879      	adds	r1, r7, r1
 8000768:	4803      	ldr	r0, [pc, #12]	@ (8000778 <CAN_Module_Send+0x50>)
 800076a:	f001 fb60 	bl	8001e2e <HAL_CAN_AddTxMessage>
 800076e:	0003      	movs	r3, r0
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b00d      	add	sp, #52	@ 0x34
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	200000c4 	.word	0x200000c4

0800077c <CAN_Module_UpdateFilter>:

HAL_StatusTypeDef CAN_Module_UpdateFilter(CAN_FilterTypeDef *filterConfig) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    // Reconfigure CAN filter (bank 0 by default)
    return HAL_CAN_ConfigFilter(&hcan, filterConfig);
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <CAN_Module_UpdateFilter+0x20>)
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fa17 	bl	8001bbe <HAL_CAN_ConfigFilter>
 8000790:	0003      	movs	r3, r0
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	200000c4 	.word	0x200000c4

080007a0 <CAN_Module_RegisterRxCallback>:

void CAN_Module_RegisterRxCallback(uint32_t msgId, CanRxCallback_t callback) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
    if (rxCbCount < MAX_CAN_RX_CALLBACKS) {
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <CAN_Module_RegisterRxCallback+0x3c>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b09      	cmp	r3, #9
 80007b0:	d80f      	bhi.n	80007d2 <CAN_Module_RegisterRxCallback+0x32>
        rxCbs[rxCbCount++] = (CanRxCbEntry_t){ .msgId = msgId, .callback = callback };
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <CAN_Module_RegisterRxCallback+0x3c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	b2d1      	uxtb	r1, r2
 80007ba:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <CAN_Module_RegisterRxCallback+0x3c>)
 80007bc:	7011      	strb	r1, [r2, #0]
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <CAN_Module_RegisterRxCallback+0x40>)
 80007c0:	00d9      	lsls	r1, r3, #3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	5088      	str	r0, [r1, r2]
 80007c6:	4a06      	ldr	r2, [pc, #24]	@ (80007e0 <CAN_Module_RegisterRxCallback+0x40>)
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	18d3      	adds	r3, r2, r3
 80007cc:	3304      	adds	r3, #4
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	601a      	str	r2, [r3, #0]
    }
}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b004      	add	sp, #16
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	20000080 	.word	0x20000080
 80007e0:	20000030 	.word	0x20000030

080007e4 <ConfigRxCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ConfigRxCallback(CAN_RxHeaderTypeDef *header, uint8_t *data) {
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
    (void)header;
    uint8_t ch = data[0];
 80007ee:	240f      	movs	r4, #15
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	701a      	strb	r2, [r3, #0]
    if (ch < NUM_CHANNELS) {
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b07      	cmp	r3, #7
 80007fe:	d81a      	bhi.n	8000836 <ConfigRxCallback+0x52>
        // bytes 1-4: float scale
        float newScale;
        memcpy(&newScale, &data[1], sizeof(newScale));
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	1c59      	adds	r1, r3, #1
 8000804:	2308      	movs	r3, #8
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	2204      	movs	r2, #4
 800080a:	0018      	movs	r0, r3
 800080c:	f002 fb46 	bl	8002e9c <memcpy>
        adcConfigArray[ch].scale = newScale;
 8000810:	0020      	movs	r0, r4
 8000812:	183b      	adds	r3, r7, r0
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	4909      	ldr	r1, [pc, #36]	@ (8000840 <ConfigRxCallback+0x5c>)
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	18cb      	adds	r3, r1, r3
 800081e:	3304      	adds	r3, #4
 8000820:	601a      	str	r2, [r3, #0]
        // byte 5: enable flag
        adcEnabled[ch] = (data[5] != 0);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	3305      	adds	r3, #5
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	183b      	adds	r3, r7, r0
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	1e51      	subs	r1, r2, #1
 800082e:	418a      	sbcs	r2, r1
 8000830:	b2d1      	uxtb	r1, r2
 8000832:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <ConfigRxCallback+0x60>)
 8000834:	54d1      	strb	r1, [r2, r3]
    }
}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b005      	add	sp, #20
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	200000ec 	.word	0x200000ec
 8000844:	2000012c 	.word	0x2000012c

08000848 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b092      	sub	sp, #72	@ 0x48
 800084c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800084e:	f000 fb8d 	bl	8000f6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000852:	f000 f8dd 	bl	8000a10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000856:	f000 fa15 	bl	8000c84 <MX_GPIO_Init>
	MX_ADC_Init();
 800085a:	f000 f927 	bl	8000aac <MX_ADC_Init>
	MX_CAN_Init();
 800085e:	f000 f9db 	bl	8000c18 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */
	// Initialize per-channel config: default scale=1.0, enabled
	  for (uint8_t i = 0; i < NUM_CHANNELS; i++) {
 8000862:	2347      	movs	r3, #71	@ 0x47
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e01c      	b.n	80008a6 <main+0x5e>
	      adcConfigArray[i].channel = ADC_CHANNEL_0 + i;
 800086c:	2047      	movs	r0, #71	@ 0x47
 800086e:	183b      	adds	r3, r7, r0
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	183b      	adds	r3, r7, r0
 8000874:	7819      	ldrb	r1, [r3, #0]
 8000876:	4b5f      	ldr	r3, [pc, #380]	@ (80009f4 <main+0x1ac>)
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	50d1      	str	r1, [r2, r3]
	      adcConfigArray[i].scale   = 1.0f;
 800087c:	0001      	movs	r1, r0
 800087e:	187b      	adds	r3, r7, r1
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4a5c      	ldr	r2, [pc, #368]	@ (80009f4 <main+0x1ac>)
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	18d3      	adds	r3, r2, r3
 8000888:	3304      	adds	r3, #4
 800088a:	22fe      	movs	r2, #254	@ 0xfe
 800088c:	0592      	lsls	r2, r2, #22
 800088e:	601a      	str	r2, [r3, #0]
	      adcEnabled[i]             = true;
 8000890:	0008      	movs	r0, r1
 8000892:	187b      	adds	r3, r7, r1
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4a58      	ldr	r2, [pc, #352]	@ (80009f8 <main+0x1b0>)
 8000898:	2101      	movs	r1, #1
 800089a:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t i = 0; i < NUM_CHANNELS; i++) {
 800089c:	183b      	adds	r3, r7, r0
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	183b      	adds	r3, r7, r0
 80008a2:	3201      	adds	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	2347      	movs	r3, #71	@ 0x47
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b07      	cmp	r3, #7
 80008ae:	d9dd      	bls.n	800086c <main+0x24>
	  }

	  // Init modules
	    if (ADC_Module_Init(adcConfigArray, NUM_CHANNELS) != HAL_OK) {
 80008b0:	4b50      	ldr	r3, [pc, #320]	@ (80009f4 <main+0x1ac>)
 80008b2:	2108      	movs	r1, #8
 80008b4:	0018      	movs	r0, r3
 80008b6:	f7ff fe71 	bl	800059c <ADC_Module_Init>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <main+0x7a>
	        Error_Handler();
 80008be:	f000 fa37 	bl	8000d30 <Error_Handler>
	    }
	    if (CAN_Module_Init() != HAL_OK) {
 80008c2:	f7ff ff0f 	bl	80006e4 <CAN_Module_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <main+0x86>
	        Error_Handler();
 80008ca:	f000 fa31 	bl	8000d30 <Error_Handler>
	    }

	    // Configure filter to accept configuration messages at CAN_CONFIG_MSG_ID
	      CAN_FilterTypeDef filterConfig;
	      filterConfig.FilterBank           = 0;
 80008ce:	2114      	movs	r1, #20
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
	      filterConfig.FilterMode           = CAN_FILTERMODE_IDMASK;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
	      filterConfig.FilterScale          = CAN_FILTERSCALE_32BIT;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2201      	movs	r2, #1
 80008e0:	61da      	str	r2, [r3, #28]
	      filterConfig.FilterIdHigh         = (CAN_CONFIG_MSG_ID << 5) & 0xFFFF;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	01d2      	lsls	r2, r2, #7
 80008e8:	601a      	str	r2, [r3, #0]
	      filterConfig.FilterIdLow          = 0;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
	      filterConfig.FilterMaskIdHigh     = 0xFFFF;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	4a42      	ldr	r2, [pc, #264]	@ (80009fc <main+0x1b4>)
 80008f4:	609a      	str	r2, [r3, #8]
	      filterConfig.FilterMaskIdLow      = 0x0000;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
	      filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
	      filterConfig.FilterActivation     = ENABLE;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2201      	movs	r2, #1
 8000906:	621a      	str	r2, [r3, #32]
	      if (CAN_Module_UpdateFilter(&filterConfig) != HAL_OK) {
 8000908:	187b      	adds	r3, r7, r1
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff ff36 	bl	800077c <CAN_Module_UpdateFilter>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <main+0xd0>
	          Error_Handler();
 8000914:	f000 fa0c 	bl	8000d30 <Error_Handler>
	      }
	      // Register RX callback for config
	      CAN_Module_RegisterRxCallback(CAN_CONFIG_MSG_ID, ConfigRxCallback);
 8000918:	4a39      	ldr	r2, [pc, #228]	@ (8000a00 <main+0x1b8>)
 800091a:	2380      	movs	r3, #128	@ 0x80
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff ff3d 	bl	80007a0 <CAN_Module_RegisterRxCallback>
	      lastCanTick = HAL_GetTick();
 8000926:	f000 fb7b 	bl	8001020 <HAL_GetTick>
 800092a:	0002      	movs	r2, r0
 800092c:	4b35      	ldr	r3, [pc, #212]	@ (8000a04 <main+0x1bc>)
 800092e:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		uint32_t now = HAL_GetTick();
 8000930:	f000 fb76 	bl	8001020 <HAL_GetTick>
 8000934:	0003      	movs	r3, r0
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
		if ((now - lastCanTick) >= CAN_SEND_INTERVAL_MS) {
 8000938:	4b32      	ldr	r3, [pc, #200]	@ (8000a04 <main+0x1bc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	2b63      	cmp	r3, #99	@ 0x63
 8000942:	d9f5      	bls.n	8000930 <main+0xe8>
			lastCanTick = now;
 8000944:	4b2f      	ldr	r3, [pc, #188]	@ (8000a04 <main+0x1bc>)
 8000946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000948:	601a      	str	r2, [r3, #0]
			// Poll all ADC channels
			if (ADC_Module_Poll(adcValues) == HAL_OK) {
 800094a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a08 <main+0x1c0>)
 800094c:	0018      	movs	r0, r3
 800094e:	f7ff fe3d 	bl	80005cc <ADC_Module_Poll>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d1ec      	bne.n	8000930 <main+0xe8>
				// Send two channels per CAN message (float = 4 bytes)
				for (uint8_t idx = 0; idx < NUM_CHANNELS; idx += 2) {
 8000956:	2346      	movs	r3, #70	@ 0x46
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e042      	b.n	80009e6 <main+0x19e>
					uint32_t msgId = CAN_MSG_BASE_ID + (idx >> 1);
 8000960:	2246      	movs	r2, #70	@ 0x46
 8000962:	18bb      	adds	r3, r7, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	33ff      	adds	r3, #255	@ 0xff
 800096e:	63fb      	str	r3, [r7, #60]	@ 0x3c
					float v0 = adcEnabled[idx] ? adcValues[idx] : NAN;
 8000970:	0011      	movs	r1, r2
 8000972:	18bb      	adds	r3, r7, r2
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4a20      	ldr	r2, [pc, #128]	@ (80009f8 <main+0x1b0>)
 8000978:	5cd3      	ldrb	r3, [r2, r3]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <main+0x142>
 800097e:	187b      	adds	r3, r7, r1
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <main+0x1c0>)
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	58d3      	ldr	r3, [r2, r3]
 8000988:	e000      	b.n	800098c <main+0x144>
 800098a:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <main+0x1c4>)
 800098c:	613b      	str	r3, [r7, #16]
					float v1 = adcEnabled[idx + 1] ? adcValues[idx + 1] : NAN;
 800098e:	2146      	movs	r1, #70	@ 0x46
 8000990:	187b      	adds	r3, r7, r1
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <main+0x1b0>)
 8000998:	5cd3      	ldrb	r3, [r2, r3]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d006      	beq.n	80009ac <main+0x164>
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <main+0x1c0>)
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	58d3      	ldr	r3, [r2, r3]
 80009aa:	e000      	b.n	80009ae <main+0x166>
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <main+0x1c4>)
 80009ae:	60fb      	str	r3, [r7, #12]
					uint8_t buf[8];
					memcpy(&buf[0], &v0, sizeof(v0));
 80009b0:	2310      	movs	r3, #16
 80009b2:	18f9      	adds	r1, r7, r3
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2204      	movs	r2, #4
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 fa6f 	bl	8002e9c <memcpy>
					memcpy(&buf[4], &v1, sizeof(v1));
 80009be:	230c      	movs	r3, #12
 80009c0:	18f9      	adds	r1, r7, r3
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	3304      	adds	r3, #4
 80009c6:	2204      	movs	r2, #4
 80009c8:	0018      	movs	r0, r3
 80009ca:	f002 fa67 	bl	8002e9c <memcpy>
					CAN_Module_Send(msgId, buf, 8);
 80009ce:	1d39      	adds	r1, r7, #4
 80009d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009d2:	2208      	movs	r2, #8
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fea7 	bl	8000728 <CAN_Module_Send>
				for (uint8_t idx = 0; idx < NUM_CHANNELS; idx += 2) {
 80009da:	2246      	movs	r2, #70	@ 0x46
 80009dc:	18bb      	adds	r3, r7, r2
 80009de:	18ba      	adds	r2, r7, r2
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	3202      	adds	r2, #2
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	2346      	movs	r3, #70	@ 0x46
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	d9b7      	bls.n	8000960 <main+0x118>
	while (1) {
 80009f0:	e79e      	b.n	8000930 <main+0xe8>
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	200000ec 	.word	0x200000ec
 80009f8:	2000012c 	.word	0x2000012c
 80009fc:	0000ffff 	.word	0x0000ffff
 8000a00:	080007e5 	.word	0x080007e5
 8000a04:	20000154 	.word	0x20000154
 8000a08:	20000134 	.word	0x20000134
 8000a0c:	7fc00000 	.word	0x7fc00000

08000a10 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b093      	sub	sp, #76	@ 0x4c
 8000a14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a16:	2414      	movs	r4, #20
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2334      	movs	r3, #52	@ 0x34
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f002 fa0f 	bl	8002e44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f002 fa08 	bl	8002e44 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14
 8000a34:	0021      	movs	r1, r4
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2211      	movs	r2, #17
 8000a3a:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2201      	movs	r2, #1
 8000a46:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2202      	movs	r2, #2
 8000a52:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2280      	movs	r2, #128	@ 0x80
 8000a58:	0252      	lsls	r2, r2, #9
 8000a5a:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2280      	movs	r2, #128	@ 0x80
 8000a60:	02d2      	lsls	r2, r2, #11
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f001 fd15 	bl	800249c <HAL_RCC_OscConfig>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x6a>
		Error_Handler();
 8000a76:	f000 f95b 	bl	8000d30 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2202      	movs	r2, #2
 8000a84:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2101      	movs	r1, #1
 8000a96:	0018      	movs	r0, r3
 8000a98:	f002 f886 	bl	8002ba8 <HAL_RCC_ClockConfig>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x94>
		Error_Handler();
 8000aa0:	f000 f946 	bl	8000d30 <Error_Handler>
	}
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b013      	add	sp, #76	@ 0x4c
 8000aaa:	bd90      	pop	{r4, r7, pc}

08000aac <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	001a      	movs	r2, r3
 8000aba:	2100      	movs	r1, #0
 8000abc:	f002 f9c2 	bl	8002e44 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8000ac0:	4b53      	ldr	r3, [pc, #332]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000ac2:	4a54      	ldr	r2, [pc, #336]	@ (8000c14 <MX_ADC_Init+0x168>)
 8000ac4:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac6:	4b52      	ldr	r3, [pc, #328]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000acc:	4b50      	ldr	r3, [pc, #320]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ade:	4b4c      	ldr	r3, [pc, #304]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000aea:	4b49      	ldr	r3, [pc, #292]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000af0:	4b47      	ldr	r3, [pc, #284]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000af6:	4b46      	ldr	r3, [pc, #280]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afc:	4b44      	ldr	r3, [pc, #272]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000afe:	22c2      	movs	r2, #194	@ 0xc2
 8000b00:	32ff      	adds	r2, #255	@ 0xff
 8000b02:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b04:	4b42      	ldr	r3, [pc, #264]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000b0a:	4b41      	ldr	r3, [pc, #260]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000b0c:	2224      	movs	r2, #36	@ 0x24
 8000b0e:	2100      	movs	r1, #0
 8000b10:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b12:	4b3f      	ldr	r3, [pc, #252]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000b18:	4b3d      	ldr	r3, [pc, #244]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fa8a 	bl	8001034 <HAL_ADC_Init>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC_Init+0x7c>
		Error_Handler();
 8000b24:	f000 f904 	bl	8000d30 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2280      	movs	r2, #128	@ 0x80
 8000b32:	0152      	lsls	r2, r2, #5
 8000b34:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2280      	movs	r2, #128	@ 0x80
 8000b3a:	0552      	lsls	r2, r2, #21
 8000b3c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b3e:	1d3a      	adds	r2, r7, #4
 8000b40:	4b33      	ldr	r3, [pc, #204]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 fced 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC_Init+0xa6>
		Error_Handler();
 8000b4e:	f000 f8ef 	bl	8000d30 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2201      	movs	r2, #1
 8000b56:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b58:	1d3a      	adds	r2, r7, #4
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fce0 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC_Init+0xc0>
		Error_Handler();
 8000b68:	f000 f8e2 	bl	8000d30 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2202      	movs	r2, #2
 8000b70:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b72:	1d3a      	adds	r2, r7, #4
 8000b74:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 fcd3 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <MX_ADC_Init+0xda>
		Error_Handler();
 8000b82:	f000 f8d5 	bl	8000d30 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2203      	movs	r2, #3
 8000b8a:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b8c:	1d3a      	adds	r2, r7, #4
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 fcc6 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC_Init+0xf4>
		Error_Handler();
 8000b9c:	f000 f8c8 	bl	8000d30 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000ba6:	1d3a      	adds	r2, r7, #4
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fcb9 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC_Init+0x10e>
		Error_Handler();
 8000bb6:	f000 f8bb 	bl	8000d30 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000bc0:	1d3a      	adds	r2, r7, #4
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 fcac 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000bcc:	1e03      	subs	r3, r0, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC_Init+0x128>
		Error_Handler();
 8000bd0:	f000 f8ae 	bl	8000d30 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2206      	movs	r2, #6
 8000bd8:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000bda:	1d3a      	adds	r2, r7, #4
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 fc9f 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC_Init+0x142>
		Error_Handler();
 8000bea:	f000 f8a1 	bl	8000d30 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000bf4:	1d3a      	adds	r2, r7, #4
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <MX_ADC_Init+0x164>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fc92 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC_Init+0x15c>
		Error_Handler();
 8000c04:	f000 f894 	bl	8000d30 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b004      	add	sp, #16
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000084 	.word	0x20000084
 8000c14:	40012400 	.word	0x40012400

08000c18 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c1e:	4a18      	ldr	r2, [pc, #96]	@ (8000c80 <MX_CAN_Init+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8000c22:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c24:	2210      	movs	r2, #16
 8000c26:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000c46:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <MX_CAN_Init+0x64>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 feab 	bl	80019c2 <HAL_CAN_Init>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_CAN_Init+0x5c>
		Error_Handler();
 8000c70:	f000 f85e 	bl	8000d30 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	200000c4 	.word	0x200000c4
 8000c80:	40006400 	.word	0x40006400

08000c84 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b089      	sub	sp, #36	@ 0x24
 8000c88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c8a:	240c      	movs	r4, #12
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2314      	movs	r3, #20
 8000c92:	001a      	movs	r2, r3
 8000c94:	2100      	movs	r1, #0
 8000c96:	f002 f8d5 	bl	8002e44 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9a:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000ca0:	2180      	movs	r1, #128	@ 0x80
 8000ca2:	03c9      	lsls	r1, r1, #15
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	615a      	str	r2, [r3, #20]
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000caa:	695a      	ldr	r2, [r3, #20]
 8000cac:	2380      	movs	r3, #128	@ 0x80
 8000cae:	03db      	lsls	r3, r3, #15
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cb8:	695a      	ldr	r2, [r3, #20]
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	0289      	lsls	r1, r1, #10
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	615a      	str	r2, [r3, #20]
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cc6:	695a      	ldr	r2, [r3, #20]
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	029b      	lsls	r3, r3, #10
 8000ccc:	4013      	ands	r3, r2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cd4:	695a      	ldr	r2, [r3, #20]
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000cd8:	2180      	movs	r1, #128	@ 0x80
 8000cda:	02c9      	lsls	r1, r1, #11
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_GPIO_Init+0xa4>)
 8000ce2:	695a      	ldr	r2, [r3, #20]
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	02db      	lsls	r3, r3, #11
 8000ce8:	4013      	ands	r3, r2
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <MX_GPIO_Init+0xa8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2113      	movs	r1, #19
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f001 fbb3 	bl	8002460 <HAL_GPIO_WritePin>
			LED_STATUS_1_Pin | LED_STATUS_2_Pin | CAN_STANDBY_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED_STATUS_1_Pin LED_STATUS_2_Pin CAN_STANDBY_Pin */
	GPIO_InitStruct.Pin = LED_STATUS_1_Pin | LED_STATUS_2_Pin | CAN_STANDBY_Pin;
 8000cfa:	0021      	movs	r1, r4
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2213      	movs	r2, #19
 8000d00:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2201      	movs	r2, #1
 8000d06:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <MX_GPIO_Init+0xa8>)
 8000d18:	0019      	movs	r1, r3
 8000d1a:	0010      	movs	r0, r2
 8000d1c:	f001 fa38 	bl	8002190 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d20:	46c0      	nop			@ (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b009      	add	sp, #36	@ 0x24
 8000d26:	bd90      	pop	{r4, r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48000400 	.word	0x48000400

08000d30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d48:	2101      	movs	r1, #1
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	619a      	str	r2, [r3, #24]
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	2201      	movs	r2, #1
 8000d54:	4013      	ands	r3, r2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d5c:	69da      	ldr	r2, [r3, #28]
 8000d5e:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d60:	2180      	movs	r1, #128	@ 0x80
 8000d62:	0549      	lsls	r1, r1, #21
 8000d64:	430a      	orrs	r2, r1
 8000d66:	61da      	str	r2, [r3, #28]
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d6a:	69da      	ldr	r2, [r3, #28]
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	055b      	lsls	r3, r3, #21
 8000d70:	4013      	ands	r3, r2
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b08b      	sub	sp, #44	@ 0x2c
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	2414      	movs	r4, #20
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	0018      	movs	r0, r3
 8000d92:	2314      	movs	r3, #20
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f002 f854 	bl	8002e44 <memset>
  if(hadc->Instance==ADC1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	@ (8000e08 <HAL_ADC_MspInit+0x84>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12b      	bne.n	8000dfe <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_ADC_MspInit+0x88>)
 8000da8:	699a      	ldr	r2, [r3, #24]
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <HAL_ADC_MspInit+0x88>)
 8000dac:	2180      	movs	r1, #128	@ 0x80
 8000dae:	0089      	lsls	r1, r1, #2
 8000db0:	430a      	orrs	r2, r1
 8000db2:	619a      	str	r2, [r3, #24]
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_ADC_MspInit+0x88>)
 8000db6:	699a      	ldr	r2, [r3, #24]
 8000db8:	2380      	movs	r3, #128	@ 0x80
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_ADC_MspInit+0x88>)
 8000dc4:	695a      	ldr	r2, [r3, #20]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <HAL_ADC_MspInit+0x88>)
 8000dc8:	2180      	movs	r1, #128	@ 0x80
 8000dca:	0289      	lsls	r1, r1, #10
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	615a      	str	r2, [r3, #20]
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_ADC_MspInit+0x88>)
 8000dd2:	695a      	ldr	r2, [r3, #20]
 8000dd4:	2380      	movs	r3, #128	@ 0x80
 8000dd6:	029b      	lsls	r3, r3, #10
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	22ff      	movs	r2, #255	@ 0xff
 8000de2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	2203      	movs	r2, #3
 8000de8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	193a      	adds	r2, r7, r4
 8000df2:	2390      	movs	r3, #144	@ 0x90
 8000df4:	05db      	lsls	r3, r3, #23
 8000df6:	0011      	movs	r1, r2
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 f9c9 	bl	8002190 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b00b      	add	sp, #44	@ 0x2c
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	40012400 	.word	0x40012400
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b08b      	sub	sp, #44	@ 0x2c
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	2414      	movs	r4, #20
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	2314      	movs	r3, #20
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f002 f80e 	bl	8002e44 <memset>
  if(hcan->Instance==CAN)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea4 <HAL_CAN_MspInit+0x94>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d133      	bne.n	8000e9a <HAL_CAN_MspInit+0x8a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e34:	69da      	ldr	r2, [r3, #28]
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	0489      	lsls	r1, r1, #18
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	61da      	str	r2, [r3, #28]
 8000e40:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e42:	69da      	ldr	r2, [r3, #28]
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	049b      	lsls	r3, r3, #18
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e54:	2180      	movs	r1, #128	@ 0x80
 8000e56:	0289      	lsls	r1, r1, #10
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	2380      	movs	r3, #128	@ 0x80
 8000e62:	029b      	lsls	r3, r3, #10
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	22c0      	movs	r2, #192	@ 0xc0
 8000e6e:	0152      	lsls	r2, r2, #5
 8000e70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	0021      	movs	r1, r4
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2202      	movs	r2, #2
 8000e78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2203      	movs	r2, #3
 8000e84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2204      	movs	r2, #4
 8000e8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	187a      	adds	r2, r7, r1
 8000e8e:	2390      	movs	r3, #144	@ 0x90
 8000e90:	05db      	lsls	r3, r3, #23
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f001 f97b 	bl	8002190 <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b00b      	add	sp, #44	@ 0x2c
 8000ea0:	bd90      	pop	{r4, r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	40006400 	.word	0x40006400
 8000ea8:	40021000 	.word	0x40021000

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb0:	46c0      	nop			@ (mov r8, r8)
 8000eb2:	e7fd      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	e7fd      	b.n	8000eb8 <HardFault_Handler+0x4>

08000ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f892 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	46c0      	nop			@ (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee8:	4813      	ldr	r0, [pc, #76]	@ (8000f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eec:	f7ff fff7 	bl	8000ede <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000ef0:	4812      	ldr	r0, [pc, #72]	@ (8000f3c <LoopForever+0x6>)
    LDR R1, [R0]
 8000ef2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ef4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <LoopForever+0xa>)
    CMP R1, R2
 8000ef8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000efa:	d105      	bne.n	8000f08 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000efc:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000efe:	4912      	ldr	r1, [pc, #72]	@ (8000f48 <LoopForever+0x12>)
    STR R1, [R0]
 8000f00:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000f02:	4812      	ldr	r0, [pc, #72]	@ (8000f4c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000f04:	4912      	ldr	r1, [pc, #72]	@ (8000f50 <LoopForever+0x1a>)
    STR R1, [R0]
 8000f06:	6001      	str	r1, [r0, #0]

08000f08 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	4812      	ldr	r0, [pc, #72]	@ (8000f54 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000f0a:	4913      	ldr	r1, [pc, #76]	@ (8000f58 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000f0c:	4a13      	ldr	r2, [pc, #76]	@ (8000f5c <LoopForever+0x26>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000f20:	4c10      	ldr	r4, [pc, #64]	@ (8000f64 <LoopForever+0x2e>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f2e:	f001 ff91 	bl	8002e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f32:	f7ff fc89 	bl	8000848 <main>

08000f36 <LoopForever>:

LoopForever:
    b LoopForever
 8000f36:	e7fe      	b.n	8000f36 <LoopForever>
  ldr   r0, =_estack
 8000f38:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000f3c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000f40:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000f44:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000f48:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f4c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f50:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f5c:	08002f00 	.word	0x08002f00
  ldr r2, =_sbss
 8000f60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f64:	2000015c 	.word	0x2000015c

08000f68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC1_IRQHandler>
	...

08000f6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <HAL_Init+0x24>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_Init+0x24>)
 8000f76:	2110      	movs	r1, #16
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f809 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f82:	f7ff fedb 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	40022000 	.word	0x40022000

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <HAL_InitTick+0x5c>)
 8000f9e:	681c      	ldr	r4, [r3, #0]
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <HAL_InitTick+0x60>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	23fa      	movs	r3, #250	@ 0xfa
 8000fa8:	0098      	lsls	r0, r3, #2
 8000faa:	f7ff f8ad 	bl	8000108 <__udivsi3>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	0020      	movs	r0, r4
 8000fb4:	f7ff f8a8 	bl	8000108 <__udivsi3>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f001 f8db 	bl	8002176 <HAL_SYSTICK_Config>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e00f      	b.n	8000fe8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d80b      	bhi.n	8000fe6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f001 f8b8 	bl	800214c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_InitTick+0x64>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b003      	add	sp, #12
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	@ (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	18d2      	adds	r2, r2, r3
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <HAL_IncTick+0x20>)
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	20000008 	.word	0x20000008
 800101c:	20000158 	.word	0x20000158

08001020 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	@ (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	20000158 	.word	0x20000158

08001034 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e125      	b.n	800129e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2234      	movs	r2, #52	@ 0x34
 8001064:	2100      	movs	r1, #0
 8001066:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff fe8a 	bl	8000d84 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001074:	2210      	movs	r2, #16
 8001076:	4013      	ands	r3, r2
 8001078:	d000      	beq.n	800107c <HAL_ADC_Init+0x48>
 800107a:	e103      	b.n	8001284 <HAL_ADC_Init+0x250>
 800107c:	230f      	movs	r3, #15
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d000      	beq.n	8001088 <HAL_ADC_Init+0x54>
 8001086:	e0fd      	b.n	8001284 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2204      	movs	r2, #4
 8001090:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001092:	d000      	beq.n	8001096 <HAL_ADC_Init+0x62>
 8001094:	e0f6      	b.n	8001284 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800109a:	4a83      	ldr	r2, [pc, #524]	@ (80012a8 <HAL_ADC_Init+0x274>)
 800109c:	4013      	ands	r3, r2
 800109e:	2202      	movs	r2, #2
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d112      	bne.n	80010da <HAL_ADC_Init+0xa6>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d009      	beq.n	80010d6 <HAL_ADC_Init+0xa2>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	401a      	ands	r2, r3
 80010ce:	2380      	movs	r3, #128	@ 0x80
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d101      	bne.n	80010da <HAL_ADC_Init+0xa6>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_ADC_Init+0xa8>
 80010da:	2300      	movs	r3, #0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d116      	bne.n	800110e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2218      	movs	r2, #24
 80010e8:	4393      	bics	r3, r2
 80010ea:	0019      	movs	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	0899      	lsrs	r1, r3, #2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4964      	ldr	r1, [pc, #400]	@ (80012ac <HAL_ADC_Init+0x278>)
 800111a:	400a      	ands	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7e1b      	ldrb	r3, [r3, #24]
 8001122:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e5b      	ldrb	r3, [r3, #25]
 8001128:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800112a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e9b      	ldrb	r3, [r3, #26]
 8001130:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001132:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001138:	2b01      	cmp	r3, #1
 800113a:	d002      	beq.n	8001142 <HAL_ADC_Init+0x10e>
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	015b      	lsls	r3, r3, #5
 8001140:	e000      	b.n	8001144 <HAL_ADC_Init+0x110>
 8001142:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001144:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800114a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d101      	bne.n	8001158 <HAL_ADC_Init+0x124>
 8001154:	2304      	movs	r3, #4
 8001156:	e000      	b.n	800115a <HAL_ADC_Init+0x126>
 8001158:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800115a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2124      	movs	r1, #36	@ 0x24
 8001160:	5c5b      	ldrb	r3, [r3, r1]
 8001162:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001164:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	4313      	orrs	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7edb      	ldrb	r3, [r3, #27]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d115      	bne.n	80011a0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7e9b      	ldrb	r3, [r3, #26]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2280      	movs	r2, #128	@ 0x80
 8001180:	0252      	lsls	r2, r2, #9
 8001182:	4313      	orrs	r3, r2
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	e00b      	b.n	80011a0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118c:	2220      	movs	r2, #32
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001198:	2201      	movs	r2, #1
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69da      	ldr	r2, [r3, #28]
 80011a4:	23c2      	movs	r3, #194	@ 0xc2
 80011a6:	33ff      	adds	r3, #255	@ 0xff
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d007      	beq.n	80011bc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011b4:	4313      	orrs	r3, r2
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68d9      	ldr	r1, [r3, #12]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011d0:	2380      	movs	r3, #128	@ 0x80
 80011d2:	055b      	lsls	r3, r3, #21
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d01b      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d017      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d013      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d00f      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d00b      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d007      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	2b06      	cmp	r3, #6
 8001206:	d003      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800120c:	2b07      	cmp	r3, #7
 800120e:	d112      	bne.n	8001236 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2107      	movs	r1, #7
 800121c:	438a      	bics	r2, r1
 800121e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6959      	ldr	r1, [r3, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122a:	2207      	movs	r2, #7
 800122c:	401a      	ands	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <HAL_ADC_Init+0x27c>)
 800123e:	4013      	ands	r3, r2
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	d10b      	bne.n	800125e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001250:	2203      	movs	r2, #3
 8001252:	4393      	bics	r3, r2
 8001254:	2201      	movs	r2, #1
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800125c:	e01c      	b.n	8001298 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001262:	2212      	movs	r2, #18
 8001264:	4393      	bics	r3, r2
 8001266:	2210      	movs	r2, #16
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001272:	2201      	movs	r2, #1
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800127a:	230f      	movs	r3, #15
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001282:	e009      	b.n	8001298 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001288:	2210      	movs	r2, #16
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001290:	230f      	movs	r3, #15
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001298:	230f      	movs	r3, #15
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	781b      	ldrb	r3, [r3, #0]
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b004      	add	sp, #16
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	fffffefd 	.word	0xfffffefd
 80012ac:	fffe0219 	.word	0xfffe0219
 80012b0:	833fffe7 	.word	0x833fffe7

080012b4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012bc:	230f      	movs	r3, #15
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2204      	movs	r2, #4
 80012cc:	4013      	ands	r3, r2
 80012ce:	d138      	bne.n	8001342 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2234      	movs	r2, #52	@ 0x34
 80012d4:	5c9b      	ldrb	r3, [r3, r2]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <HAL_ADC_Start+0x2a>
 80012da:	2302      	movs	r3, #2
 80012dc:	e038      	b.n	8001350 <HAL_ADC_Start+0x9c>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2234      	movs	r2, #52	@ 0x34
 80012e2:	2101      	movs	r1, #1
 80012e4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7e5b      	ldrb	r3, [r3, #25]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d007      	beq.n	80012fe <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80012ee:	230f      	movs	r3, #15
 80012f0:	18fc      	adds	r4, r7, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f000 fa23 	bl	8001740 <ADC_Enable>
 80012fa:	0003      	movs	r3, r0
 80012fc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012fe:	230f      	movs	r3, #15
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d120      	bne.n	800134a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800130c:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <HAL_ADC_Start+0xa4>)
 800130e:	4013      	ands	r3, r2
 8001310:	2280      	movs	r2, #128	@ 0x80
 8001312:	0052      	lsls	r2, r2, #1
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2234      	movs	r2, #52	@ 0x34
 8001324:	2100      	movs	r1, #0
 8001326:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	221c      	movs	r2, #28
 800132e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2104      	movs	r1, #4
 800133c:	430a      	orrs	r2, r1
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	e003      	b.n	800134a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001342:	230f      	movs	r3, #15
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800134a:	230f      	movs	r3, #15
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	781b      	ldrb	r3, [r3, #0]
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b005      	add	sp, #20
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	fffff0fe 	.word	0xfffff0fe

0800135c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 800135c:	b5b0      	push	{r4, r5, r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001364:	230f      	movs	r3, #15
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2234      	movs	r2, #52	@ 0x34
 8001370:	5c9b      	ldrb	r3, [r3, r2]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_ADC_Stop+0x1e>
 8001376:	2302      	movs	r3, #2
 8001378:	e029      	b.n	80013ce <HAL_ADC_Stop+0x72>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2234      	movs	r2, #52	@ 0x34
 800137e:	2101      	movs	r1, #1
 8001380:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001382:	250f      	movs	r5, #15
 8001384:	197c      	adds	r4, r7, r5
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0018      	movs	r0, r3
 800138a:	f000 face 	bl	800192a <ADC_ConversionStop>
 800138e:	0003      	movs	r3, r0
 8001390:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001392:	197b      	adds	r3, r7, r5
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d112      	bne.n	80013c0 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800139a:	197c      	adds	r4, r7, r5
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 fa52 	bl	8001848 <ADC_Disable>
 80013a4:	0003      	movs	r3, r0
 80013a6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80013a8:	197b      	adds	r3, r7, r5
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d107      	bne.n	80013c0 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b4:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <HAL_ADC_Stop+0x7c>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	2201      	movs	r2, #1
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2234      	movs	r2, #52	@ 0x34
 80013c4:	2100      	movs	r1, #0
 80013c6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013c8:	230f      	movs	r3, #15
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	781b      	ldrb	r3, [r3, #0]
}
 80013ce:	0018      	movs	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bdb0      	pop	{r4, r5, r7, pc}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	fffffefe 	.word	0xfffffefe

080013dc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d102      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80013ee:	2308      	movs	r3, #8
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e014      	b.n	800141e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d10b      	bne.n	800141a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001406:	2220      	movs	r2, #32
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2234      	movs	r2, #52	@ 0x34
 8001412:	2100      	movs	r1, #0
 8001414:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e071      	b.n	80014fe <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800141a:	230c      	movs	r3, #12
 800141c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800141e:	f7ff fdff 	bl	8001020 <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001426:	e01f      	b.n	8001468 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	d01c      	beq.n	8001468 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <HAL_ADC_PollForConversion+0x68>
 8001434:	f7ff fdf4 	bl	8001020 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d211      	bcs.n	8001468 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	d10b      	bne.n	8001468 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001454:	2204      	movs	r2, #4
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2234      	movs	r2, #52	@ 0x34
 8001460:	2100      	movs	r1, #0
 8001462:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e04a      	b.n	80014fe <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	d0d9      	beq.n	8001428 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	23c0      	movs	r3, #192	@ 0xc0
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	4013      	ands	r3, r2
 800148e:	d12d      	bne.n	80014ec <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001494:	2b00      	cmp	r3, #0
 8001496:	d129      	bne.n	80014ec <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2208      	movs	r2, #8
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d122      	bne.n	80014ec <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2204      	movs	r2, #4
 80014ae:	4013      	ands	r3, r2
 80014b0:	d110      	bne.n	80014d4 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	210c      	movs	r1, #12
 80014be:	438a      	bics	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c6:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <HAL_ADC_PollForConversion+0x12c>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	2201      	movs	r2, #1
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80014d2:	e00b      	b.n	80014ec <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014d8:	2220      	movs	r2, #32
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e4:	2201      	movs	r2, #1
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7e1b      	ldrb	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d103      	bne.n	80014fc <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	220c      	movs	r2, #12
 80014fa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b004      	add	sp, #16
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	fffffefe 	.word	0xfffffefe

0800150c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152e:	230f      	movs	r3, #15
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	055b      	lsls	r3, r3, #21
 8001542:	429a      	cmp	r2, r3
 8001544:	d011      	beq.n	800156a <HAL_ADC_ConfigChannel+0x46>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00d      	beq.n	800156a <HAL_ADC_ConfigChannel+0x46>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001552:	2b02      	cmp	r3, #2
 8001554:	d009      	beq.n	800156a <HAL_ADC_ConfigChannel+0x46>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155a:	2b03      	cmp	r3, #3
 800155c:	d005      	beq.n	800156a <HAL_ADC_ConfigChannel+0x46>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001562:	2b04      	cmp	r3, #4
 8001564:	d001      	beq.n	800156a <HAL_ADC_ConfigChannel+0x46>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2234      	movs	r2, #52	@ 0x34
 800156e:	5c9b      	ldrb	r3, [r3, r2]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x54>
 8001574:	2302      	movs	r3, #2
 8001576:	e0d0      	b.n	800171a <HAL_ADC_ConfigChannel+0x1f6>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2234      	movs	r2, #52	@ 0x34
 800157c:	2101      	movs	r1, #1
 800157e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2204      	movs	r2, #4
 8001588:	4013      	ands	r3, r2
 800158a:	d000      	beq.n	800158e <HAL_ADC_ConfigChannel+0x6a>
 800158c:	e0b4      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a64      	ldr	r2, [pc, #400]	@ (8001724 <HAL_ADC_ConfigChannel+0x200>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d100      	bne.n	800159a <HAL_ADC_ConfigChannel+0x76>
 8001598:	e082      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2201      	movs	r2, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	055b      	lsls	r3, r3, #21
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d037      	beq.n	800162c <HAL_ADC_ConfigChannel+0x108>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d033      	beq.n	800162c <HAL_ADC_ConfigChannel+0x108>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d02f      	beq.n	800162c <HAL_ADC_ConfigChannel+0x108>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d02b      	beq.n	800162c <HAL_ADC_ConfigChannel+0x108>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d027      	beq.n	800162c <HAL_ADC_ConfigChannel+0x108>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d023      	beq.n	800162c <HAL_ADC_ConfigChannel+0x108>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e8:	2b06      	cmp	r3, #6
 80015ea:	d01f      	beq.n	800162c <HAL_ADC_ConfigChannel+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f0:	2b07      	cmp	r3, #7
 80015f2:	d01b      	beq.n	800162c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	2107      	movs	r1, #7
 8001600:	400b      	ands	r3, r1
 8001602:	429a      	cmp	r2, r3
 8001604:	d012      	beq.n	800162c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2107      	movs	r1, #7
 8001612:	438a      	bics	r2, r1
 8001614:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6959      	ldr	r1, [r3, #20]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2207      	movs	r2, #7
 8001622:	401a      	ands	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b10      	cmp	r3, #16
 8001632:	d007      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x120>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b11      	cmp	r3, #17
 800163a:	d003      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x120>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b12      	cmp	r3, #18
 8001642:	d163      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001644:	4b38      	ldr	r3, [pc, #224]	@ (8001728 <HAL_ADC_ConfigChannel+0x204>)
 8001646:	6819      	ldr	r1, [r3, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b10      	cmp	r3, #16
 800164e:	d009      	beq.n	8001664 <HAL_ADC_ConfigChannel+0x140>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b11      	cmp	r3, #17
 8001656:	d102      	bne.n	800165e <HAL_ADC_ConfigChannel+0x13a>
 8001658:	2380      	movs	r3, #128	@ 0x80
 800165a:	03db      	lsls	r3, r3, #15
 800165c:	e004      	b.n	8001668 <HAL_ADC_ConfigChannel+0x144>
 800165e:	2380      	movs	r3, #128	@ 0x80
 8001660:	045b      	lsls	r3, r3, #17
 8001662:	e001      	b.n	8001668 <HAL_ADC_ConfigChannel+0x144>
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	4a2f      	ldr	r2, [pc, #188]	@ (8001728 <HAL_ADC_ConfigChannel+0x204>)
 800166a:	430b      	orrs	r3, r1
 800166c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b10      	cmp	r3, #16
 8001674:	d14a      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001676:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <HAL_ADC_ConfigChannel+0x208>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	492d      	ldr	r1, [pc, #180]	@ (8001730 <HAL_ADC_ConfigChannel+0x20c>)
 800167c:	0018      	movs	r0, r3
 800167e:	f7fe fd43 	bl	8000108 <__udivsi3>
 8001682:	0003      	movs	r3, r0
 8001684:	001a      	movs	r2, r3
 8001686:	0013      	movs	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	189b      	adds	r3, r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001690:	e002      	b.n	8001698 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f9      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x16e>
 800169e:	e035      	b.n	800170c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2101      	movs	r1, #1
 80016ac:	4099      	lsls	r1, r3
 80016ae:	000b      	movs	r3, r1
 80016b0:	43d9      	mvns	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	400a      	ands	r2, r1
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d007      	beq.n	80016d2 <HAL_ADC_ConfigChannel+0x1ae>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b11      	cmp	r3, #17
 80016c8:	d003      	beq.n	80016d2 <HAL_ADC_ConfigChannel+0x1ae>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b12      	cmp	r3, #18
 80016d0:	d11c      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_ADC_ConfigChannel+0x204>)
 80016d4:	6819      	ldr	r1, [r3, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d007      	beq.n	80016ee <HAL_ADC_ConfigChannel+0x1ca>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b11      	cmp	r3, #17
 80016e4:	d101      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x1c6>
 80016e6:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <HAL_ADC_ConfigChannel+0x210>)
 80016e8:	e002      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x1cc>
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <HAL_ADC_ConfigChannel+0x214>)
 80016ec:	e000      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x1cc>
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <HAL_ADC_ConfigChannel+0x218>)
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <HAL_ADC_ConfigChannel+0x204>)
 80016f2:	400b      	ands	r3, r1
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e009      	b.n	800170c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016fc:	2220      	movs	r2, #32
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001704:	230f      	movs	r3, #15
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2234      	movs	r2, #52	@ 0x34
 8001710:	2100      	movs	r1, #0
 8001712:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001714:	230f      	movs	r3, #15
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b004      	add	sp, #16
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	00001001 	.word	0x00001001
 8001728:	40012708 	.word	0x40012708
 800172c:	20000000 	.word	0x20000000
 8001730:	000f4240 	.word	0x000f4240
 8001734:	ffbfffff 	.word	0xffbfffff
 8001738:	feffffff 	.word	0xfeffffff
 800173c:	ff7fffff 	.word	0xff7fffff

08001740 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2203      	movs	r2, #3
 8001758:	4013      	ands	r3, r2
 800175a:	2b01      	cmp	r3, #1
 800175c:	d112      	bne.n	8001784 <ADC_Enable+0x44>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4013      	ands	r3, r2
 8001768:	2b01      	cmp	r3, #1
 800176a:	d009      	beq.n	8001780 <ADC_Enable+0x40>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	401a      	ands	r2, r3
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	429a      	cmp	r2, r3
 800177e:	d101      	bne.n	8001784 <ADC_Enable+0x44>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <ADC_Enable+0x46>
 8001784:	2300      	movs	r3, #0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d152      	bne.n	8001830 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a2a      	ldr	r2, [pc, #168]	@ (800183c <ADC_Enable+0xfc>)
 8001792:	4013      	ands	r3, r2
 8001794:	d00d      	beq.n	80017b2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800179a:	2210      	movs	r2, #16
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a6:	2201      	movs	r2, #1
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e03f      	b.n	8001832 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <ADC_Enable+0x100>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	491f      	ldr	r1, [pc, #124]	@ (8001844 <ADC_Enable+0x104>)
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7fe fc9d 	bl	8000108 <__udivsi3>
 80017ce:	0003      	movs	r3, r0
 80017d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017d2:	e002      	b.n	80017da <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f9      	bne.n	80017d4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fc1e 	bl	8001020 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017e8:	e01b      	b.n	8001822 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017ea:	f7ff fc19 	bl	8001020 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d914      	bls.n	8001822 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	4013      	ands	r3, r2
 8001802:	2b01      	cmp	r3, #1
 8001804:	d00d      	beq.n	8001822 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180a:	2210      	movs	r2, #16
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001816:	2201      	movs	r2, #1
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e007      	b.n	8001832 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2201      	movs	r2, #1
 800182a:	4013      	ands	r3, r2
 800182c:	2b01      	cmp	r3, #1
 800182e:	d1dc      	bne.n	80017ea <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	80000017 	.word	0x80000017
 8001840:	20000000 	.word	0x20000000
 8001844:	000f4240 	.word	0x000f4240

08001848 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2203      	movs	r2, #3
 800185c:	4013      	ands	r3, r2
 800185e:	2b01      	cmp	r3, #1
 8001860:	d112      	bne.n	8001888 <ADC_Disable+0x40>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	2b01      	cmp	r3, #1
 800186e:	d009      	beq.n	8001884 <ADC_Disable+0x3c>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	401a      	ands	r2, r3
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	429a      	cmp	r2, r3
 8001882:	d101      	bne.n	8001888 <ADC_Disable+0x40>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <ADC_Disable+0x42>
 8001888:	2300      	movs	r3, #0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d048      	beq.n	8001920 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2205      	movs	r2, #5
 8001896:	4013      	ands	r3, r2
 8001898:	2b01      	cmp	r3, #1
 800189a:	d110      	bne.n	80018be <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2102      	movs	r1, #2
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2203      	movs	r2, #3
 80018b2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018b4:	f7ff fbb4 	bl	8001020 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018bc:	e029      	b.n	8001912 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c2:	2210      	movs	r2, #16
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ce:	2201      	movs	r2, #1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e023      	b.n	8001922 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018da:	f7ff fba1 	bl	8001020 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d914      	bls.n	8001912 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2201      	movs	r2, #1
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d10d      	bne.n	8001912 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018fa:	2210      	movs	r2, #16
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001906:	2201      	movs	r2, #1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e007      	b.n	8001922 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2201      	movs	r2, #1
 800191a:	4013      	ands	r3, r2
 800191c:	2b01      	cmp	r3, #1
 800191e:	d0dc      	beq.n	80018da <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b004      	add	sp, #16
 8001928:	bd80      	pop	{r7, pc}

0800192a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2204      	movs	r2, #4
 800193e:	4013      	ands	r3, r2
 8001940:	d03a      	beq.n	80019b8 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2204      	movs	r2, #4
 800194a:	4013      	ands	r3, r2
 800194c:	2b04      	cmp	r3, #4
 800194e:	d10d      	bne.n	800196c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800195a:	d107      	bne.n	800196c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2110      	movs	r1, #16
 8001968:	430a      	orrs	r2, r1
 800196a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800196c:	f7ff fb58 	bl	8001020 <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001974:	e01a      	b.n	80019ac <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001976:	f7ff fb53 	bl	8001020 <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d913      	bls.n	80019ac <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2204      	movs	r2, #4
 800198c:	4013      	ands	r3, r2
 800198e:	d00d      	beq.n	80019ac <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001994:	2210      	movs	r2, #16
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a0:	2201      	movs	r2, #1
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e006      	b.n	80019ba <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2204      	movs	r2, #4
 80019b4:	4013      	ands	r3, r2
 80019b6:	d1de      	bne.n	8001976 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	0018      	movs	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	b004      	add	sp, #16
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0f0      	b.n	8001bb6 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2220      	movs	r2, #32
 80019d8:	5c9b      	ldrb	r3, [r3, r2]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff fa14 	bl	8000e10 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2101      	movs	r1, #1
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f8:	f7ff fb12 	bl	8001020 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a00:	e013      	b.n	8001a2a <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a02:	f7ff fb0d 	bl	8001020 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b0a      	cmp	r3, #10
 8001a0e:	d90c      	bls.n	8001a2a <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	2280      	movs	r2, #128	@ 0x80
 8001a16:	0292      	lsls	r2, r2, #10
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	2105      	movs	r1, #5
 8001a24:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0c5      	b.n	8001bb6 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	d0e5      	beq.n	8001a02 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2102      	movs	r1, #2
 8001a42:	438a      	bics	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a46:	f7ff faeb 	bl	8001020 <HAL_GetTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a4e:	e013      	b.n	8001a78 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a50:	f7ff fae6 	bl	8001020 <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d90c      	bls.n	8001a78 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	2280      	movs	r2, #128	@ 0x80
 8001a64:	0292      	lsls	r2, r2, #10
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	2105      	movs	r1, #5
 8001a72:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e09e      	b.n	8001bb6 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d1e5      	bne.n	8001a50 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7e1b      	ldrb	r3, [r3, #24]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2180      	movs	r1, #128	@ 0x80
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	438a      	bics	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7e5b      	ldrb	r3, [r3, #25]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2140      	movs	r1, #64	@ 0x40
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e007      	b.n	8001ad8 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2140      	movs	r1, #64	@ 0x40
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e9b      	ldrb	r3, [r3, #26]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2120      	movs	r1, #32
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e007      	b.n	8001b02 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2120      	movs	r1, #32
 8001afe:	438a      	bics	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7edb      	ldrb	r3, [r3, #27]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2110      	movs	r1, #16
 8001b16:	438a      	bics	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2110      	movs	r1, #16
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7f1b      	ldrb	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2108      	movs	r1, #8
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2108      	movs	r1, #8
 8001b52:	438a      	bics	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7f5b      	ldrb	r3, [r3, #29]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2104      	movs	r1, #4
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	0011      	movs	r1, r2
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b004      	add	sp, #16
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bce:	2013      	movs	r0, #19
 8001bd0:	183b      	adds	r3, r7, r0
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	2120      	movs	r1, #32
 8001bd6:	5c52      	ldrb	r2, [r2, r1]
 8001bd8:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bda:	0002      	movs	r2, r0
 8001bdc:	18bb      	adds	r3, r7, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d004      	beq.n	8001bee <HAL_CAN_ConfigFilter+0x30>
 8001be4:	18bb      	adds	r3, r7, r2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d000      	beq.n	8001bee <HAL_CAN_ConfigFilter+0x30>
 8001bec:	e0cd      	b.n	8001d8a <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	58d3      	ldr	r3, [r2, r3]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	221f      	movs	r2, #31
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	2387      	movs	r3, #135	@ 0x87
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	58d3      	ldr	r3, [r2, r3]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	43d2      	mvns	r2, r2
 8001c20:	401a      	ands	r2, r3
 8001c22:	0011      	movs	r1, r2
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	2387      	movs	r3, #135	@ 0x87
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d129      	bne.n	8001c88 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	2383      	movs	r3, #131	@ 0x83
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	58d3      	ldr	r3, [r2, r3]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	43d2      	mvns	r2, r2
 8001c40:	401a      	ands	r2, r3
 8001c42:	0011      	movs	r1, r2
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	2383      	movs	r3, #131	@ 0x83
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c5e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3248      	adds	r2, #72	@ 0x48
 8001c64:	00d2      	lsls	r2, r2, #3
 8001c66:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	3348      	adds	r3, #72	@ 0x48
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	18cb      	adds	r3, r1, r3
 8001c84:	3304      	adds	r3, #4
 8001c86:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d128      	bne.n	8001ce2 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	2383      	movs	r3, #131	@ 0x83
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	58d2      	ldr	r2, [r2, r3]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	0011      	movs	r1, r2
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	2383      	movs	r3, #131	@ 0x83
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cb8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3248      	adds	r2, #72	@ 0x48
 8001cbe:	00d2      	lsls	r2, r2, #3
 8001cc0:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	3348      	adds	r3, #72	@ 0x48
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	18cb      	adds	r3, r1, r3
 8001cde:	3304      	adds	r3, #4
 8001ce0:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	2381      	movs	r3, #129	@ 0x81
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	58d3      	ldr	r3, [r2, r3]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	43d2      	mvns	r2, r2
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	0011      	movs	r1, r2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	2381      	movs	r3, #129	@ 0x81
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	50d1      	str	r1, [r2, r3]
 8001d02:	e00a      	b.n	8001d1a <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	2381      	movs	r3, #129	@ 0x81
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	58d2      	ldr	r2, [r2, r3]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	0011      	movs	r1, r2
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	2381      	movs	r3, #129	@ 0x81
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10c      	bne.n	8001d3c <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	2385      	movs	r3, #133	@ 0x85
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	58d3      	ldr	r3, [r2, r3]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	43d2      	mvns	r2, r2
 8001d2e:	401a      	ands	r2, r3
 8001d30:	0011      	movs	r1, r2
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	2385      	movs	r3, #133	@ 0x85
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	50d1      	str	r1, [r2, r3]
 8001d3a:	e00a      	b.n	8001d52 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	2385      	movs	r3, #133	@ 0x85
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	58d2      	ldr	r2, [r2, r3]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	0011      	movs	r1, r2
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	2385      	movs	r3, #133	@ 0x85
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10a      	bne.n	8001d70 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	2387      	movs	r3, #135	@ 0x87
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	58d2      	ldr	r2, [r2, r3]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	0011      	movs	r1, r2
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	2387      	movs	r3, #135	@ 0x87
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	2380      	movs	r3, #128	@ 0x80
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	58d3      	ldr	r3, [r2, r3]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4393      	bics	r3, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e007      	b.n	8001d9a <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	2280      	movs	r2, #128	@ 0x80
 8001d90:	02d2      	lsls	r2, r2, #11
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
  }
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b006      	add	sp, #24
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2220      	movs	r2, #32
 8001dae:	5c9b      	ldrb	r3, [r3, r2]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d12f      	bne.n	8001e16 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	2102      	movs	r1, #2
 8001dbc:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	438a      	bics	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dce:	f7ff f927 	bl	8001020 <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dd6:	e013      	b.n	8001e00 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dd8:	f7ff f922 	bl	8001020 <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b0a      	cmp	r3, #10
 8001de4:	d90c      	bls.n	8001e00 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	2280      	movs	r2, #128	@ 0x80
 8001dec:	0292      	lsls	r2, r2, #10
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	2105      	movs	r1, #5
 8001dfa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e012      	b.n	8001e26 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d1e5      	bne.n	8001dd8 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e007      	b.n	8001e26 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	2280      	movs	r2, #128	@ 0x80
 8001e1c:	0312      	lsls	r2, r2, #12
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
  }
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b088      	sub	sp, #32
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e3c:	201f      	movs	r0, #31
 8001e3e:	183b      	adds	r3, r7, r0
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	2120      	movs	r1, #32
 8001e44:	5c52      	ldrb	r2, [r2, r1]
 8001e46:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e50:	183b      	adds	r3, r7, r0
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d004      	beq.n	8001e62 <HAL_CAN_AddTxMessage+0x34>
 8001e58:	183b      	adds	r3, r7, r0
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d000      	beq.n	8001e62 <HAL_CAN_AddTxMessage+0x34>
 8001e60:	e0ab      	b.n	8001fba <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	04db      	lsls	r3, r3, #19
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d10a      	bne.n	8001e82 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	051b      	lsls	r3, r3, #20
 8001e72:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e74:	d105      	bne.n	8001e82 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	055b      	lsls	r3, r3, #21
 8001e7c:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e7e:	d100      	bne.n	8001e82 <HAL_CAN_AddTxMessage+0x54>
 8001e80:	e092      	b.n	8001fa8 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	0e1b      	lsrs	r3, r3, #24
 8001e86:	2203      	movs	r2, #3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	409a      	lsls	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4311      	orrs	r1, r2
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	3218      	adds	r2, #24
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	50d1      	str	r1, [r2, r3]
 8001eb6:	e00f      	b.n	8001ed8 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001ece:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	3218      	adds	r2, #24
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3318      	adds	r3, #24
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	18cb      	adds	r3, r1, r3
 8001ee8:	3304      	adds	r3, #4
 8001eea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	7d1b      	ldrb	r3, [r3, #20]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d112      	bne.n	8001f1a <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3318      	adds	r3, #24
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	18d3      	adds	r3, r2, r3
 8001f00:	3304      	adds	r3, #4
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6819      	ldr	r1, [r3, #0]
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3318      	adds	r3, #24
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	18cb      	adds	r3, r1, r3
 8001f16:	3304      	adds	r3, #4
 8001f18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3307      	adds	r3, #7
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	061a      	lsls	r2, r3, #24
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3306      	adds	r3, #6
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3305      	adds	r3, #5
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	6979      	ldr	r1, [r7, #20]
 8001f46:	23c6      	movs	r3, #198	@ 0xc6
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	0109      	lsls	r1, r1, #4
 8001f4c:	1841      	adds	r1, r0, r1
 8001f4e:	18cb      	adds	r3, r1, r3
 8001f50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3303      	adds	r3, #3
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	061a      	lsls	r2, r3, #24
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3301      	adds	r3, #1
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	0019      	movs	r1, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	6979      	ldr	r1, [r7, #20]
 8001f7c:	23c4      	movs	r3, #196	@ 0xc4
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	0109      	lsls	r1, r1, #4
 8001f82:	1841      	adds	r1, r0, r1
 8001f84:	18cb      	adds	r3, r1, r3
 8001f86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	3218      	adds	r2, #24
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	58d2      	ldr	r2, [r2, r3]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	3218      	adds	r2, #24
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e010      	b.n	8001fca <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	2280      	movs	r2, #128	@ 0x80
 8001fae:	0392      	lsls	r2, r2, #14
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e007      	b.n	8001fca <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	2280      	movs	r2, #128	@ 0x80
 8001fc0:	02d2      	lsls	r2, r2, #11
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
  }
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b008      	add	sp, #32
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fdc:	200f      	movs	r0, #15
 8001fde:	183b      	adds	r3, r7, r0
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	2120      	movs	r1, #32
 8001fe4:	5c52      	ldrb	r2, [r2, r1]
 8001fe6:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fe8:	0002      	movs	r2, r0
 8001fea:	18bb      	adds	r3, r7, r2
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d003      	beq.n	8001ffa <HAL_CAN_ActivateNotification+0x28>
 8001ff2:	18bb      	adds	r3, r7, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d109      	bne.n	800200e <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6959      	ldr	r1, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e007      	b.n	800201e <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	2280      	movs	r2, #128	@ 0x80
 8002014:	02d2      	lsls	r2, r2, #11
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
  }
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b004      	add	sp, #16
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	0002      	movs	r2, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b7f      	cmp	r3, #127	@ 0x7f
 800203c:	d828      	bhi.n	8002090 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800203e:	4a2f      	ldr	r2, [pc, #188]	@ (80020fc <__NVIC_SetPriority+0xd4>)
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b25b      	sxtb	r3, r3
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	33c0      	adds	r3, #192	@ 0xc0
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	589b      	ldr	r3, [r3, r2]
 800204e:	1dfa      	adds	r2, r7, #7
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	0011      	movs	r1, r2
 8002054:	2203      	movs	r2, #3
 8002056:	400a      	ands	r2, r1
 8002058:	00d2      	lsls	r2, r2, #3
 800205a:	21ff      	movs	r1, #255	@ 0xff
 800205c:	4091      	lsls	r1, r2
 800205e:	000a      	movs	r2, r1
 8002060:	43d2      	mvns	r2, r2
 8002062:	401a      	ands	r2, r3
 8002064:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	019b      	lsls	r3, r3, #6
 800206a:	22ff      	movs	r2, #255	@ 0xff
 800206c:	401a      	ands	r2, r3
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	0018      	movs	r0, r3
 8002074:	2303      	movs	r3, #3
 8002076:	4003      	ands	r3, r0
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800207c:	481f      	ldr	r0, [pc, #124]	@ (80020fc <__NVIC_SetPriority+0xd4>)
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b25b      	sxtb	r3, r3
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	430a      	orrs	r2, r1
 8002088:	33c0      	adds	r3, #192	@ 0xc0
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800208e:	e031      	b.n	80020f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002090:	4a1b      	ldr	r2, [pc, #108]	@ (8002100 <__NVIC_SetPriority+0xd8>)
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	0019      	movs	r1, r3
 8002098:	230f      	movs	r3, #15
 800209a:	400b      	ands	r3, r1
 800209c:	3b08      	subs	r3, #8
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3306      	adds	r3, #6
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	18d3      	adds	r3, r2, r3
 80020a6:	3304      	adds	r3, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	1dfa      	adds	r2, r7, #7
 80020ac:	7812      	ldrb	r2, [r2, #0]
 80020ae:	0011      	movs	r1, r2
 80020b0:	2203      	movs	r2, #3
 80020b2:	400a      	ands	r2, r1
 80020b4:	00d2      	lsls	r2, r2, #3
 80020b6:	21ff      	movs	r1, #255	@ 0xff
 80020b8:	4091      	lsls	r1, r2
 80020ba:	000a      	movs	r2, r1
 80020bc:	43d2      	mvns	r2, r2
 80020be:	401a      	ands	r2, r3
 80020c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	22ff      	movs	r2, #255	@ 0xff
 80020c8:	401a      	ands	r2, r3
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	0018      	movs	r0, r3
 80020d0:	2303      	movs	r3, #3
 80020d2:	4003      	ands	r3, r0
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d8:	4809      	ldr	r0, [pc, #36]	@ (8002100 <__NVIC_SetPriority+0xd8>)
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	001c      	movs	r4, r3
 80020e0:	230f      	movs	r3, #15
 80020e2:	4023      	ands	r3, r4
 80020e4:	3b08      	subs	r3, #8
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	430a      	orrs	r2, r1
 80020ea:	3306      	adds	r3, #6
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	18c3      	adds	r3, r0, r3
 80020f0:	3304      	adds	r3, #4
 80020f2:	601a      	str	r2, [r3, #0]
}
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b003      	add	sp, #12
 80020fa:	bd90      	pop	{r4, r7, pc}
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	1e5a      	subs	r2, r3, #1
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	045b      	lsls	r3, r3, #17
 8002114:	429a      	cmp	r2, r3
 8002116:	d301      	bcc.n	800211c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002118:	2301      	movs	r3, #1
 800211a:	e010      	b.n	800213e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211c:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <SysTick_Config+0x44>)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	3a01      	subs	r2, #1
 8002122:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002124:	2301      	movs	r3, #1
 8002126:	425b      	negs	r3, r3
 8002128:	2103      	movs	r1, #3
 800212a:	0018      	movs	r0, r3
 800212c:	f7ff ff7c 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <SysTick_Config+0x44>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002136:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <SysTick_Config+0x44>)
 8002138:	2207      	movs	r2, #7
 800213a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800213c:	2300      	movs	r3, #0
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	e000e010 	.word	0xe000e010

0800214c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	210f      	movs	r1, #15
 8002158:	187b      	adds	r3, r7, r1
 800215a:	1c02      	adds	r2, r0, #0
 800215c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	187b      	adds	r3, r7, r1
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b25b      	sxtb	r3, r3
 8002166:	0011      	movs	r1, r2
 8002168:	0018      	movs	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff ffbf 	bl	8002104 <SysTick_Config>
 8002186:	0003      	movs	r3, r0
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219e:	e149      	b.n	8002434 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4091      	lsls	r1, r2
 80021aa:	000a      	movs	r2, r1
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d100      	bne.n	80021b8 <HAL_GPIO_Init+0x28>
 80021b6:	e13a      	b.n	800242e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2203      	movs	r2, #3
 80021be:	4013      	ands	r3, r2
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d005      	beq.n	80021d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2203      	movs	r2, #3
 80021ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d130      	bne.n	8002232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	409a      	lsls	r2, r3
 80021de:	0013      	movs	r3, r2
 80021e0:	43da      	mvns	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	409a      	lsls	r2, r3
 80021f2:	0013      	movs	r3, r2
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002206:	2201      	movs	r2, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
 800220c:	0013      	movs	r3, r2
 800220e:	43da      	mvns	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	2201      	movs	r2, #1
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2203      	movs	r2, #3
 8002238:	4013      	ands	r3, r2
 800223a:	2b03      	cmp	r3, #3
 800223c:	d017      	beq.n	800226e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	409a      	lsls	r2, r3
 800224c:	0013      	movs	r3, r2
 800224e:	43da      	mvns	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	409a      	lsls	r2, r3
 8002260:	0013      	movs	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2203      	movs	r2, #3
 8002274:	4013      	ands	r3, r2
 8002276:	2b02      	cmp	r3, #2
 8002278:	d123      	bne.n	80022c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	08da      	lsrs	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3208      	adds	r2, #8
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	58d3      	ldr	r3, [r2, r3]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2207      	movs	r2, #7
 800228c:	4013      	ands	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	409a      	lsls	r2, r3
 8002294:	0013      	movs	r3, r2
 8002296:	43da      	mvns	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2107      	movs	r1, #7
 80022a6:	400b      	ands	r3, r1
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	0092      	lsls	r2, r2, #2
 80022be:	6939      	ldr	r1, [r7, #16]
 80022c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	409a      	lsls	r2, r3
 80022d0:	0013      	movs	r3, r2
 80022d2:	43da      	mvns	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2203      	movs	r2, #3
 80022e0:	401a      	ands	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	23c0      	movs	r3, #192	@ 0xc0
 80022fc:	029b      	lsls	r3, r3, #10
 80022fe:	4013      	ands	r3, r2
 8002300:	d100      	bne.n	8002304 <HAL_GPIO_Init+0x174>
 8002302:	e094      	b.n	800242e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002304:	4b51      	ldr	r3, [pc, #324]	@ (800244c <HAL_GPIO_Init+0x2bc>)
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	4b50      	ldr	r3, [pc, #320]	@ (800244c <HAL_GPIO_Init+0x2bc>)
 800230a:	2101      	movs	r1, #1
 800230c:	430a      	orrs	r2, r1
 800230e:	619a      	str	r2, [r3, #24]
 8002310:	4b4e      	ldr	r3, [pc, #312]	@ (800244c <HAL_GPIO_Init+0x2bc>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2201      	movs	r2, #1
 8002316:	4013      	ands	r3, r2
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800231c:	4a4c      	ldr	r2, [pc, #304]	@ (8002450 <HAL_GPIO_Init+0x2c0>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	589b      	ldr	r3, [r3, r2]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2203      	movs	r2, #3
 800232e:	4013      	ands	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	409a      	lsls	r2, r3
 8002336:	0013      	movs	r3, r2
 8002338:	43da      	mvns	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	2390      	movs	r3, #144	@ 0x90
 8002344:	05db      	lsls	r3, r3, #23
 8002346:	429a      	cmp	r2, r3
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x1d6>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a41      	ldr	r2, [pc, #260]	@ (8002454 <HAL_GPIO_Init+0x2c4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x1d2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a40      	ldr	r2, [pc, #256]	@ (8002458 <HAL_GPIO_Init+0x2c8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x1ce>
 800235a:	2302      	movs	r3, #2
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x1d8>
 800235e:	2305      	movs	r3, #5
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x1d8>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x1d8>
 8002366:	2300      	movs	r3, #0
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	2103      	movs	r1, #3
 800236c:	400a      	ands	r2, r1
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002378:	4935      	ldr	r1, [pc, #212]	@ (8002450 <HAL_GPIO_Init+0x2c0>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002386:	4b35      	ldr	r3, [pc, #212]	@ (800245c <HAL_GPIO_Init+0x2cc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43da      	mvns	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	2380      	movs	r3, #128	@ 0x80
 800239c:	035b      	lsls	r3, r3, #13
 800239e:	4013      	ands	r3, r2
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023aa:	4b2c      	ldr	r3, [pc, #176]	@ (800245c <HAL_GPIO_Init+0x2cc>)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023b0:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <HAL_GPIO_Init+0x2cc>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43da      	mvns	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	039b      	lsls	r3, r3, #14
 80023c8:	4013      	ands	r3, r2
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023d4:	4b21      	ldr	r3, [pc, #132]	@ (800245c <HAL_GPIO_Init+0x2cc>)
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_GPIO_Init+0x2cc>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	43da      	mvns	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	2380      	movs	r3, #128	@ 0x80
 80023f0:	029b      	lsls	r3, r3, #10
 80023f2:	4013      	ands	r3, r2
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023fe:	4b17      	ldr	r3, [pc, #92]	@ (800245c <HAL_GPIO_Init+0x2cc>)
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002404:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_GPIO_Init+0x2cc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	43da      	mvns	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	025b      	lsls	r3, r3, #9
 800241c:	4013      	ands	r3, r2
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <HAL_GPIO_Init+0x2cc>)
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	40da      	lsrs	r2, r3
 800243c:	1e13      	subs	r3, r2, #0
 800243e:	d000      	beq.n	8002442 <HAL_GPIO_Init+0x2b2>
 8002440:	e6ae      	b.n	80021a0 <HAL_GPIO_Init+0x10>
  } 
}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	46c0      	nop			@ (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000
 8002454:	48000400 	.word	0x48000400
 8002458:	48000800 	.word	0x48000800
 800245c:	40010400 	.word	0x40010400

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	0008      	movs	r0, r1
 800246a:	0011      	movs	r1, r2
 800246c:	1cbb      	adds	r3, r7, #2
 800246e:	1c02      	adds	r2, r0, #0
 8002470:	801a      	strh	r2, [r3, #0]
 8002472:	1c7b      	adds	r3, r7, #1
 8002474:	1c0a      	adds	r2, r1, #0
 8002476:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002478:	1c7b      	adds	r3, r7, #1
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002480:	1cbb      	adds	r3, r7, #2
 8002482:	881a      	ldrh	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002488:	e003      	b.n	8002492 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800248a:	1cbb      	adds	r3, r7, #2
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b002      	add	sp, #8
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f000 fb76 	bl	8002b9c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	d100      	bne.n	80024bc <HAL_RCC_OscConfig+0x20>
 80024ba:	e08e      	b.n	80025da <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024bc:	4bc5      	ldr	r3, [pc, #788]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	220c      	movs	r2, #12
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d00e      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c8:	4bc2      	ldr	r3, [pc, #776]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	220c      	movs	r2, #12
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d117      	bne.n	8002504 <HAL_RCC_OscConfig+0x68>
 80024d4:	4bbf      	ldr	r3, [pc, #764]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	23c0      	movs	r3, #192	@ 0xc0
 80024da:	025b      	lsls	r3, r3, #9
 80024dc:	401a      	ands	r2, r3
 80024de:	2380      	movs	r3, #128	@ 0x80
 80024e0:	025b      	lsls	r3, r3, #9
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d10e      	bne.n	8002504 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	4bbb      	ldr	r3, [pc, #748]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	2380      	movs	r3, #128	@ 0x80
 80024ec:	029b      	lsls	r3, r3, #10
 80024ee:	4013      	ands	r3, r2
 80024f0:	d100      	bne.n	80024f4 <HAL_RCC_OscConfig+0x58>
 80024f2:	e071      	b.n	80025d8 <HAL_RCC_OscConfig+0x13c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d000      	beq.n	80024fe <HAL_RCC_OscConfig+0x62>
 80024fc:	e06c      	b.n	80025d8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	f000 fb4c 	bl	8002b9c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_RCC_OscConfig+0x80>
 800250c:	4bb1      	ldr	r3, [pc, #708]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4bb0      	ldr	r3, [pc, #704]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002512:	2180      	movs	r1, #128	@ 0x80
 8002514:	0249      	lsls	r1, r1, #9
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e02f      	b.n	800257c <HAL_RCC_OscConfig+0xe0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0xa2>
 8002524:	4bab      	ldr	r3, [pc, #684]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4baa      	ldr	r3, [pc, #680]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800252a:	49ab      	ldr	r1, [pc, #684]	@ (80027d8 <HAL_RCC_OscConfig+0x33c>)
 800252c:	400a      	ands	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	4ba8      	ldr	r3, [pc, #672]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4ba7      	ldr	r3, [pc, #668]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002536:	49a9      	ldr	r1, [pc, #676]	@ (80027dc <HAL_RCC_OscConfig+0x340>)
 8002538:	400a      	ands	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e01e      	b.n	800257c <HAL_RCC_OscConfig+0xe0>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b05      	cmp	r3, #5
 8002544:	d10e      	bne.n	8002564 <HAL_RCC_OscConfig+0xc8>
 8002546:	4ba3      	ldr	r3, [pc, #652]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4ba2      	ldr	r3, [pc, #648]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800254c:	2180      	movs	r1, #128	@ 0x80
 800254e:	02c9      	lsls	r1, r1, #11
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	4b9f      	ldr	r3, [pc, #636]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b9e      	ldr	r3, [pc, #632]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800255a:	2180      	movs	r1, #128	@ 0x80
 800255c:	0249      	lsls	r1, r1, #9
 800255e:	430a      	orrs	r2, r1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xe0>
 8002564:	4b9b      	ldr	r3, [pc, #620]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b9a      	ldr	r3, [pc, #616]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800256a:	499b      	ldr	r1, [pc, #620]	@ (80027d8 <HAL_RCC_OscConfig+0x33c>)
 800256c:	400a      	ands	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	4b98      	ldr	r3, [pc, #608]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b97      	ldr	r3, [pc, #604]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002576:	4999      	ldr	r1, [pc, #612]	@ (80027dc <HAL_RCC_OscConfig+0x340>)
 8002578:	400a      	ands	r2, r1
 800257a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d014      	beq.n	80025ae <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fd4c 	bl	8001020 <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258e:	f7fe fd47 	bl	8001020 <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b64      	cmp	r3, #100	@ 0x64
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e2fd      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a0:	4b8c      	ldr	r3, [pc, #560]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	4013      	ands	r3, r2
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0xf2>
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7fe fd37 	bl	8001020 <HAL_GetTick>
 80025b2:	0003      	movs	r3, r0
 80025b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fd32 	bl	8001020 <HAL_GetTick>
 80025bc:	0002      	movs	r2, r0
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e2e8      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b82      	ldr	r3, [pc, #520]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	@ 0x80
 80025d0:	029b      	lsls	r3, r3, #10
 80025d2:	4013      	ands	r3, r2
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x11c>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2202      	movs	r2, #2
 80025e0:	4013      	ands	r3, r2
 80025e2:	d100      	bne.n	80025e6 <HAL_RCC_OscConfig+0x14a>
 80025e4:	e06c      	b.n	80026c0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025e6:	4b7b      	ldr	r3, [pc, #492]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	220c      	movs	r2, #12
 80025ec:	4013      	ands	r3, r2
 80025ee:	d00e      	beq.n	800260e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025f0:	4b78      	ldr	r3, [pc, #480]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	220c      	movs	r2, #12
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d11f      	bne.n	800263c <HAL_RCC_OscConfig+0x1a0>
 80025fc:	4b75      	ldr	r3, [pc, #468]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	23c0      	movs	r3, #192	@ 0xc0
 8002602:	025b      	lsls	r3, r3, #9
 8002604:	401a      	ands	r2, r3
 8002606:	2380      	movs	r3, #128	@ 0x80
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	429a      	cmp	r2, r3
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	4b71      	ldr	r3, [pc, #452]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2202      	movs	r2, #2
 8002614:	4013      	ands	r3, r2
 8002616:	d005      	beq.n	8002624 <HAL_RCC_OscConfig+0x188>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e2bb      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4b6b      	ldr	r3, [pc, #428]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	22f8      	movs	r2, #248	@ 0xf8
 800262a:	4393      	bics	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00da      	lsls	r2, r3, #3
 8002634:	4b67      	ldr	r3, [pc, #412]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	e041      	b.n	80026c0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d024      	beq.n	800268e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	4b63      	ldr	r3, [pc, #396]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b62      	ldr	r3, [pc, #392]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800264a:	2101      	movs	r1, #1
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fce6 	bl	8001020 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265a:	f7fe fce1 	bl	8001020 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e297      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	4b59      	ldr	r3, [pc, #356]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2202      	movs	r2, #2
 8002672:	4013      	ands	r3, r2
 8002674:	d0f1      	beq.n	800265a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b57      	ldr	r3, [pc, #348]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	22f8      	movs	r2, #248	@ 0xf8
 800267c:	4393      	bics	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	00da      	lsls	r2, r3, #3
 8002686:	4b53      	ldr	r3, [pc, #332]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e018      	b.n	80026c0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b51      	ldr	r3, [pc, #324]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b50      	ldr	r3, [pc, #320]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002694:	2101      	movs	r1, #1
 8002696:	438a      	bics	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269a:	f7fe fcc1 	bl	8001020 <HAL_GetTick>
 800269e:	0003      	movs	r3, r0
 80026a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a4:	f7fe fcbc 	bl	8001020 <HAL_GetTick>
 80026a8:	0002      	movs	r2, r0
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e272      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b6:	4b47      	ldr	r3, [pc, #284]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2202      	movs	r2, #2
 80026bc:	4013      	ands	r3, r2
 80026be:	d1f1      	bne.n	80026a4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2208      	movs	r2, #8
 80026c6:	4013      	ands	r3, r2
 80026c8:	d036      	beq.n	8002738 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d019      	beq.n	8002706 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b40      	ldr	r3, [pc, #256]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80026d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026d6:	4b3f      	ldr	r3, [pc, #252]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80026d8:	2101      	movs	r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7fe fc9f 	bl	8001020 <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e8:	f7fe fc9a 	bl	8001020 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e250      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	4b36      	ldr	r3, [pc, #216]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d0f1      	beq.n	80026e8 <HAL_RCC_OscConfig+0x24c>
 8002704:	e018      	b.n	8002738 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002706:	4b33      	ldr	r3, [pc, #204]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800270a:	4b32      	ldr	r3, [pc, #200]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800270c:	2101      	movs	r1, #1
 800270e:	438a      	bics	r2, r1
 8002710:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002712:	f7fe fc85 	bl	8001020 <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271c:	f7fe fc80 	bl	8001020 <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e236      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272e:	4b29      	ldr	r3, [pc, #164]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	2202      	movs	r2, #2
 8002734:	4013      	ands	r3, r2
 8002736:	d1f1      	bne.n	800271c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2204      	movs	r2, #4
 800273e:	4013      	ands	r3, r2
 8002740:	d100      	bne.n	8002744 <HAL_RCC_OscConfig+0x2a8>
 8002742:	e0b5      	b.n	80028b0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002744:	201f      	movs	r0, #31
 8002746:	183b      	adds	r3, r7, r0
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274c:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	055b      	lsls	r3, r3, #21
 8002754:	4013      	ands	r3, r2
 8002756:	d110      	bne.n	800277a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800275e:	2180      	movs	r1, #128	@ 0x80
 8002760:	0549      	lsls	r1, r1, #21
 8002762:	430a      	orrs	r2, r1
 8002764:	61da      	str	r2, [r3, #28]
 8002766:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	055b      	lsls	r3, r3, #21
 800276e:	4013      	ands	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002774:	183b      	adds	r3, r7, r0
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <HAL_RCC_OscConfig+0x344>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4013      	ands	r3, r2
 8002784:	d11a      	bne.n	80027bc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002786:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <HAL_RCC_OscConfig+0x344>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <HAL_RCC_OscConfig+0x344>)
 800278c:	2180      	movs	r1, #128	@ 0x80
 800278e:	0049      	lsls	r1, r1, #1
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002794:	f7fe fc44 	bl	8001020 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279e:	f7fe fc3f 	bl	8001020 <HAL_GetTick>
 80027a2:	0002      	movs	r2, r0
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b64      	cmp	r3, #100	@ 0x64
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1f5      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RCC_OscConfig+0x344>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	@ 0x80
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d10f      	bne.n	80027e4 <HAL_RCC_OscConfig+0x348>
 80027c4:	4b03      	ldr	r3, [pc, #12]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80027c6:	6a1a      	ldr	r2, [r3, #32]
 80027c8:	4b02      	ldr	r3, [pc, #8]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	430a      	orrs	r2, r1
 80027ce:	621a      	str	r2, [r3, #32]
 80027d0:	e036      	b.n	8002840 <HAL_RCC_OscConfig+0x3a4>
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	40021000 	.word	0x40021000
 80027d8:	fffeffff 	.word	0xfffeffff
 80027dc:	fffbffff 	.word	0xfffbffff
 80027e0:	40007000 	.word	0x40007000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10c      	bne.n	8002806 <HAL_RCC_OscConfig+0x36a>
 80027ec:	4bca      	ldr	r3, [pc, #808]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	4bc9      	ldr	r3, [pc, #804]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80027f2:	2101      	movs	r1, #1
 80027f4:	438a      	bics	r2, r1
 80027f6:	621a      	str	r2, [r3, #32]
 80027f8:	4bc7      	ldr	r3, [pc, #796]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80027fa:	6a1a      	ldr	r2, [r3, #32]
 80027fc:	4bc6      	ldr	r3, [pc, #792]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80027fe:	2104      	movs	r1, #4
 8002800:	438a      	bics	r2, r1
 8002802:	621a      	str	r2, [r3, #32]
 8002804:	e01c      	b.n	8002840 <HAL_RCC_OscConfig+0x3a4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b05      	cmp	r3, #5
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x38c>
 800280e:	4bc2      	ldr	r3, [pc, #776]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002810:	6a1a      	ldr	r2, [r3, #32]
 8002812:	4bc1      	ldr	r3, [pc, #772]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002814:	2104      	movs	r1, #4
 8002816:	430a      	orrs	r2, r1
 8002818:	621a      	str	r2, [r3, #32]
 800281a:	4bbf      	ldr	r3, [pc, #764]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 800281c:	6a1a      	ldr	r2, [r3, #32]
 800281e:	4bbe      	ldr	r3, [pc, #760]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002820:	2101      	movs	r1, #1
 8002822:	430a      	orrs	r2, r1
 8002824:	621a      	str	r2, [r3, #32]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x3a4>
 8002828:	4bbb      	ldr	r3, [pc, #748]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 800282a:	6a1a      	ldr	r2, [r3, #32]
 800282c:	4bba      	ldr	r3, [pc, #744]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 800282e:	2101      	movs	r1, #1
 8002830:	438a      	bics	r2, r1
 8002832:	621a      	str	r2, [r3, #32]
 8002834:	4bb8      	ldr	r3, [pc, #736]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002836:	6a1a      	ldr	r2, [r3, #32]
 8002838:	4bb7      	ldr	r3, [pc, #732]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 800283a:	2104      	movs	r1, #4
 800283c:	438a      	bics	r2, r1
 800283e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d014      	beq.n	8002872 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002848:	f7fe fbea 	bl	8001020 <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	e009      	b.n	8002866 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe fbe5 	bl	8001020 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	4aaf      	ldr	r2, [pc, #700]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e19a      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	4bac      	ldr	r3, [pc, #688]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	2202      	movs	r2, #2
 800286c:	4013      	ands	r3, r2
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x3b6>
 8002870:	e013      	b.n	800289a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7fe fbd5 	bl	8001020 <HAL_GetTick>
 8002876:	0003      	movs	r3, r0
 8002878:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287a:	e009      	b.n	8002890 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7fe fbd0 	bl	8001020 <HAL_GetTick>
 8002880:	0002      	movs	r2, r0
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	4aa5      	ldr	r2, [pc, #660]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e185      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002890:	4ba1      	ldr	r3, [pc, #644]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	2202      	movs	r2, #2
 8002896:	4013      	ands	r3, r2
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800289a:	231f      	movs	r3, #31
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	4b9b      	ldr	r3, [pc, #620]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80028aa:	499d      	ldr	r1, [pc, #628]	@ (8002b20 <HAL_RCC_OscConfig+0x684>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2210      	movs	r2, #16
 80028b6:	4013      	ands	r3, r2
 80028b8:	d063      	beq.n	8002982 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d12a      	bne.n	8002918 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028c2:	4b95      	ldr	r3, [pc, #596]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80028c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c6:	4b94      	ldr	r3, [pc, #592]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80028c8:	2104      	movs	r1, #4
 80028ca:	430a      	orrs	r2, r1
 80028cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028ce:	4b92      	ldr	r3, [pc, #584]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80028d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028d2:	4b91      	ldr	r3, [pc, #580]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80028d4:	2101      	movs	r1, #1
 80028d6:	430a      	orrs	r2, r1
 80028d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7fe fba1 	bl	8001020 <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028e4:	f7fe fb9c 	bl	8001020 <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e152      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028f6:	4b88      	ldr	r3, [pc, #544]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80028f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fa:	2202      	movs	r2, #2
 80028fc:	4013      	ands	r3, r2
 80028fe:	d0f1      	beq.n	80028e4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002900:	4b85      	ldr	r3, [pc, #532]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002904:	22f8      	movs	r2, #248	@ 0xf8
 8002906:	4393      	bics	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	00da      	lsls	r2, r3, #3
 8002910:	4b81      	ldr	r3, [pc, #516]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002912:	430a      	orrs	r2, r1
 8002914:	635a      	str	r2, [r3, #52]	@ 0x34
 8002916:	e034      	b.n	8002982 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	3305      	adds	r3, #5
 800291e:	d111      	bne.n	8002944 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002920:	4b7d      	ldr	r3, [pc, #500]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002924:	4b7c      	ldr	r3, [pc, #496]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002926:	2104      	movs	r1, #4
 8002928:	438a      	bics	r2, r1
 800292a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800292c:	4b7a      	ldr	r3, [pc, #488]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 800292e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002930:	22f8      	movs	r2, #248	@ 0xf8
 8002932:	4393      	bics	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	00da      	lsls	r2, r3, #3
 800293c:	4b76      	ldr	r3, [pc, #472]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 800293e:	430a      	orrs	r2, r1
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34
 8002942:	e01e      	b.n	8002982 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002944:	4b74      	ldr	r3, [pc, #464]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002948:	4b73      	ldr	r3, [pc, #460]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 800294a:	2104      	movs	r1, #4
 800294c:	430a      	orrs	r2, r1
 800294e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002950:	4b71      	ldr	r3, [pc, #452]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002954:	4b70      	ldr	r3, [pc, #448]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002956:	2101      	movs	r1, #1
 8002958:	438a      	bics	r2, r1
 800295a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295c:	f7fe fb60 	bl	8001020 <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002966:	f7fe fb5b 	bl	8001020 <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e111      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002978:	4b67      	ldr	r3, [pc, #412]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 800297a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297c:	2202      	movs	r2, #2
 800297e:	4013      	ands	r3, r2
 8002980:	d1f1      	bne.n	8002966 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2220      	movs	r2, #32
 8002988:	4013      	ands	r3, r2
 800298a:	d05c      	beq.n	8002a46 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800298c:	4b62      	ldr	r3, [pc, #392]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	220c      	movs	r2, #12
 8002992:	4013      	ands	r3, r2
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d00e      	beq.n	80029b6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002998:	4b5f      	ldr	r3, [pc, #380]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	220c      	movs	r2, #12
 800299e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d114      	bne.n	80029ce <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	23c0      	movs	r3, #192	@ 0xc0
 80029aa:	025b      	lsls	r3, r3, #9
 80029ac:	401a      	ands	r2, r3
 80029ae:	23c0      	movs	r3, #192	@ 0xc0
 80029b0:	025b      	lsls	r3, r3, #9
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d10b      	bne.n	80029ce <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80029b6:	4b58      	ldr	r3, [pc, #352]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80029b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	029b      	lsls	r3, r3, #10
 80029be:	4013      	ands	r3, r2
 80029c0:	d040      	beq.n	8002a44 <HAL_RCC_OscConfig+0x5a8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d03c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e0e6      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80029d6:	4b50      	ldr	r3, [pc, #320]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80029d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029da:	4b4f      	ldr	r3, [pc, #316]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 80029dc:	2180      	movs	r1, #128	@ 0x80
 80029de:	0249      	lsls	r1, r1, #9
 80029e0:	430a      	orrs	r2, r1
 80029e2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fe fb1c 	bl	8001020 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ee:	f7fe fb17 	bl	8001020 <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0cd      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a00:	4b45      	ldr	r3, [pc, #276]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	029b      	lsls	r3, r3, #10
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x552>
 8002a0c:	e01b      	b.n	8002a46 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a0e:	4b42      	ldr	r3, [pc, #264]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a12:	4b41      	ldr	r3, [pc, #260]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002a14:	4943      	ldr	r1, [pc, #268]	@ (8002b24 <HAL_RCC_OscConfig+0x688>)
 8002a16:	400a      	ands	r2, r1
 8002a18:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fb01 	bl	8001020 <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a24:	f7fe fafc 	bl	8001020 <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0b2      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a36:	4b38      	ldr	r3, [pc, #224]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	029b      	lsls	r3, r3, #10
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x588>
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a44:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d100      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5b4>
 8002a4e:	e0a4      	b.n	8002b9a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a50:	4b31      	ldr	r3, [pc, #196]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	220c      	movs	r2, #12
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d100      	bne.n	8002a5e <HAL_RCC_OscConfig+0x5c2>
 8002a5c:	e078      	b.n	8002b50 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d14c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b2c      	ldr	r3, [pc, #176]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002a6c:	492e      	ldr	r1, [pc, #184]	@ (8002b28 <HAL_RCC_OscConfig+0x68c>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fad5 	bl	8001020 <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe fad0 	bl	8001020 <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e086      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8e:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	049b      	lsls	r3, r3, #18
 8002a96:	4013      	ands	r3, r2
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002aae:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b2c <HAL_RCC_OscConfig+0x690>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	4b15      	ldr	r3, [pc, #84]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac8:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002ace:	2180      	movs	r1, #128	@ 0x80
 8002ad0:	0449      	lsls	r1, r1, #17
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe faa3 	bl	8001020 <HAL_GetTick>
 8002ada:	0003      	movs	r3, r0
 8002adc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fa9e 	bl	8001020 <HAL_GetTick>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e054      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	049b      	lsls	r3, r3, #18
 8002afa:	4013      	ands	r3, r2
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x644>
 8002afe:	e04c      	b.n	8002b9a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <HAL_RCC_OscConfig+0x67c>)
 8002b06:	4908      	ldr	r1, [pc, #32]	@ (8002b28 <HAL_RCC_OscConfig+0x68c>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fa88 	bl	8001020 <HAL_GetTick>
 8002b10:	0003      	movs	r3, r0
 8002b12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b14:	e015      	b.n	8002b42 <HAL_RCC_OscConfig+0x6a6>
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	00001388 	.word	0x00001388
 8002b20:	efffffff 	.word	0xefffffff
 8002b24:	fffeffff 	.word	0xfffeffff
 8002b28:	feffffff 	.word	0xfeffffff
 8002b2c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fe fa76 	bl	8001020 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e02c      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b42:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <HAL_RCC_OscConfig+0x708>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	049b      	lsls	r3, r3, #18
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x694>
 8002b4e:	e024      	b.n	8002b9a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e01f      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <HAL_RCC_OscConfig+0x708>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <HAL_RCC_OscConfig+0x708>)
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	23c0      	movs	r3, #192	@ 0xc0
 8002b6c:	025b      	lsls	r3, r3, #9
 8002b6e:	401a      	ands	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d10e      	bne.n	8002b96 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	23f0      	movs	r3, #240	@ 0xf0
 8002b8a:	039b      	lsls	r3, r3, #14
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b008      	add	sp, #32
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0bf      	b.n	8002d3c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b61      	ldr	r3, [pc, #388]	@ (8002d44 <HAL_RCC_ClockConfig+0x19c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d911      	bls.n	8002bee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b5e      	ldr	r3, [pc, #376]	@ (8002d44 <HAL_RCC_ClockConfig+0x19c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	4b5b      	ldr	r3, [pc, #364]	@ (8002d44 <HAL_RCC_ClockConfig+0x19c>)
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bdc:	4b59      	ldr	r3, [pc, #356]	@ (8002d44 <HAL_RCC_ClockConfig+0x19c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2201      	movs	r2, #1
 8002be2:	4013      	ands	r3, r2
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0a6      	b.n	8002d3c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d015      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d006      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c02:	4b51      	ldr	r3, [pc, #324]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4b50      	ldr	r3, [pc, #320]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002c08:	21e0      	movs	r1, #224	@ 0xe0
 8002c0a:	00c9      	lsls	r1, r1, #3
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b4d      	ldr	r3, [pc, #308]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	22f0      	movs	r2, #240	@ 0xf0
 8002c16:	4393      	bics	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d04c      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b44      	ldr	r3, [pc, #272]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	029b      	lsls	r3, r3, #10
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d120      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07a      	b.n	8002d3c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	2380      	movs	r3, #128	@ 0x80
 8002c54:	049b      	lsls	r3, r3, #18
 8002c56:	4013      	ands	r3, r2
 8002c58:	d114      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06e      	b.n	8002d3c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c66:	4b38      	ldr	r3, [pc, #224]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c6a:	2380      	movs	r3, #128	@ 0x80
 8002c6c:	029b      	lsls	r3, r3, #10
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d108      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e062      	b.n	8002d3c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e05b      	b.n	8002d3c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c84:	4b30      	ldr	r3, [pc, #192]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2203      	movs	r2, #3
 8002c8a:	4393      	bics	r3, r2
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4b2d      	ldr	r3, [pc, #180]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c98:	f7fe f9c2 	bl	8001020 <HAL_GetTick>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca0:	e009      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca2:	f7fe f9bd 	bl	8001020 <HAL_GetTick>
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <HAL_RCC_ClockConfig+0x1a4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e042      	b.n	8002d3c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b24      	ldr	r3, [pc, #144]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	220c      	movs	r2, #12
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1ec      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d44 <HAL_RCC_ClockConfig+0x19c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d211      	bcs.n	8002cfa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <HAL_RCC_ClockConfig+0x19c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4393      	bics	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	4b18      	ldr	r3, [pc, #96]	@ (8002d44 <HAL_RCC_ClockConfig+0x19c>)
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce8:	4b16      	ldr	r3, [pc, #88]	@ (8002d44 <HAL_RCC_ClockConfig+0x19c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2201      	movs	r2, #1
 8002cee:	4013      	ands	r3, r2
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e020      	b.n	8002d3c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2204      	movs	r2, #4
 8002d00:	4013      	ands	r3, r2
 8002d02:	d009      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d04:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a11      	ldr	r2, [pc, #68]	@ (8002d50 <HAL_RCC_ClockConfig+0x1a8>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002d14:	430a      	orrs	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d18:	f000 f820 	bl	8002d5c <HAL_RCC_GetSysClockFreq>
 8002d1c:	0001      	movs	r1, r0
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <HAL_RCC_ClockConfig+0x1a0>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	220f      	movs	r2, #15
 8002d26:	4013      	ands	r3, r2
 8002d28:	4a0a      	ldr	r2, [pc, #40]	@ (8002d54 <HAL_RCC_ClockConfig+0x1ac>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	000a      	movs	r2, r1
 8002d2e:	40da      	lsrs	r2, r3
 8002d30:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <HAL_RCC_ClockConfig+0x1b0>)
 8002d32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d34:	2003      	movs	r0, #3
 8002d36:	f7fe f92d 	bl	8000f94 <HAL_InitTick>
  
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b004      	add	sp, #16
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	00001388 	.word	0x00001388
 8002d50:	fffff8ff 	.word	0xfffff8ff
 8002d54:	08002ec8 	.word	0x08002ec8
 8002d58:	20000000 	.word	0x20000000

08002d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d76:	4b2d      	ldr	r3, [pc, #180]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	220c      	movs	r2, #12
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d046      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0xb8>
 8002d86:	d848      	bhi.n	8002e1a <HAL_RCC_GetSysClockFreq+0xbe>
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d002      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0x36>
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d003      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x3c>
 8002d90:	e043      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d92:	4b27      	ldr	r3, [pc, #156]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d94:	613b      	str	r3, [r7, #16]
      break;
 8002d96:	e043      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	0c9b      	lsrs	r3, r3, #18
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	4013      	ands	r3, r2
 8002da0:	4a24      	ldr	r2, [pc, #144]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
 8002da4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002da6:	4b21      	ldr	r3, [pc, #132]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	220f      	movs	r2, #15
 8002dac:	4013      	ands	r3, r2
 8002dae:	4a22      	ldr	r2, [pc, #136]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002db0:	5cd3      	ldrb	r3, [r2, r3]
 8002db2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	23c0      	movs	r3, #192	@ 0xc0
 8002db8:	025b      	lsls	r3, r3, #9
 8002dba:	401a      	ands	r2, r3
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	025b      	lsls	r3, r3, #9
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d109      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	481a      	ldr	r0, [pc, #104]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002dc8:	f7fd f99e 	bl	8000108 <__udivsi3>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	001a      	movs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4353      	muls	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e01a      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	23c0      	movs	r3, #192	@ 0xc0
 8002ddc:	025b      	lsls	r3, r3, #9
 8002dde:	401a      	ands	r2, r3
 8002de0:	23c0      	movs	r3, #192	@ 0xc0
 8002de2:	025b      	lsls	r3, r3, #9
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d109      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	4814      	ldr	r0, [pc, #80]	@ (8002e3c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002dec:	f7fd f98c 	bl	8000108 <__udivsi3>
 8002df0:	0003      	movs	r3, r0
 8002df2:	001a      	movs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4353      	muls	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	4810      	ldr	r0, [pc, #64]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002e00:	f7fd f982 	bl	8000108 <__udivsi3>
 8002e04:	0003      	movs	r3, r0
 8002e06:	001a      	movs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4353      	muls	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	613b      	str	r3, [r7, #16]
      break;
 8002e12:	e005      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002e14:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002e16:	613b      	str	r3, [r7, #16]
      break;
 8002e18:	e002      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e1a:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002e1c:	613b      	str	r3, [r7, #16]
      break;
 8002e1e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e20:	693b      	ldr	r3, [r7, #16]
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b006      	add	sp, #24
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	00f42400 	.word	0x00f42400
 8002e34:	08002ed8 	.word	0x08002ed8
 8002e38:	08002ee8 	.word	0x08002ee8
 8002e3c:	02dc6c00 	.word	0x02dc6c00
 8002e40:	007a1200 	.word	0x007a1200

08002e44 <memset>:
 8002e44:	0003      	movs	r3, r0
 8002e46:	1882      	adds	r2, r0, r2
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memset+0xa>
 8002e4c:	4770      	bx	lr
 8002e4e:	7019      	strb	r1, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	e7f9      	b.n	8002e48 <memset+0x4>

08002e54 <__libc_init_array>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	2600      	movs	r6, #0
 8002e58:	4c0c      	ldr	r4, [pc, #48]	@ (8002e8c <__libc_init_array+0x38>)
 8002e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8002e90 <__libc_init_array+0x3c>)
 8002e5c:	1b64      	subs	r4, r4, r5
 8002e5e:	10a4      	asrs	r4, r4, #2
 8002e60:	42a6      	cmp	r6, r4
 8002e62:	d109      	bne.n	8002e78 <__libc_init_array+0x24>
 8002e64:	2600      	movs	r6, #0
 8002e66:	f000 f823 	bl	8002eb0 <_init>
 8002e6a:	4c0a      	ldr	r4, [pc, #40]	@ (8002e94 <__libc_init_array+0x40>)
 8002e6c:	4d0a      	ldr	r5, [pc, #40]	@ (8002e98 <__libc_init_array+0x44>)
 8002e6e:	1b64      	subs	r4, r4, r5
 8002e70:	10a4      	asrs	r4, r4, #2
 8002e72:	42a6      	cmp	r6, r4
 8002e74:	d105      	bne.n	8002e82 <__libc_init_array+0x2e>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	00b3      	lsls	r3, r6, #2
 8002e7a:	58eb      	ldr	r3, [r5, r3]
 8002e7c:	4798      	blx	r3
 8002e7e:	3601      	adds	r6, #1
 8002e80:	e7ee      	b.n	8002e60 <__libc_init_array+0xc>
 8002e82:	00b3      	lsls	r3, r6, #2
 8002e84:	58eb      	ldr	r3, [r5, r3]
 8002e86:	4798      	blx	r3
 8002e88:	3601      	adds	r6, #1
 8002e8a:	e7f2      	b.n	8002e72 <__libc_init_array+0x1e>
 8002e8c:	08002ef8 	.word	0x08002ef8
 8002e90:	08002ef8 	.word	0x08002ef8
 8002e94:	08002efc 	.word	0x08002efc
 8002e98:	08002ef8 	.word	0x08002ef8

08002e9c <memcpy>:
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d100      	bne.n	8002ea6 <memcpy+0xa>
 8002ea4:	bd10      	pop	{r4, pc}
 8002ea6:	5ccc      	ldrb	r4, [r1, r3]
 8002ea8:	54c4      	strb	r4, [r0, r3]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	e7f8      	b.n	8002ea0 <memcpy+0x4>
	...

08002eb0 <_init>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr

08002ebc <_fini>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr
