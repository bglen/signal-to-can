
signal_to_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000254c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800260c  0800260c  0000360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800263c  0800263c  00004014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800263c  0800263c  00004014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800263c  0800263c  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800263c  0800263c  0000363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002640  08002640  00003640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002644  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000014  08002658  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002658  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006145  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b8  00000000  00000000  0000a181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  0000b840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004bb  00000000  00000000  0000bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f86  00000000  00000000  0000c35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d79  00000000  00000000  0000e2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a157  00000000  00000000  0001605a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a01b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001550  00000000  00000000  000a01f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000a1744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025f4 	.word	0x080025f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080025f4 	.word	0x080025f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <set_bit_timing_for_baud>:
 *  - 125 kbps: prescaler 24
 *
 * If your CAN kernel clock is not 48 MHz, adjust these values accordingly.
 */
static void set_bit_timing_for_baud(CAN_HandleTypeDef *hcan, uint32_t baud_enum)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
    /* Common time segments: 1 + 13 + 2 = 16 TQ, SJW=1 TQ */
    hcan->Init.SyncJumpWidth = CAN_SJW_1TQ;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2200      	movs	r2, #0
 800022e:	60da      	str	r2, [r3, #12]
    hcan->Init.TimeSeg1      = CAN_BS1_13TQ;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	22c0      	movs	r2, #192	@ 0xc0
 8000234:	0312      	lsls	r2, r2, #12
 8000236:	611a      	str	r2, [r3, #16]
    hcan->Init.TimeSeg2      = CAN_BS2_2TQ;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	@ 0x80
 800023c:	0352      	lsls	r2, r2, #13
 800023e:	615a      	str	r2, [r3, #20]

    switch (baud_enum) {
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	2b03      	cmp	r3, #3
 8000244:	d014      	beq.n	8000270 <set_bit_timing_for_baud+0x50>
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	2b03      	cmp	r3, #3
 800024a:	d805      	bhi.n	8000258 <set_bit_timing_for_baud+0x38>
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d006      	beq.n	8000260 <set_bit_timing_for_baud+0x40>
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d007      	beq.n	8000268 <set_bit_timing_for_baud+0x48>
    default:
    case 0: /* 125 kbps */
        hcan->Init.Prescaler = 24u;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2218      	movs	r2, #24
 800025c:	605a      	str	r2, [r3, #4]
        break;
 800025e:	e00b      	b.n	8000278 <set_bit_timing_for_baud+0x58>
    case 1: /* 250 kbps */
        hcan->Init.Prescaler = 12u;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	220c      	movs	r2, #12
 8000264:	605a      	str	r2, [r3, #4]
        break;
 8000266:	e007      	b.n	8000278 <set_bit_timing_for_baud+0x58>
    case 2: /* 500 kbps */
        hcan->Init.Prescaler = 6u;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2206      	movs	r2, #6
 800026c:	605a      	str	r2, [r3, #4]
        break;
 800026e:	e003      	b.n	8000278 <set_bit_timing_for_baud+0x58>
    case 3: /* 1 Mbps */
        hcan->Init.Prescaler = 3u;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2203      	movs	r2, #3
 8000274:	605a      	str	r2, [r3, #4]
        break;
 8000276:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000278:	46c0      	nop			@ (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <apply_accept_all_filter>:

/* Applies an "accept all" filter (mask=0) so all STD/EXT frames pass to FIFO0.
 * This is used at first init and if no explicit ID list has been configured.
 */
static HAL_StatusTypeDef apply_accept_all_filter(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	@ 0x28
 8000284:	af00      	add	r7, sp, #0
    if (s_can == NULL) {
 8000286:	4b1b      	ldr	r3, [pc, #108]	@ (80002f4 <apply_accept_all_filter+0x74>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d101      	bne.n	8000292 <apply_accept_all_filter+0x12>
        return HAL_ERROR;
 800028e:	2301      	movs	r3, #1
 8000290:	e02b      	b.n	80002ea <apply_accept_all_filter+0x6a>
    }

    CAN_FilterTypeDef filter;
    memset(&filter, 0, sizeof(filter));
 8000292:	003b      	movs	r3, r7
 8000294:	2228      	movs	r2, #40	@ 0x28
 8000296:	2100      	movs	r1, #0
 8000298:	0018      	movs	r0, r3
 800029a:	f002 f97f 	bl	800259c <memset>

    filter.FilterBank = 0u;
 800029e:	003b      	movs	r3, r7
 80002a0:	2200      	movs	r2, #0
 80002a2:	615a      	str	r2, [r3, #20]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80002a4:	003b      	movs	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	619a      	str	r2, [r3, #24]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80002aa:	003b      	movs	r3, r7
 80002ac:	2201      	movs	r2, #1
 80002ae:	61da      	str	r2, [r3, #28]

    /* Accept all: mask = 0x00000000. For STD IDs, ID and mask use 32-bit format:
       STDID at bits 31:21. Setting mask to zero makes all bits "don't care". */
    filter.FilterIdHigh      = 0x0000;
 80002b0:	003b      	movs	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
    filter.FilterIdLow       = 0x0000;
 80002b6:	003b      	movs	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	605a      	str	r2, [r3, #4]
    filter.FilterMaskIdHigh  = 0x0000;
 80002bc:	003b      	movs	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
    filter.FilterMaskIdLow   = 0x0000;
 80002c2:	003b      	movs	r3, r7
 80002c4:	2200      	movs	r2, #0
 80002c6:	60da      	str	r2, [r3, #12]

    filter.FilterFIFOAssignment = CAN_MODULE_RX_FIFO;
 80002c8:	003b      	movs	r3, r7
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
    filter.FilterActivation = ENABLE;
 80002ce:	003b      	movs	r3, r7
 80002d0:	2201      	movs	r2, #1
 80002d2:	621a      	str	r2, [r3, #32]
    filter.SlaveStartFilterBank = CAN_MODULE_FILTER_BANKS; /* not used on single CAN */
 80002d4:	003b      	movs	r3, r7
 80002d6:	220e      	movs	r2, #14
 80002d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_CAN_ConfigFilter(s_can, &filter);
 80002da:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <apply_accept_all_filter+0x74>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	003a      	movs	r2, r7
 80002e0:	0011      	movs	r1, r2
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 ffe6 	bl	80012b4 <HAL_CAN_ConfigFilter>
 80002e8:	0003      	movs	r3, r0
}
 80002ea:	0018      	movs	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b00a      	add	sp, #40	@ 0x28
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	46c0      	nop			@ (mov r8, r8)
 80002f4:	20000030 	.word	0x20000030

080002f8 <wait_for_tx_mailbox>:
    return HAL_OK;
}

/* Waits until a TX mailbox is free or the timeout elapses. */
static HAL_StatusTypeDef wait_for_tx_mailbox(uint32_t timeout_ms)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
    uint32_t start = HAL_GetTick();
 8000300:	f000 fc82 	bl	8000c08 <HAL_GetTick>
 8000304:	0003      	movs	r3, r0
 8000306:	60fb      	str	r3, [r7, #12]
    while (HAL_CAN_GetTxMailboxesFreeLevel(s_can) == 0u) {
 8000308:	e009      	b.n	800031e <wait_for_tx_mailbox+0x26>
        if ((HAL_GetTick() - start) >= timeout_ms) {
 800030a:	f000 fc7d 	bl	8000c08 <HAL_GetTick>
 800030e:	0002      	movs	r2, r0
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	1ad3      	subs	r3, r2, r3
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	429a      	cmp	r2, r3
 8000318:	d801      	bhi.n	800031e <wait_for_tx_mailbox+0x26>
            return HAL_TIMEOUT;
 800031a:	2303      	movs	r3, #3
 800031c:	e007      	b.n	800032e <wait_for_tx_mailbox+0x36>
    while (HAL_CAN_GetTxMailboxesFreeLevel(s_can) == 0u) {
 800031e:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <wait_for_tx_mailbox+0x40>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	0018      	movs	r0, r3
 8000324:	f001 f9d0 	bl	80016c8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d0ee      	beq.n	800030a <wait_for_tx_mailbox+0x12>
        }
    }
    return HAL_OK;
 800032c:	2300      	movs	r3, #0
}
 800032e:	0018      	movs	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	b004      	add	sp, #16
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			@ (mov r8, r8)
 8000338:	20000030 	.word	0x20000030

0800033c <CAN_Module_Init>:

/* Initializes the CAN peripheral with the requested baud, starts it, and applies
 * a default permissive filter. Stores the provided node_id.
 */
HAL_StatusTypeDef CAN_Module_Init(CAN_HandleTypeDef *hcan, uint32_t baud_enum)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
    if (hcan == NULL) {
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d101      	bne.n	8000350 <CAN_Module_Init+0x14>
        return HAL_ERROR;
 800034c:	2301      	movs	r3, #1
 800034e:	e041      	b.n	80003d4 <CAN_Module_Init+0x98>
    }

    s_can = hcan;
 8000350:	4b22      	ldr	r3, [pc, #136]	@ (80003dc <CAN_Module_Init+0xa0>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	601a      	str	r2, [r3, #0]
    s_baud_enum = baud_enum;
 8000356:	4b22      	ldr	r3, [pc, #136]	@ (80003e0 <CAN_Module_Init+0xa4>)
 8000358:	683a      	ldr	r2, [r7, #0]
 800035a:	601a      	str	r2, [r3, #0]

    /* Base init fields. These may be overridden by CubeMX; set key ones here. */
    s_can->Init.Mode = CAN_MODE_NORMAL;
 800035c:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <CAN_Module_Init+0xa0>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
    s_can->Init.TimeTriggeredMode = DISABLE;
 8000364:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <CAN_Module_Init+0xa0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2200      	movs	r2, #0
 800036a:	761a      	strb	r2, [r3, #24]
    s_can->Init.AutoBusOff = ENABLE;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <CAN_Module_Init+0xa0>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2201      	movs	r2, #1
 8000372:	765a      	strb	r2, [r3, #25]
    s_can->Init.AutoWakeUp = ENABLE;
 8000374:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <CAN_Module_Init+0xa0>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2201      	movs	r2, #1
 800037a:	769a      	strb	r2, [r3, #26]
    s_can->Init.AutoRetransmission = ENABLE;
 800037c:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <CAN_Module_Init+0xa0>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2201      	movs	r2, #1
 8000382:	76da      	strb	r2, [r3, #27]
    s_can->Init.ReceiveFifoLocked = DISABLE;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <CAN_Module_Init+0xa0>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2200      	movs	r2, #0
 800038a:	771a      	strb	r2, [r3, #28]
    s_can->Init.TransmitFifoPriority = ENABLE;
 800038c:	4b13      	ldr	r3, [pc, #76]	@ (80003dc <CAN_Module_Init+0xa0>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2201      	movs	r2, #1
 8000392:	775a      	strb	r2, [r3, #29]

    set_bit_timing_for_baud(s_can, baud_enum);
 8000394:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <CAN_Module_Init+0xa0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	683a      	ldr	r2, [r7, #0]
 800039a:	0011      	movs	r1, r2
 800039c:	0018      	movs	r0, r3
 800039e:	f7ff ff3f 	bl	8000220 <set_bit_timing_for_baud>

    if (HAL_CAN_Init(s_can) != HAL_OK) {
 80003a2:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <CAN_Module_Init+0xa0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 fe86 	bl	80010b8 <HAL_CAN_Init>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <CAN_Module_Init+0x78>
        return HAL_ERROR;
 80003b0:	2301      	movs	r3, #1
 80003b2:	e00f      	b.n	80003d4 <CAN_Module_Init+0x98>
    }

    /* Default to accept-all until user configures specific IDs. */
    if (apply_accept_all_filter() != HAL_OK) {
 80003b4:	f7ff ff64 	bl	8000280 <apply_accept_all_filter>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <CAN_Module_Init+0x84>
        return HAL_ERROR;
 80003bc:	2301      	movs	r3, #1
 80003be:	e009      	b.n	80003d4 <CAN_Module_Init+0x98>
    }

    if (HAL_CAN_Start(s_can) != HAL_OK) {
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <CAN_Module_Init+0xa0>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 f867 	bl	8001498 <HAL_CAN_Start>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <CAN_Module_Init+0x96>
        return HAL_ERROR;
 80003ce:	2301      	movs	r3, #1
 80003d0:	e000      	b.n	80003d4 <CAN_Module_Init+0x98>
    }

    return HAL_OK;
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	0018      	movs	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b002      	add	sp, #8
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000030 	.word	0x20000030
 80003e0:	20000000 	.word	0x20000000

080003e4 <CAN_Module_Send_Std>:

/* Sends a Standard ID data frame with the given payload and DLC.
 * timeout_ms applies to waiting for a free TX mailbox.
 */
HAL_StatusTypeDef CAN_Module_Send_Std(uint16_t std_id, const uint8_t *data, uint8_t dlc, uint32_t timeout_ms)
{
 80003e4:	b5b0      	push	{r4, r5, r7, lr}
 80003e6:	b08c      	sub	sp, #48	@ 0x30
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60b9      	str	r1, [r7, #8]
 80003ec:	0011      	movs	r1, r2
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	230e      	movs	r3, #14
 80003f2:	18fb      	adds	r3, r7, r3
 80003f4:	1c02      	adds	r2, r0, #0
 80003f6:	801a      	strh	r2, [r3, #0]
 80003f8:	200d      	movs	r0, #13
 80003fa:	183b      	adds	r3, r7, r0
 80003fc:	1c0a      	adds	r2, r1, #0
 80003fe:	701a      	strb	r2, [r3, #0]
    if (s_can == NULL || data == NULL || dlc > 8u) {
 8000400:	4b20      	ldr	r3, [pc, #128]	@ (8000484 <CAN_Module_Send_Std+0xa0>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d006      	beq.n	8000416 <CAN_Module_Send_Std+0x32>
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d003      	beq.n	8000416 <CAN_Module_Send_Std+0x32>
 800040e:	183b      	adds	r3, r7, r0
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b08      	cmp	r3, #8
 8000414:	d901      	bls.n	800041a <CAN_Module_Send_Std+0x36>
        return HAL_ERROR;
 8000416:	2301      	movs	r3, #1
 8000418:	e030      	b.n	800047c <CAN_Module_Send_Std+0x98>
    }

    HAL_StatusTypeDef st = wait_for_tx_mailbox(timeout_ms);
 800041a:	252f      	movs	r5, #47	@ 0x2f
 800041c:	197c      	adds	r4, r7, r5
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	0018      	movs	r0, r3
 8000422:	f7ff ff69 	bl	80002f8 <wait_for_tx_mailbox>
 8000426:	0003      	movs	r3, r0
 8000428:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) {
 800042a:	197b      	adds	r3, r7, r5
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <CAN_Module_Send_Std+0x54>
        return st;
 8000432:	197b      	adds	r3, r7, r5
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	e021      	b.n	800047c <CAN_Module_Send_Std+0x98>
    }

    CAN_TxHeaderTypeDef tx_header;
    uint32_t mailbox;

    tx_header.StdId = (std_id & 0x7FFu);
 8000438:	230e      	movs	r3, #14
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	055b      	lsls	r3, r3, #21
 8000440:	0d5a      	lsrs	r2, r3, #21
 8000442:	2114      	movs	r1, #20
 8000444:	187b      	adds	r3, r7, r1
 8000446:	601a      	str	r2, [r3, #0]
    tx_header.ExtId = 0u;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
    tx_header.IDE   = CAN_ID_STD;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
    tx_header.RTR   = CAN_RTR_DATA;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
    tx_header.DLC   = dlc;
 800045a:	230d      	movs	r3, #13
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	781a      	ldrb	r2, [r3, #0]
 8000460:	187b      	adds	r3, r7, r1
 8000462:	611a      	str	r2, [r3, #16]
    tx_header.TransmitGlobalTime = DISABLE;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2200      	movs	r2, #0
 8000468:	751a      	strb	r2, [r3, #20]

    return HAL_CAN_AddTxMessage(s_can, &tx_header, (uint8_t *)data, &mailbox);
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <CAN_Module_Send_Std+0xa0>)
 800046c:	6818      	ldr	r0, [r3, #0]
 800046e:	2310      	movs	r3, #16
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	68ba      	ldr	r2, [r7, #8]
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f001 f855 	bl	8001524 <HAL_CAN_AddTxMessage>
 800047a:	0003      	movs	r3, r0
}
 800047c:	0018      	movs	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	b00c      	add	sp, #48	@ 0x30
 8000482:	bdb0      	pop	{r4, r5, r7, pc}
 8000484:	20000030 	.word	0x20000030

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048c:	f000 fb62 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000490:	f000 f830 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000494:	f000 f96a 	bl	800076c <MX_GPIO_Init>
  MX_CAN_Init();
 8000498:	f000 f930 	bl	80006fc <MX_CAN_Init>
  MX_ADC_Init();
 800049c:	f000 f878 	bl	8000590 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

	// Set Standby Pin on CAN transiever low (normal mode) before initializing
	HAL_GPIO_WritePin(GPIOB, CAN_STANDBY_Pin, GPIO_PIN_RESET);
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <main+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	2110      	movs	r1, #16
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 fb6c 	bl	8001b84 <HAL_GPIO_WritePin>

	if (CAN_Module_Init(&hcan, baud_enum) != HAL_OK) {
 80004ac:	4b0d      	ldr	r3, [pc, #52]	@ (80004e4 <main+0x5c>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <main+0x60>)
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f7ff ff41 	bl	800033c <CAN_Module_Init>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <main+0x3a>
		Error_Handler();
 80004be:	f000 fa15 	bl	80008ec <Error_Handler>
	}

	last_tick = HAL_GetTick();
 80004c2:	f000 fba1 	bl	8000c08 <HAL_GetTick>
 80004c6:	0002      	movs	r2, r0
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <main+0x64>)
 80004ca:	601a      	str	r2, [r3, #0]
	heartbeat_tick = last_tick;
 80004cc:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <main+0x64>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <main+0x68>)
 80004d2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		Heartbeat_Task();
 80004d4:	f000 f9a0 	bl	8000818 <Heartbeat_Task>

		Test_Can_Task();
 80004d8:	f000 f9bc 	bl	8000854 <Test_Can_Task>
		Heartbeat_Task();
 80004dc:	46c0      	nop			@ (mov r8, r8)
 80004de:	e7f9      	b.n	80004d4 <main+0x4c>
 80004e0:	48000400 	.word	0x48000400
 80004e4:	20000004 	.word	0x20000004
 80004e8:	20000074 	.word	0x20000074
 80004ec:	200000a0 	.word	0x200000a0
 80004f0:	2000009c 	.word	0x2000009c

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b093      	sub	sp, #76	@ 0x4c
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	2414      	movs	r4, #20
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2334      	movs	r3, #52	@ 0x34
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f002 f849 	bl	800259c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	2310      	movs	r3, #16
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f002 f842 	bl	800259c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000518:	0021      	movs	r1, r4
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2211      	movs	r2, #17
 800051e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2201      	movs	r2, #1
 8000524:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2201      	movs	r2, #1
 800052a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2210      	movs	r2, #16
 8000530:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2202      	movs	r2, #2
 8000536:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2280      	movs	r2, #128	@ 0x80
 800053c:	0252      	lsls	r2, r2, #9
 800053e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2280      	movs	r2, #128	@ 0x80
 8000544:	02d2      	lsls	r2, r2, #11
 8000546:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	187b      	adds	r3, r7, r1
 8000550:	0018      	movs	r0, r3
 8000552:	f001 fb4f 	bl	8001bf4 <HAL_RCC_OscConfig>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800055a:	f000 f9c7 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2207      	movs	r2, #7
 8000562:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2202      	movs	r2, #2
 8000568:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2101      	movs	r1, #1
 800057a:	0018      	movs	r0, r3
 800057c:	f001 fec0 	bl	8002300 <HAL_RCC_ClockConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000584:	f000 f9b2 	bl	80008ec <Error_Handler>
  }
}
 8000588:	46c0      	nop			@ (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b013      	add	sp, #76	@ 0x4c
 800058e:	bd90      	pop	{r4, r7, pc}

08000590 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	0018      	movs	r0, r3
 800059a:	230c      	movs	r3, #12
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f001 fffc 	bl	800259c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005a4:	4b53      	ldr	r3, [pc, #332]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005a6:	4a54      	ldr	r2, [pc, #336]	@ (80006f8 <MX_ADC_Init+0x168>)
 80005a8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005aa:	4b52      	ldr	r3, [pc, #328]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005b0:	4b50      	ldr	r3, [pc, #320]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b4f      	ldr	r3, [pc, #316]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005bc:	4b4d      	ldr	r3, [pc, #308]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005be:	2201      	movs	r2, #1
 80005c0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	4b4c      	ldr	r3, [pc, #304]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005c8:	4b4a      	ldr	r3, [pc, #296]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80005ce:	4b49      	ldr	r3, [pc, #292]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005d4:	4b47      	ldr	r3, [pc, #284]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005da:	4b46      	ldr	r3, [pc, #280]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005dc:	2200      	movs	r2, #0
 80005de:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b44      	ldr	r3, [pc, #272]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005e2:	22c2      	movs	r2, #194	@ 0xc2
 80005e4:	32ff      	adds	r2, #255	@ 0xff
 80005e6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e8:	4b42      	ldr	r3, [pc, #264]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005ee:	4b41      	ldr	r3, [pc, #260]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005f0:	2224      	movs	r2, #36	@ 0x24
 80005f2:	2100      	movs	r1, #0
 80005f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005f6:	4b3f      	ldr	r3, [pc, #252]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005fc:	4b3d      	ldr	r3, [pc, #244]	@ (80006f4 <MX_ADC_Init+0x164>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fb0c 	bl	8000c1c <HAL_ADC_Init>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000608:	f000 f970 	bl	80008ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2280      	movs	r2, #128	@ 0x80
 8000616:	0152      	lsls	r2, r2, #5
 8000618:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2280      	movs	r2, #128	@ 0x80
 800061e:	0552      	lsls	r2, r2, #21
 8000620:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000622:	1d3a      	adds	r2, r7, #4
 8000624:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <MX_ADC_Init+0x164>)
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fc37 	bl	8000e9c <HAL_ADC_ConfigChannel>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000632:	f000 f95b 	bl	80008ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2201      	movs	r2, #1
 800063a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800063c:	1d3a      	adds	r2, r7, #4
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <MX_ADC_Init+0x164>)
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fc2a 	bl	8000e9c <HAL_ADC_ConfigChannel>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 800064c:	f000 f94e 	bl	80008ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2202      	movs	r2, #2
 8000654:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000656:	1d3a      	adds	r2, r7, #4
 8000658:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <MX_ADC_Init+0x164>)
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fc1d 	bl	8000e9c <HAL_ADC_ConfigChannel>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000666:	f000 f941 	bl	80008ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2203      	movs	r2, #3
 800066e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000670:	1d3a      	adds	r2, r7, #4
 8000672:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <MX_ADC_Init+0x164>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fc10 	bl	8000e9c <HAL_ADC_ConfigChannel>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000680:	f000 f934 	bl	80008ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2204      	movs	r2, #4
 8000688:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800068a:	1d3a      	adds	r2, r7, #4
 800068c:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <MX_ADC_Init+0x164>)
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fc03 	bl	8000e9c <HAL_ADC_ConfigChannel>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800069a:	f000 f927 	bl	80008ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2205      	movs	r2, #5
 80006a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006a4:	1d3a      	adds	r2, r7, #4
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_ADC_Init+0x164>)
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fbf6 	bl	8000e9c <HAL_ADC_ConfigChannel>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80006b4:	f000 f91a 	bl	80008ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2206      	movs	r2, #6
 80006bc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_ADC_Init+0x164>)
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fbe9 	bl	8000e9c <HAL_ADC_ConfigChannel>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80006ce:	f000 f90d 	bl	80008ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2207      	movs	r2, #7
 80006d6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006d8:	1d3a      	adds	r2, r7, #4
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_ADC_Init+0x164>)
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fbdc 	bl	8000e9c <HAL_ADC_ConfigChannel>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80006e8:	f000 f900 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b004      	add	sp, #16
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000034 	.word	0x20000034
 80006f8:	40012400 	.word	0x40012400

080006fc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_CAN_Init+0x68>)
 8000702:	4a19      	ldr	r2, [pc, #100]	@ (8000768 <MX_CAN_Init+0x6c>)
 8000704:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_CAN_Init+0x68>)
 8000708:	2206      	movs	r2, #6
 800070a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_CAN_Init+0x68>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_CAN_Init+0x68>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_CAN_Init+0x68>)
 800071a:	22c0      	movs	r2, #192	@ 0xc0
 800071c:	0312      	lsls	r2, r2, #12
 800071e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000720:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_CAN_Init+0x68>)
 8000722:	2280      	movs	r2, #128	@ 0x80
 8000724:	0352      	lsls	r2, r2, #13
 8000726:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_CAN_Init+0x68>)
 800072a:	2200      	movs	r2, #0
 800072c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <MX_CAN_Init+0x68>)
 8000730:	2200      	movs	r2, #0
 8000732:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000734:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_CAN_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <MX_CAN_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000740:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_CAN_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000746:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <MX_CAN_Init+0x68>)
 8000748:	2200      	movs	r2, #0
 800074a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <MX_CAN_Init+0x68>)
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fcb2 	bl	80010b8 <HAL_CAN_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f8c8 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	20000074 	.word	0x20000074
 8000768:	40006400 	.word	0x40006400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b089      	sub	sp, #36	@ 0x24
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	240c      	movs	r4, #12
 8000774:	193b      	adds	r3, r7, r4
 8000776:	0018      	movs	r0, r3
 8000778:	2314      	movs	r3, #20
 800077a:	001a      	movs	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	f001 ff0d 	bl	800259c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <MX_GPIO_Init+0xa4>)
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <MX_GPIO_Init+0xa4>)
 8000788:	2180      	movs	r1, #128	@ 0x80
 800078a:	03c9      	lsls	r1, r1, #15
 800078c:	430a      	orrs	r2, r1
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <MX_GPIO_Init+0xa4>)
 8000792:	695a      	ldr	r2, [r3, #20]
 8000794:	2380      	movs	r3, #128	@ 0x80
 8000796:	03db      	lsls	r3, r3, #15
 8000798:	4013      	ands	r3, r2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_GPIO_Init+0xa4>)
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <MX_GPIO_Init+0xa4>)
 80007a4:	2180      	movs	r1, #128	@ 0x80
 80007a6:	0289      	lsls	r1, r1, #10
 80007a8:	430a      	orrs	r2, r1
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_GPIO_Init+0xa4>)
 80007ae:	695a      	ldr	r2, [r3, #20]
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	029b      	lsls	r3, r3, #10
 80007b4:	4013      	ands	r3, r2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <MX_GPIO_Init+0xa4>)
 80007bc:	695a      	ldr	r2, [r3, #20]
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_GPIO_Init+0xa4>)
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	02c9      	lsls	r1, r1, #11
 80007c4:	430a      	orrs	r2, r1
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_GPIO_Init+0xa4>)
 80007ca:	695a      	ldr	r2, [r3, #20]
 80007cc:	2380      	movs	r3, #128	@ 0x80
 80007ce:	02db      	lsls	r3, r3, #11
 80007d0:	4013      	ands	r3, r2
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_1_Pin|LED_STATUS_2_Pin|CAN_STANDBY_Pin, GPIO_PIN_RESET);
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_GPIO_Init+0xa8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	2113      	movs	r1, #19
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 f9d1 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STATUS_1_Pin LED_STATUS_2_Pin CAN_STANDBY_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_1_Pin|LED_STATUS_2_Pin|CAN_STANDBY_Pin;
 80007e2:	0021      	movs	r1, r4
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2213      	movs	r2, #19
 80007e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	4a05      	ldr	r2, [pc, #20]	@ (8000814 <MX_GPIO_Init+0xa8>)
 8000800:	0019      	movs	r1, r3
 8000802:	0010      	movs	r0, r2
 8000804:	f001 f856 	bl	80018b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b009      	add	sp, #36	@ 0x24
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	48000400 	.word	0x48000400

08000818 <Heartbeat_Task>:

/* USER CODE BEGIN 4 */

void Heartbeat_Task(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    /* Check if enough time has passed */
    if ((HAL_GetTick() - heartbeat_tick) >= HEARTBEAT_INTERVAL_MS)
 800081c:	f000 f9f4 	bl	8000c08 <HAL_GetTick>
 8000820:	0002      	movs	r2, r0
 8000822:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <Heartbeat_Task+0x34>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	1ad2      	subs	r2, r2, r3
 8000828:	23fa      	movs	r3, #250	@ 0xfa
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	429a      	cmp	r2, r3
 800082e:	d309      	bcc.n	8000844 <Heartbeat_Task+0x2c>
    {
        /* Toggle the LED */
        HAL_GPIO_TogglePin(GPIOB, LED_STATUS_1_Pin); // Example: Port B
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <Heartbeat_Task+0x38>)
 8000832:	2101      	movs	r1, #1
 8000834:	0018      	movs	r0, r3
 8000836:	f001 f9c2 	bl	8001bbe <HAL_GPIO_TogglePin>

        /* Update last toggle time */
        heartbeat_tick = HAL_GetTick();
 800083a:	f000 f9e5 	bl	8000c08 <HAL_GetTick>
 800083e:	0002      	movs	r2, r0
 8000840:	4b02      	ldr	r3, [pc, #8]	@ (800084c <Heartbeat_Task+0x34>)
 8000842:	601a      	str	r2, [r3, #0]
    }
}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	2000009c 	.word	0x2000009c
 8000850:	48000400 	.word	0x48000400

08000854 <Test_Can_Task>:
/**
 * @brief Periodically send a simple CAN test message and flash LED on success.
 *        Note: Updated to use CAN_Module_Send_Std() from can_module.c.
 */
static void Test_Can_Task(void)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 800085a:	f000 f9d5 	bl	8000c08 <HAL_GetTick>
 800085e:	0003      	movs	r3, r0
 8000860:	60fb      	str	r3, [r7, #12]
    if ((now - last_tick) < TEST_SEND_INTERVAL_MS) {
 8000862:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <Test_Can_Task+0x88>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	1ad2      	subs	r2, r2, r3
 800086a:	23fa      	movs	r3, #250	@ 0xfa
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	429a      	cmp	r2, r3
 8000870:	d330      	bcc.n	80008d4 <Test_Can_Task+0x80>
        return;
    }
    last_tick = now;
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <Test_Can_Task+0x88>)
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	601a      	str	r2, [r3, #0]

    /* Minimal 1-byte test payload (kept as-is). */
    uint8_t data = 1;
 8000878:	1dbb      	adds	r3, r7, #6
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]

    /* Short TX timeout so we don't block the task loop. */
    const uint32_t tx_timeout_ms = 10u;
 800087e:	230a      	movs	r3, #10
 8000880:	60bb      	str	r3, [r7, #8]

    /* Updated call: (std_id, data_ptr, dlc, timeout_ms). */
    HAL_StatusTypeDef st = CAN_Module_Send_Std(TEST_CAN_ID, &data, 1u, tx_timeout_ms);
 8000882:	1dfc      	adds	r4, r7, #7
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	1db9      	adds	r1, r7, #6
 8000888:	2292      	movs	r2, #146	@ 0x92
 800088a:	0050      	lsls	r0, r2, #1
 800088c:	2201      	movs	r2, #1
 800088e:	f7ff fda9 	bl	80003e4 <CAN_Module_Send_Std>
 8000892:	0003      	movs	r3, r0
 8000894:	7023      	strb	r3, [r4, #0]

    g_can_dbg.last_tx_status = st;
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <Test_Can_Task+0x8c>)
 8000898:	1dfa      	adds	r2, r7, #7
 800089a:	7812      	ldrb	r2, [r2, #0]
 800089c:	701a      	strb	r2, [r3, #0]
    g_can_dbg.last_hal_error = HAL_CAN_GetError(&hcan);
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <Test_Can_Task+0x90>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 ff49 	bl	8001738 <HAL_CAN_GetError>
 80008a6:	0002      	movs	r2, r0
 80008a8:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <Test_Can_Task+0x8c>)
 80008aa:	605a      	str	r2, [r3, #4]
    g_can_dbg.last_esr       = hcan.Instance->ESR;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <Test_Can_Task+0x90>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	699a      	ldr	r2, [r3, #24]
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <Test_Can_Task+0x8c>)
 80008b4:	609a      	str	r2, [r3, #8]
    g_can_dbg.last_tsr       = hcan.Instance->TSR;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <Test_Can_Task+0x90>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <Test_Can_Task+0x8c>)
 80008be:	60da      	str	r2, [r3, #12]

    if (st == HAL_OK) {
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d106      	bne.n	80008d6 <Test_Can_Task+0x82>
        HAL_GPIO_TogglePin(GPIOB, LED_STATUS_2_Pin);
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <Test_Can_Task+0x94>)
 80008ca:	2102      	movs	r1, #2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 f976 	bl	8001bbe <HAL_GPIO_TogglePin>
 80008d2:	e000      	b.n	80008d6 <Test_Can_Task+0x82>
        return;
 80008d4:	46c0      	nop			@ (mov r8, r8)
    }
}
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b005      	add	sp, #20
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	200000a0 	.word	0x200000a0
 80008e0:	200000a4 	.word	0x200000a4
 80008e4:	20000074 	.word	0x20000074
 80008e8:	48000400 	.word	0x48000400

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <HAL_MspInit+0x44>)
 8000900:	699a      	ldr	r2, [r3, #24]
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <HAL_MspInit+0x44>)
 8000904:	2101      	movs	r1, #1
 8000906:	430a      	orrs	r2, r1
 8000908:	619a      	str	r2, [r3, #24]
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <HAL_MspInit+0x44>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	2201      	movs	r2, #1
 8000910:	4013      	ands	r3, r2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <HAL_MspInit+0x44>)
 8000918:	69da      	ldr	r2, [r3, #28]
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <HAL_MspInit+0x44>)
 800091c:	2180      	movs	r1, #128	@ 0x80
 800091e:	0549      	lsls	r1, r1, #21
 8000920:	430a      	orrs	r2, r1
 8000922:	61da      	str	r2, [r3, #28]
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <HAL_MspInit+0x44>)
 8000926:	69da      	ldr	r2, [r3, #28]
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	055b      	lsls	r3, r3, #21
 800092c:	4013      	ands	r3, r2
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b002      	add	sp, #8
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b08b      	sub	sp, #44	@ 0x2c
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	2414      	movs	r4, #20
 800094a:	193b      	adds	r3, r7, r4
 800094c:	0018      	movs	r0, r3
 800094e:	2314      	movs	r3, #20
 8000950:	001a      	movs	r2, r3
 8000952:	2100      	movs	r1, #0
 8000954:	f001 fe22 	bl	800259c <memset>
  if(hadc->Instance==ADC1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a19      	ldr	r2, [pc, #100]	@ (80009c4 <HAL_ADC_MspInit+0x84>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d12b      	bne.n	80009ba <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <HAL_ADC_MspInit+0x88>)
 8000964:	699a      	ldr	r2, [r3, #24]
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_ADC_MspInit+0x88>)
 8000968:	2180      	movs	r1, #128	@ 0x80
 800096a:	0089      	lsls	r1, r1, #2
 800096c:	430a      	orrs	r2, r1
 800096e:	619a      	str	r2, [r3, #24]
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_ADC_MspInit+0x88>)
 8000972:	699a      	ldr	r2, [r3, #24]
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4013      	ands	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_ADC_MspInit+0x88>)
 8000980:	695a      	ldr	r2, [r3, #20]
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <HAL_ADC_MspInit+0x88>)
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	0289      	lsls	r1, r1, #10
 8000988:	430a      	orrs	r2, r1
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_ADC_MspInit+0x88>)
 800098e:	695a      	ldr	r2, [r3, #20]
 8000990:	2380      	movs	r3, #128	@ 0x80
 8000992:	029b      	lsls	r3, r3, #10
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800099a:	193b      	adds	r3, r7, r4
 800099c:	22ff      	movs	r2, #255	@ 0xff
 800099e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2203      	movs	r2, #3
 80009a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	193a      	adds	r2, r7, r4
 80009ae:	2390      	movs	r3, #144	@ 0x90
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	0011      	movs	r1, r2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 ff7d 	bl	80018b4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b00b      	add	sp, #44	@ 0x2c
 80009c0:	bd90      	pop	{r4, r7, pc}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	40012400 	.word	0x40012400
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b08b      	sub	sp, #44	@ 0x2c
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	2414      	movs	r4, #20
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	0018      	movs	r0, r3
 80009da:	2314      	movs	r3, #20
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f001 fddc 	bl	800259c <memset>
  if(hcan->Instance==CAN)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <HAL_CAN_MspInit+0xc0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d14a      	bne.n	8000a84 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ee:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <HAL_CAN_MspInit+0xc4>)
 80009f0:	69da      	ldr	r2, [r3, #28]
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <HAL_CAN_MspInit+0xc4>)
 80009f4:	2180      	movs	r1, #128	@ 0x80
 80009f6:	0489      	lsls	r1, r1, #18
 80009f8:	430a      	orrs	r2, r1
 80009fa:	61da      	str	r2, [r3, #28]
 80009fc:	4b24      	ldr	r3, [pc, #144]	@ (8000a90 <HAL_CAN_MspInit+0xc4>)
 80009fe:	69da      	ldr	r2, [r3, #28]
 8000a00:	2380      	movs	r3, #128	@ 0x80
 8000a02:	049b      	lsls	r3, r3, #18
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <HAL_CAN_MspInit+0xc4>)
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <HAL_CAN_MspInit+0xc4>)
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	0289      	lsls	r1, r1, #10
 8000a14:	430a      	orrs	r2, r1
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <HAL_CAN_MspInit+0xc4>)
 8000a1a:	695a      	ldr	r2, [r3, #20]
 8000a1c:	2380      	movs	r3, #128	@ 0x80
 8000a1e:	029b      	lsls	r3, r3, #10
 8000a20:	4013      	ands	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2202      	movs	r2, #2
 8000a32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2201      	movs	r2, #1
 8000a38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2204      	movs	r2, #4
 8000a44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	193a      	adds	r2, r7, r4
 8000a48:	2390      	movs	r3, #144	@ 0x90
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 ff30 	bl	80018b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a54:	0021      	movs	r1, r4
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	0152      	lsls	r2, r2, #5
 8000a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2204      	movs	r2, #4
 8000a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	187a      	adds	r2, r7, r1
 8000a78:	2390      	movs	r3, #144	@ 0x90
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 ff18 	bl	80018b4 <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b00b      	add	sp, #44	@ 0x2c
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	40006400 	.word	0x40006400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f892 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad0:	4813      	ldr	r0, [pc, #76]	@ (8000b20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad4:	f7ff fff7 	bl	8000ac6 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000ad8:	4812      	ldr	r0, [pc, #72]	@ (8000b24 <LoopForever+0x6>)
    LDR R1, [R0]
 8000ada:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000adc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ade:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <LoopForever+0xa>)
    CMP R1, R2
 8000ae0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ae2:	d105      	bne.n	8000af0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000ae4:	4811      	ldr	r0, [pc, #68]	@ (8000b2c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000ae6:	4912      	ldr	r1, [pc, #72]	@ (8000b30 <LoopForever+0x12>)
    STR R1, [R0]
 8000ae8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000aea:	4812      	ldr	r0, [pc, #72]	@ (8000b34 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000aec:	4912      	ldr	r1, [pc, #72]	@ (8000b38 <LoopForever+0x1a>)
    STR R1, [R0]
 8000aee:	6001      	str	r1, [r0, #0]

08000af0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	4812      	ldr	r0, [pc, #72]	@ (8000b3c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000af2:	4913      	ldr	r1, [pc, #76]	@ (8000b40 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000af4:	4a13      	ldr	r2, [pc, #76]	@ (8000b44 <LoopForever+0x26>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a10      	ldr	r2, [pc, #64]	@ (8000b48 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b08:	4c10      	ldr	r4, [pc, #64]	@ (8000b4c <LoopForever+0x2e>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b16:	f001 fd49 	bl	80025ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1a:	f7ff fcb5 	bl	8000488 <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   r0, =_estack
 8000b20:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000b24:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b28:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000b2c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000b30:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b34:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b38:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b44:	08002644 	.word	0x08002644
  ldr r2, =_sbss
 8000b48:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b4c:	200000c0 	.word	0x200000c0

08000b50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_IRQHandler>
	...

08000b54 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <HAL_Init+0x24>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_Init+0x24>)
 8000b5e:	2110      	movs	r1, #16
 8000b60:	430a      	orrs	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f809 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6a:	f7ff fec5 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <HAL_InitTick+0x5c>)
 8000b86:	681c      	ldr	r4, [r3, #0]
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_InitTick+0x60>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	23fa      	movs	r3, #250	@ 0xfa
 8000b90:	0098      	lsls	r0, r3, #2
 8000b92:	f7ff fab9 	bl	8000108 <__udivsi3>
 8000b96:	0003      	movs	r3, r0
 8000b98:	0019      	movs	r1, r3
 8000b9a:	0020      	movs	r0, r4
 8000b9c:	f7ff fab4 	bl	8000108 <__udivsi3>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 fe79 	bl	800189a <HAL_SYSTICK_Config>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e00f      	b.n	8000bd0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d80b      	bhi.n	8000bce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	425b      	negs	r3, r3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fe56 	bl	8001870 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_InitTick+0x64>)
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b003      	add	sp, #12
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000010 	.word	0x20000010
 8000be0:	2000000c 	.word	0x2000000c

08000be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	001a      	movs	r2, r3
 8000bee:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <HAL_IncTick+0x20>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	18d2      	adds	r2, r2, r3
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <HAL_IncTick+0x20>)
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	20000010 	.word	0x20000010
 8000c04:	200000bc 	.word	0x200000bc

08000c08 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b02      	ldr	r3, [pc, #8]	@ (8000c18 <HAL_GetTick+0x10>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	200000bc 	.word	0x200000bc

08000c1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e125      	b.n	8000e86 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10a      	bne.n	8000c58 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2234      	movs	r2, #52	@ 0x34
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	0018      	movs	r0, r3
 8000c54:	f7ff fe74 	bl	8000940 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d000      	beq.n	8000c64 <HAL_ADC_Init+0x48>
 8000c62:	e103      	b.n	8000e6c <HAL_ADC_Init+0x250>
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d000      	beq.n	8000c70 <HAL_ADC_Init+0x54>
 8000c6e:	e0fd      	b.n	8000e6c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2204      	movs	r2, #4
 8000c78:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c7a:	d000      	beq.n	8000c7e <HAL_ADC_Init+0x62>
 8000c7c:	e0f6      	b.n	8000e6c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c82:	4a83      	ldr	r2, [pc, #524]	@ (8000e90 <HAL_ADC_Init+0x274>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	2202      	movs	r2, #2
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	2203      	movs	r2, #3
 8000c96:	4013      	ands	r3, r2
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d112      	bne.n	8000cc2 <HAL_ADC_Init+0xa6>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d009      	beq.n	8000cbe <HAL_ADC_Init+0xa2>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d101      	bne.n	8000cc2 <HAL_ADC_Init+0xa6>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <HAL_ADC_Init+0xa8>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d116      	bne.n	8000cf6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	2218      	movs	r2, #24
 8000cd0:	4393      	bics	r3, r2
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	0899      	lsrs	r1, r3, #2
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4964      	ldr	r1, [pc, #400]	@ (8000e94 <HAL_ADC_Init+0x278>)
 8000d02:	400a      	ands	r2, r1
 8000d04:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7e1b      	ldrb	r3, [r3, #24]
 8000d0a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7e5b      	ldrb	r3, [r3, #25]
 8000d10:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d12:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7e9b      	ldrb	r3, [r3, #26]
 8000d18:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d002      	beq.n	8000d2a <HAL_ADC_Init+0x10e>
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	015b      	lsls	r3, r3, #5
 8000d28:	e000      	b.n	8000d2c <HAL_ADC_Init+0x110>
 8000d2a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d2c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d32:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d101      	bne.n	8000d40 <HAL_ADC_Init+0x124>
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	e000      	b.n	8000d42 <HAL_ADC_Init+0x126>
 8000d40:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d42:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2124      	movs	r1, #36	@ 0x24
 8000d48:	5c5b      	ldrb	r3, [r3, r1]
 8000d4a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d4c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7edb      	ldrb	r3, [r3, #27]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d115      	bne.n	8000d88 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7e9b      	ldrb	r3, [r3, #26]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d105      	bne.n	8000d70 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	2280      	movs	r2, #128	@ 0x80
 8000d68:	0252      	lsls	r2, r2, #9
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	e00b      	b.n	8000d88 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d74:	2220      	movs	r2, #32
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d80:	2201      	movs	r2, #1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69da      	ldr	r2, [r3, #28]
 8000d8c:	23c2      	movs	r3, #194	@ 0xc2
 8000d8e:	33ff      	adds	r3, #255	@ 0xff
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d007      	beq.n	8000da4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68d9      	ldr	r1, [r3, #12]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000db8:	2380      	movs	r3, #128	@ 0x80
 8000dba:	055b      	lsls	r3, r3, #21
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d01b      	beq.n	8000df8 <HAL_ADC_Init+0x1dc>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d017      	beq.n	8000df8 <HAL_ADC_Init+0x1dc>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d013      	beq.n	8000df8 <HAL_ADC_Init+0x1dc>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d00f      	beq.n	8000df8 <HAL_ADC_Init+0x1dc>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d00b      	beq.n	8000df8 <HAL_ADC_Init+0x1dc>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d007      	beq.n	8000df8 <HAL_ADC_Init+0x1dc>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dec:	2b06      	cmp	r3, #6
 8000dee:	d003      	beq.n	8000df8 <HAL_ADC_Init+0x1dc>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df4:	2b07      	cmp	r3, #7
 8000df6:	d112      	bne.n	8000e1e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	695a      	ldr	r2, [r3, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2107      	movs	r1, #7
 8000e04:	438a      	bics	r2, r1
 8000e06:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6959      	ldr	r1, [r3, #20]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e12:	2207      	movs	r2, #7
 8000e14:	401a      	ands	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	4a1c      	ldr	r2, [pc, #112]	@ (8000e98 <HAL_ADC_Init+0x27c>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d10b      	bne.n	8000e46 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e38:	2203      	movs	r2, #3
 8000e3a:	4393      	bics	r3, r2
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e44:	e01c      	b.n	8000e80 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e4a:	2212      	movs	r2, #18
 8000e4c:	4393      	bics	r3, r2
 8000e4e:	2210      	movs	r2, #16
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e62:	230f      	movs	r3, #15
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e6a:	e009      	b.n	8000e80 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e70:	2210      	movs	r2, #16
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e78:	230f      	movs	r3, #15
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	781b      	ldrb	r3, [r3, #0]
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b004      	add	sp, #16
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	fffffefd 	.word	0xfffffefd
 8000e94:	fffe0219 	.word	0xfffe0219
 8000e98:	833fffe7 	.word	0x833fffe7

08000e9c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eb6:	2380      	movs	r3, #128	@ 0x80
 8000eb8:	055b      	lsls	r3, r3, #21
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d011      	beq.n	8000ee2 <HAL_ADC_ConfigChannel+0x46>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_ADC_ConfigChannel+0x46>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d009      	beq.n	8000ee2 <HAL_ADC_ConfigChannel+0x46>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d005      	beq.n	8000ee2 <HAL_ADC_ConfigChannel+0x46>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d001      	beq.n	8000ee2 <HAL_ADC_ConfigChannel+0x46>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2234      	movs	r2, #52	@ 0x34
 8000ee6:	5c9b      	ldrb	r3, [r3, r2]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_ADC_ConfigChannel+0x54>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e0d0      	b.n	8001092 <HAL_ADC_ConfigChannel+0x1f6>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2234      	movs	r2, #52	@ 0x34
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2204      	movs	r2, #4
 8000f00:	4013      	ands	r3, r2
 8000f02:	d000      	beq.n	8000f06 <HAL_ADC_ConfigChannel+0x6a>
 8000f04:	e0b4      	b.n	8001070 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	4a64      	ldr	r2, [pc, #400]	@ (800109c <HAL_ADC_ConfigChannel+0x200>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d100      	bne.n	8000f12 <HAL_ADC_ConfigChannel+0x76>
 8000f10:	e082      	b.n	8001018 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	055b      	lsls	r3, r3, #21
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d037      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d033      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x108>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d02f      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x108>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d02b      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x108>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d027      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x108>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d023      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x108>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f60:	2b06      	cmp	r3, #6
 8000f62:	d01f      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x108>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	d01b      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	2107      	movs	r1, #7
 8000f78:	400b      	ands	r3, r1
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d012      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2107      	movs	r1, #7
 8000f8a:	438a      	bics	r2, r1
 8000f8c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6959      	ldr	r1, [r3, #20]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	2207      	movs	r2, #7
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b10      	cmp	r3, #16
 8000faa:	d007      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x120>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b11      	cmp	r3, #17
 8000fb2:	d003      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x120>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b12      	cmp	r3, #18
 8000fba:	d163      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fbc:	4b38      	ldr	r3, [pc, #224]	@ (80010a0 <HAL_ADC_ConfigChannel+0x204>)
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b10      	cmp	r3, #16
 8000fc6:	d009      	beq.n	8000fdc <HAL_ADC_ConfigChannel+0x140>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b11      	cmp	r3, #17
 8000fce:	d102      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x13a>
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	03db      	lsls	r3, r3, #15
 8000fd4:	e004      	b.n	8000fe0 <HAL_ADC_ConfigChannel+0x144>
 8000fd6:	2380      	movs	r3, #128	@ 0x80
 8000fd8:	045b      	lsls	r3, r3, #17
 8000fda:	e001      	b.n	8000fe0 <HAL_ADC_ConfigChannel+0x144>
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	041b      	lsls	r3, r3, #16
 8000fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80010a0 <HAL_ADC_ConfigChannel+0x204>)
 8000fe2:	430b      	orrs	r3, r1
 8000fe4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b10      	cmp	r3, #16
 8000fec:	d14a      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fee:	4b2d      	ldr	r3, [pc, #180]	@ (80010a4 <HAL_ADC_ConfigChannel+0x208>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	492d      	ldr	r1, [pc, #180]	@ (80010a8 <HAL_ADC_ConfigChannel+0x20c>)
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff f887 	bl	8000108 <__udivsi3>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	189b      	adds	r3, r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001008:	e002      	b.n	8001010 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	3b01      	subs	r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f9      	bne.n	800100a <HAL_ADC_ConfigChannel+0x16e>
 8001016:	e035      	b.n	8001084 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2101      	movs	r1, #1
 8001024:	4099      	lsls	r1, r3
 8001026:	000b      	movs	r3, r1
 8001028:	43d9      	mvns	r1, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	400a      	ands	r2, r1
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b10      	cmp	r3, #16
 8001038:	d007      	beq.n	800104a <HAL_ADC_ConfigChannel+0x1ae>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b11      	cmp	r3, #17
 8001040:	d003      	beq.n	800104a <HAL_ADC_ConfigChannel+0x1ae>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b12      	cmp	r3, #18
 8001048:	d11c      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_ADC_ConfigChannel+0x204>)
 800104c:	6819      	ldr	r1, [r3, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b10      	cmp	r3, #16
 8001054:	d007      	beq.n	8001066 <HAL_ADC_ConfigChannel+0x1ca>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b11      	cmp	r3, #17
 800105c:	d101      	bne.n	8001062 <HAL_ADC_ConfigChannel+0x1c6>
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <HAL_ADC_ConfigChannel+0x210>)
 8001060:	e002      	b.n	8001068 <HAL_ADC_ConfigChannel+0x1cc>
 8001062:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <HAL_ADC_ConfigChannel+0x214>)
 8001064:	e000      	b.n	8001068 <HAL_ADC_ConfigChannel+0x1cc>
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <HAL_ADC_ConfigChannel+0x218>)
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <HAL_ADC_ConfigChannel+0x204>)
 800106a:	400b      	ands	r3, r1
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e009      	b.n	8001084 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001074:	2220      	movs	r2, #32
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800107c:	230f      	movs	r3, #15
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2234      	movs	r2, #52	@ 0x34
 8001088:	2100      	movs	r1, #0
 800108a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800108c:	230f      	movs	r3, #15
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	781b      	ldrb	r3, [r3, #0]
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b004      	add	sp, #16
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	00001001 	.word	0x00001001
 80010a0:	40012708 	.word	0x40012708
 80010a4:	20000008 	.word	0x20000008
 80010a8:	000f4240 	.word	0x000f4240
 80010ac:	ffbfffff 	.word	0xffbfffff
 80010b0:	feffffff 	.word	0xfeffffff
 80010b4:	ff7fffff 	.word	0xff7fffff

080010b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e0f0      	b.n	80012ac <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2220      	movs	r2, #32
 80010ce:	5c9b      	ldrb	r3, [r3, r2]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d103      	bne.n	80010de <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff fc77 	bl	80009cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2101      	movs	r1, #1
 80010ea:	430a      	orrs	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ee:	f7ff fd8b 	bl	8000c08 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010f6:	e013      	b.n	8001120 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f8:	f7ff fd86 	bl	8000c08 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b0a      	cmp	r3, #10
 8001104:	d90c      	bls.n	8001120 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110a:	2280      	movs	r2, #128	@ 0x80
 800110c:	0292      	lsls	r2, r2, #10
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2220      	movs	r2, #32
 8001118:	2105      	movs	r1, #5
 800111a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0c5      	b.n	80012ac <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	4013      	ands	r3, r2
 800112a:	d0e5      	beq.n	80010f8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2102      	movs	r1, #2
 8001138:	438a      	bics	r2, r1
 800113a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113c:	f7ff fd64 	bl	8000c08 <HAL_GetTick>
 8001140:	0003      	movs	r3, r0
 8001142:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001144:	e013      	b.n	800116e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001146:	f7ff fd5f 	bl	8000c08 <HAL_GetTick>
 800114a:	0002      	movs	r2, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b0a      	cmp	r3, #10
 8001152:	d90c      	bls.n	800116e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001158:	2280      	movs	r2, #128	@ 0x80
 800115a:	0292      	lsls	r2, r2, #10
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2220      	movs	r2, #32
 8001166:	2105      	movs	r1, #5
 8001168:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e09e      	b.n	80012ac <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2202      	movs	r2, #2
 8001176:	4013      	ands	r3, r2
 8001178:	d1e5      	bne.n	8001146 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7e1b      	ldrb	r3, [r3, #24]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2180      	movs	r1, #128	@ 0x80
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e007      	b.n	80011a4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	438a      	bics	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7e5b      	ldrb	r3, [r3, #25]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d108      	bne.n	80011be <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2140      	movs	r1, #64	@ 0x40
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e007      	b.n	80011ce <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2140      	movs	r1, #64	@ 0x40
 80011ca:	438a      	bics	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7e9b      	ldrb	r3, [r3, #26]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d108      	bne.n	80011e8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2120      	movs	r1, #32
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e007      	b.n	80011f8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2120      	movs	r1, #32
 80011f4:	438a      	bics	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7edb      	ldrb	r3, [r3, #27]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d108      	bne.n	8001212 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2110      	movs	r1, #16
 800120c:	438a      	bics	r2, r1
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e007      	b.n	8001222 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2110      	movs	r1, #16
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7f1b      	ldrb	r3, [r3, #28]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d108      	bne.n	800123c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2108      	movs	r1, #8
 8001236:	430a      	orrs	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	e007      	b.n	800124c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2108      	movs	r1, #8
 8001248:	438a      	bics	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7f5b      	ldrb	r3, [r3, #29]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d108      	bne.n	8001266 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2104      	movs	r1, #4
 8001260:	430a      	orrs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e007      	b.n	8001276 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2104      	movs	r1, #4
 8001272:	438a      	bics	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	431a      	orrs	r2, r3
 800128c:	0011      	movs	r1, r2
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2220      	movs	r2, #32
 80012a6:	2101      	movs	r1, #1
 80012a8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b004      	add	sp, #16
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c4:	2013      	movs	r0, #19
 80012c6:	183b      	adds	r3, r7, r0
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	2120      	movs	r1, #32
 80012cc:	5c52      	ldrb	r2, [r2, r1]
 80012ce:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80012d0:	0002      	movs	r2, r0
 80012d2:	18bb      	adds	r3, r7, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d004      	beq.n	80012e4 <HAL_CAN_ConfigFilter+0x30>
 80012da:	18bb      	adds	r3, r7, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d000      	beq.n	80012e4 <HAL_CAN_ConfigFilter+0x30>
 80012e2:	e0cd      	b.n	8001480 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	2380      	movs	r3, #128	@ 0x80
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	58d3      	ldr	r3, [r2, r3]
 80012ec:	2201      	movs	r2, #1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	0011      	movs	r1, r2
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	221f      	movs	r2, #31
 8001300:	4013      	ands	r3, r2
 8001302:	2201      	movs	r2, #1
 8001304:	409a      	lsls	r2, r3
 8001306:	0013      	movs	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	2387      	movs	r3, #135	@ 0x87
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	58d3      	ldr	r3, [r2, r3]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	43d2      	mvns	r2, r2
 8001316:	401a      	ands	r2, r3
 8001318:	0011      	movs	r1, r2
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	2387      	movs	r3, #135	@ 0x87
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d129      	bne.n	800137e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	2383      	movs	r3, #131	@ 0x83
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	43d2      	mvns	r2, r2
 8001336:	401a      	ands	r2, r3
 8001338:	0011      	movs	r1, r2
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	2383      	movs	r3, #131	@ 0x83
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001354:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3248      	adds	r2, #72	@ 0x48
 800135a:	00d2      	lsls	r2, r2, #3
 800135c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	041b      	lsls	r3, r3, #16
 800136a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001370:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001372:	6979      	ldr	r1, [r7, #20]
 8001374:	3348      	adds	r3, #72	@ 0x48
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	18cb      	adds	r3, r1, r3
 800137a:	3304      	adds	r3, #4
 800137c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d128      	bne.n	80013d8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	2383      	movs	r3, #131	@ 0x83
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	58d2      	ldr	r2, [r2, r3]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	431a      	orrs	r2, r3
 8001392:	0011      	movs	r1, r2
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	2383      	movs	r3, #131	@ 0x83
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	041b      	lsls	r3, r3, #16
 80013a8:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ae:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3248      	adds	r2, #72	@ 0x48
 80013b4:	00d2      	lsls	r2, r2, #3
 80013b6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	041b      	lsls	r3, r3, #16
 80013c4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013cc:	6979      	ldr	r1, [r7, #20]
 80013ce:	3348      	adds	r3, #72	@ 0x48
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	18cb      	adds	r3, r1, r3
 80013d4:	3304      	adds	r3, #4
 80013d6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10c      	bne.n	80013fa <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	2381      	movs	r3, #129	@ 0x81
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	58d3      	ldr	r3, [r2, r3]
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	43d2      	mvns	r2, r2
 80013ec:	401a      	ands	r2, r3
 80013ee:	0011      	movs	r1, r2
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	2381      	movs	r3, #129	@ 0x81
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	50d1      	str	r1, [r2, r3]
 80013f8:	e00a      	b.n	8001410 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	2381      	movs	r3, #129	@ 0x81
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	58d2      	ldr	r2, [r2, r3]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	431a      	orrs	r2, r3
 8001406:	0011      	movs	r1, r2
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	2381      	movs	r3, #129	@ 0x81
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	2385      	movs	r3, #133	@ 0x85
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	58d3      	ldr	r3, [r2, r3]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	43d2      	mvns	r2, r2
 8001424:	401a      	ands	r2, r3
 8001426:	0011      	movs	r1, r2
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	2385      	movs	r3, #133	@ 0x85
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	50d1      	str	r1, [r2, r3]
 8001430:	e00a      	b.n	8001448 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	2385      	movs	r3, #133	@ 0x85
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	58d2      	ldr	r2, [r2, r3]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	431a      	orrs	r2, r3
 800143e:	0011      	movs	r1, r2
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	2385      	movs	r3, #133	@ 0x85
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d10a      	bne.n	8001466 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	2387      	movs	r3, #135	@ 0x87
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	58d2      	ldr	r2, [r2, r3]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	431a      	orrs	r2, r3
 800145c:	0011      	movs	r1, r2
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	2387      	movs	r3, #135	@ 0x87
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	58d3      	ldr	r3, [r2, r3]
 800146e:	2201      	movs	r2, #1
 8001470:	4393      	bics	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	e007      	b.n	8001490 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	2280      	movs	r2, #128	@ 0x80
 8001486:	02d2      	lsls	r2, r2, #11
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
  }
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b006      	add	sp, #24
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2220      	movs	r2, #32
 80014a4:	5c9b      	ldrb	r3, [r3, r2]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d12f      	bne.n	800150c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2220      	movs	r2, #32
 80014b0:	2102      	movs	r1, #2
 80014b2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2101      	movs	r1, #1
 80014c0:	438a      	bics	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fba0 	bl	8000c08 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014cc:	e013      	b.n	80014f6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014ce:	f7ff fb9b 	bl	8000c08 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b0a      	cmp	r3, #10
 80014da:	d90c      	bls.n	80014f6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	2280      	movs	r2, #128	@ 0x80
 80014e2:	0292      	lsls	r2, r2, #10
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2220      	movs	r2, #32
 80014ee:	2105      	movs	r1, #5
 80014f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e012      	b.n	800151c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	d1e5      	bne.n	80014ce <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	e007      	b.n	800151c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001510:	2280      	movs	r2, #128	@ 0x80
 8001512:	0312      	lsls	r2, r2, #12
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
  }
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b004      	add	sp, #16
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001532:	201f      	movs	r0, #31
 8001534:	183b      	adds	r3, r7, r0
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	2120      	movs	r1, #32
 800153a:	5c52      	ldrb	r2, [r2, r1]
 800153c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001546:	183b      	adds	r3, r7, r0
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d004      	beq.n	8001558 <HAL_CAN_AddTxMessage+0x34>
 800154e:	183b      	adds	r3, r7, r0
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d000      	beq.n	8001558 <HAL_CAN_AddTxMessage+0x34>
 8001556:	e0ab      	b.n	80016b0 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	04db      	lsls	r3, r3, #19
 800155e:	4013      	ands	r3, r2
 8001560:	d10a      	bne.n	8001578 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	051b      	lsls	r3, r3, #20
 8001568:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800156a:	d105      	bne.n	8001578 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	055b      	lsls	r3, r3, #21
 8001572:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001574:	d100      	bne.n	8001578 <HAL_CAN_AddTxMessage+0x54>
 8001576:	e092      	b.n	800169e <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	0e1b      	lsrs	r3, r3, #24
 800157c:	2203      	movs	r2, #3
 800157e:	4013      	ands	r3, r2
 8001580:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001582:	2201      	movs	r2, #1
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10c      	bne.n	80015ae <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4311      	orrs	r1, r2
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	3218      	adds	r2, #24
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	50d1      	str	r1, [r2, r3]
 80015ac:	e00f      	b.n	80015ce <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015b8:	431a      	orrs	r2, r3
 80015ba:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80015c4:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	3218      	adds	r2, #24
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6819      	ldr	r1, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3318      	adds	r3, #24
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	18cb      	adds	r3, r1, r3
 80015de:	3304      	adds	r3, #4
 80015e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	7d1b      	ldrb	r3, [r3, #20]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d112      	bne.n	8001610 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3318      	adds	r3, #24
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	18d3      	adds	r3, r2, r3
 80015f6:	3304      	adds	r3, #4
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6819      	ldr	r1, [r3, #0]
 80015fe:	2380      	movs	r3, #128	@ 0x80
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	431a      	orrs	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3318      	adds	r3, #24
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	18cb      	adds	r3, r1, r3
 800160c:	3304      	adds	r3, #4
 800160e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3307      	adds	r3, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	061a      	lsls	r2, r3, #24
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3306      	adds	r3, #6
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	041b      	lsls	r3, r3, #16
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3305      	adds	r3, #5
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3304      	adds	r3, #4
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	0019      	movs	r1, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	6979      	ldr	r1, [r7, #20]
 800163c:	23c6      	movs	r3, #198	@ 0xc6
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	0109      	lsls	r1, r1, #4
 8001642:	1841      	adds	r1, r0, r1
 8001644:	18cb      	adds	r3, r1, r3
 8001646:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3303      	adds	r3, #3
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	061a      	lsls	r2, r3, #24
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3302      	adds	r3, #2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	041b      	lsls	r3, r3, #16
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3301      	adds	r3, #1
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	0019      	movs	r1, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	6979      	ldr	r1, [r7, #20]
 8001672:	23c4      	movs	r3, #196	@ 0xc4
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	0109      	lsls	r1, r1, #4
 8001678:	1841      	adds	r1, r0, r1
 800167a:	18cb      	adds	r3, r1, r3
 800167c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	3218      	adds	r2, #24
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	58d2      	ldr	r2, [r2, r3]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2101      	movs	r1, #1
 8001690:	4311      	orrs	r1, r2
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	3218      	adds	r2, #24
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e010      	b.n	80016c0 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	2280      	movs	r2, #128	@ 0x80
 80016a4:	0392      	lsls	r2, r2, #14
 80016a6:	431a      	orrs	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e007      	b.n	80016c0 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b4:	2280      	movs	r2, #128	@ 0x80
 80016b6:	02d2      	lsls	r2, r2, #11
 80016b8:	431a      	orrs	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
  }
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b008      	add	sp, #32
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016d4:	200b      	movs	r0, #11
 80016d6:	183b      	adds	r3, r7, r0
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	2120      	movs	r1, #32
 80016dc:	5c52      	ldrb	r2, [r2, r1]
 80016de:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80016e0:	0002      	movs	r2, r0
 80016e2:	18bb      	adds	r3, r7, r2
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d003      	beq.n	80016f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 80016ea:	18bb      	adds	r3, r7, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d11d      	bne.n	800172e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	04db      	lsls	r3, r3, #19
 80016fc:	4013      	ands	r3, r2
 80016fe:	d002      	beq.n	8001706 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3301      	adds	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	2380      	movs	r3, #128	@ 0x80
 800170e:	051b      	lsls	r3, r3, #20
 8001710:	4013      	ands	r3, r2
 8001712:	d002      	beq.n	800171a <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3301      	adds	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	055b      	lsls	r3, r3, #21
 8001724:	4013      	ands	r3, r2
 8001726:	d002      	beq.n	800172e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b004      	add	sp, #16
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b002      	add	sp, #8
 800174a:	bd80      	pop	{r7, pc}

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	0002      	movs	r2, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001760:	d828      	bhi.n	80017b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001762:	4a2f      	ldr	r2, [pc, #188]	@ (8001820 <__NVIC_SetPriority+0xd4>)
 8001764:	1dfb      	adds	r3, r7, #7
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b25b      	sxtb	r3, r3
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	33c0      	adds	r3, #192	@ 0xc0
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	589b      	ldr	r3, [r3, r2]
 8001772:	1dfa      	adds	r2, r7, #7
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	0011      	movs	r1, r2
 8001778:	2203      	movs	r2, #3
 800177a:	400a      	ands	r2, r1
 800177c:	00d2      	lsls	r2, r2, #3
 800177e:	21ff      	movs	r1, #255	@ 0xff
 8001780:	4091      	lsls	r1, r2
 8001782:	000a      	movs	r2, r1
 8001784:	43d2      	mvns	r2, r2
 8001786:	401a      	ands	r2, r3
 8001788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	22ff      	movs	r2, #255	@ 0xff
 8001790:	401a      	ands	r2, r3
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	0018      	movs	r0, r3
 8001798:	2303      	movs	r3, #3
 800179a:	4003      	ands	r3, r0
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017a0:	481f      	ldr	r0, [pc, #124]	@ (8001820 <__NVIC_SetPriority+0xd4>)
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	430a      	orrs	r2, r1
 80017ac:	33c0      	adds	r3, #192	@ 0xc0
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017b2:	e031      	b.n	8001818 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001824 <__NVIC_SetPriority+0xd8>)
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	0019      	movs	r1, r3
 80017bc:	230f      	movs	r3, #15
 80017be:	400b      	ands	r3, r1
 80017c0:	3b08      	subs	r3, #8
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3306      	adds	r3, #6
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	18d3      	adds	r3, r2, r3
 80017ca:	3304      	adds	r3, #4
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1dfa      	adds	r2, r7, #7
 80017d0:	7812      	ldrb	r2, [r2, #0]
 80017d2:	0011      	movs	r1, r2
 80017d4:	2203      	movs	r2, #3
 80017d6:	400a      	ands	r2, r1
 80017d8:	00d2      	lsls	r2, r2, #3
 80017da:	21ff      	movs	r1, #255	@ 0xff
 80017dc:	4091      	lsls	r1, r2
 80017de:	000a      	movs	r2, r1
 80017e0:	43d2      	mvns	r2, r2
 80017e2:	401a      	ands	r2, r3
 80017e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	019b      	lsls	r3, r3, #6
 80017ea:	22ff      	movs	r2, #255	@ 0xff
 80017ec:	401a      	ands	r2, r3
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	0018      	movs	r0, r3
 80017f4:	2303      	movs	r3, #3
 80017f6:	4003      	ands	r3, r0
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017fc:	4809      	ldr	r0, [pc, #36]	@ (8001824 <__NVIC_SetPriority+0xd8>)
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	001c      	movs	r4, r3
 8001804:	230f      	movs	r3, #15
 8001806:	4023      	ands	r3, r4
 8001808:	3b08      	subs	r3, #8
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	430a      	orrs	r2, r1
 800180e:	3306      	adds	r3, #6
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	18c3      	adds	r3, r0, r3
 8001814:	3304      	adds	r3, #4
 8001816:	601a      	str	r2, [r3, #0]
}
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b003      	add	sp, #12
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	1e5a      	subs	r2, r3, #1
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	045b      	lsls	r3, r3, #17
 8001838:	429a      	cmp	r2, r3
 800183a:	d301      	bcc.n	8001840 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183c:	2301      	movs	r3, #1
 800183e:	e010      	b.n	8001862 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001840:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <SysTick_Config+0x44>)
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	3a01      	subs	r2, #1
 8001846:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001848:	2301      	movs	r3, #1
 800184a:	425b      	negs	r3, r3
 800184c:	2103      	movs	r1, #3
 800184e:	0018      	movs	r0, r3
 8001850:	f7ff ff7c 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <SysTick_Config+0x44>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	@ (800186c <SysTick_Config+0x44>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	210f      	movs	r1, #15
 800187c:	187b      	adds	r3, r7, r1
 800187e:	1c02      	adds	r2, r0, #0
 8001880:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	187b      	adds	r3, r7, r1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b25b      	sxtb	r3, r3
 800188a:	0011      	movs	r1, r2
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b004      	add	sp, #16
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7ff ffbf 	bl	8001828 <SysTick_Config>
 80018aa:	0003      	movs	r3, r0
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	e149      	b.n	8001b58 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4091      	lsls	r1, r2
 80018ce:	000a      	movs	r2, r1
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d100      	bne.n	80018dc <HAL_GPIO_Init+0x28>
 80018da:	e13a      	b.n	8001b52 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d005      	beq.n	80018f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d130      	bne.n	8001956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	409a      	lsls	r2, r3
 8001902:	0013      	movs	r3, r2
 8001904:	43da      	mvns	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	409a      	lsls	r2, r3
 8001916:	0013      	movs	r3, r2
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	43da      	mvns	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	2201      	movs	r2, #1
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
 8001948:	0013      	movs	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	4013      	ands	r3, r2
 800195e:	2b03      	cmp	r3, #3
 8001960:	d017      	beq.n	8001992 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	43da      	mvns	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	409a      	lsls	r2, r3
 8001984:	0013      	movs	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	4013      	ands	r3, r2
 800199a:	2b02      	cmp	r3, #2
 800199c:	d123      	bne.n	80019e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	58d3      	ldr	r3, [r2, r3]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2207      	movs	r2, #7
 80019b0:	4013      	ands	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	43da      	mvns	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2107      	movs	r1, #7
 80019ca:	400b      	ands	r3, r1
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	0092      	lsls	r2, r2, #2
 80019e2:	6939      	ldr	r1, [r7, #16]
 80019e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	43da      	mvns	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2203      	movs	r2, #3
 8001a04:	401a      	ands	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	23c0      	movs	r3, #192	@ 0xc0
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d100      	bne.n	8001a28 <HAL_GPIO_Init+0x174>
 8001a26:	e094      	b.n	8001b52 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a28:	4b51      	ldr	r3, [pc, #324]	@ (8001b70 <HAL_GPIO_Init+0x2bc>)
 8001a2a:	699a      	ldr	r2, [r3, #24]
 8001a2c:	4b50      	ldr	r3, [pc, #320]	@ (8001b70 <HAL_GPIO_Init+0x2bc>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	430a      	orrs	r2, r1
 8001a32:	619a      	str	r2, [r3, #24]
 8001a34:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <HAL_GPIO_Init+0x2bc>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a40:	4a4c      	ldr	r2, [pc, #304]	@ (8001b74 <HAL_GPIO_Init+0x2c0>)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	589b      	ldr	r3, [r3, r2]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2203      	movs	r2, #3
 8001a52:	4013      	ands	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	0013      	movs	r3, r2
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	2390      	movs	r3, #144	@ 0x90
 8001a68:	05db      	lsls	r3, r3, #23
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x1d6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a41      	ldr	r2, [pc, #260]	@ (8001b78 <HAL_GPIO_Init+0x2c4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x1d2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a40      	ldr	r2, [pc, #256]	@ (8001b7c <HAL_GPIO_Init+0x2c8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x1ce>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x1d8>
 8001a82:	2305      	movs	r3, #5
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x1d8>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x1d8>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	2103      	movs	r1, #3
 8001a90:	400a      	ands	r2, r1
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a9c:	4935      	ldr	r1, [pc, #212]	@ (8001b74 <HAL_GPIO_Init+0x2c0>)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aaa:	4b35      	ldr	r3, [pc, #212]	@ (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	2380      	movs	r3, #128	@ 0x80
 8001ac0:	035b      	lsls	r3, r3, #13
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ace:	4b2c      	ldr	r3, [pc, #176]	@ (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43da      	mvns	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	039b      	lsls	r3, r3, #14
 8001aec:	4013      	ands	r3, r2
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001af8:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	029b      	lsls	r3, r3, #10
 8001b16:	4013      	ands	r3, r2
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b22:	4b17      	ldr	r3, [pc, #92]	@ (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b28:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43da      	mvns	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	025b      	lsls	r3, r3, #9
 8001b40:	4013      	ands	r3, r2
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	40da      	lsrs	r2, r3
 8001b60:	1e13      	subs	r3, r2, #0
 8001b62:	d000      	beq.n	8001b66 <HAL_GPIO_Init+0x2b2>
 8001b64:	e6ae      	b.n	80018c4 <HAL_GPIO_Init+0x10>
  } 
}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	46c0      	nop			@ (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b006      	add	sp, #24
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010000 	.word	0x40010000
 8001b78:	48000400 	.word	0x48000400
 8001b7c:	48000800 	.word	0x48000800
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	0008      	movs	r0, r1
 8001b8e:	0011      	movs	r1, r2
 8001b90:	1cbb      	adds	r3, r7, #2
 8001b92:	1c02      	adds	r2, r0, #0
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	1c7b      	adds	r3, r7, #1
 8001b98:	1c0a      	adds	r2, r1, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9c:	1c7b      	adds	r3, r7, #1
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ba4:	1cbb      	adds	r3, r7, #2
 8001ba6:	881a      	ldrh	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bac:	e003      	b.n	8001bb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bae:	1cbb      	adds	r3, r7, #2
 8001bb0:	881a      	ldrh	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	000a      	movs	r2, r1
 8001bc8:	1cbb      	adds	r3, r7, #2
 8001bca:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bd2:	1cbb      	adds	r3, r7, #2
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	041a      	lsls	r2, r3, #16
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	1cb9      	adds	r1, r7, #2
 8001be2:	8809      	ldrh	r1, [r1, #0]
 8001be4:	400b      	ands	r3, r1
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b004      	add	sp, #16
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f000 fb76 	bl	80022f4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d100      	bne.n	8001c14 <HAL_RCC_OscConfig+0x20>
 8001c12:	e08e      	b.n	8001d32 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c14:	4bc5      	ldr	r3, [pc, #788]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	220c      	movs	r2, #12
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d00e      	beq.n	8001c3e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c20:	4bc2      	ldr	r3, [pc, #776]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	220c      	movs	r2, #12
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d117      	bne.n	8001c5c <HAL_RCC_OscConfig+0x68>
 8001c2c:	4bbf      	ldr	r3, [pc, #764]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	23c0      	movs	r3, #192	@ 0xc0
 8001c32:	025b      	lsls	r3, r3, #9
 8001c34:	401a      	ands	r2, r3
 8001c36:	2380      	movs	r3, #128	@ 0x80
 8001c38:	025b      	lsls	r3, r3, #9
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d10e      	bne.n	8001c5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3e:	4bbb      	ldr	r3, [pc, #748]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	029b      	lsls	r3, r3, #10
 8001c46:	4013      	ands	r3, r2
 8001c48:	d100      	bne.n	8001c4c <HAL_RCC_OscConfig+0x58>
 8001c4a:	e071      	b.n	8001d30 <HAL_RCC_OscConfig+0x13c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d000      	beq.n	8001c56 <HAL_RCC_OscConfig+0x62>
 8001c54:	e06c      	b.n	8001d30 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f000 fb4c 	bl	80022f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_OscConfig+0x80>
 8001c64:	4bb1      	ldr	r3, [pc, #708]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4bb0      	ldr	r3, [pc, #704]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c6a:	2180      	movs	r1, #128	@ 0x80
 8001c6c:	0249      	lsls	r1, r1, #9
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e02f      	b.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10c      	bne.n	8001c96 <HAL_RCC_OscConfig+0xa2>
 8001c7c:	4bab      	ldr	r3, [pc, #684]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4baa      	ldr	r3, [pc, #680]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c82:	49ab      	ldr	r1, [pc, #684]	@ (8001f30 <HAL_RCC_OscConfig+0x33c>)
 8001c84:	400a      	ands	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	4ba8      	ldr	r3, [pc, #672]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4ba7      	ldr	r3, [pc, #668]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001c8e:	49a9      	ldr	r1, [pc, #676]	@ (8001f34 <HAL_RCC_OscConfig+0x340>)
 8001c90:	400a      	ands	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e01e      	b.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d10e      	bne.n	8001cbc <HAL_RCC_OscConfig+0xc8>
 8001c9e:	4ba3      	ldr	r3, [pc, #652]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4ba2      	ldr	r3, [pc, #648]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001ca4:	2180      	movs	r1, #128	@ 0x80
 8001ca6:	02c9      	lsls	r1, r1, #11
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	4b9f      	ldr	r3, [pc, #636]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b9e      	ldr	r3, [pc, #632]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cb2:	2180      	movs	r1, #128	@ 0x80
 8001cb4:	0249      	lsls	r1, r1, #9
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
 8001cbc:	4b9b      	ldr	r3, [pc, #620]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b9a      	ldr	r3, [pc, #616]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cc2:	499b      	ldr	r1, [pc, #620]	@ (8001f30 <HAL_RCC_OscConfig+0x33c>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	4b98      	ldr	r3, [pc, #608]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b97      	ldr	r3, [pc, #604]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cce:	4999      	ldr	r1, [pc, #612]	@ (8001f34 <HAL_RCC_OscConfig+0x340>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d014      	beq.n	8001d06 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ff94 	bl	8000c08 <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce6:	f7fe ff8f 	bl	8000c08 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b64      	cmp	r3, #100	@ 0x64
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e2fd      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	029b      	lsls	r3, r3, #10
 8001d00:	4013      	ands	r3, r2
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0xf2>
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe ff7f 	bl	8000c08 <HAL_GetTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe ff7a 	bl	8000c08 <HAL_GetTick>
 8001d14:	0002      	movs	r2, r0
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e2e8      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b82      	ldr	r3, [pc, #520]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	2380      	movs	r3, #128	@ 0x80
 8001d28:	029b      	lsls	r3, r3, #10
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x11c>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d100      	bne.n	8001d3e <HAL_RCC_OscConfig+0x14a>
 8001d3c:	e06c      	b.n	8001e18 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	220c      	movs	r2, #12
 8001d44:	4013      	ands	r3, r2
 8001d46:	d00e      	beq.n	8001d66 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d48:	4b78      	ldr	r3, [pc, #480]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	220c      	movs	r2, #12
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d11f      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1a0>
 8001d54:	4b75      	ldr	r3, [pc, #468]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	23c0      	movs	r3, #192	@ 0xc0
 8001d5a:	025b      	lsls	r3, r3, #9
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b71      	ldr	r3, [pc, #452]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x188>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e2bb      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	22f8      	movs	r2, #248	@ 0xf8
 8001d82:	4393      	bics	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00da      	lsls	r2, r3, #3
 8001d8c:	4b67      	ldr	r3, [pc, #412]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e041      	b.n	8001e18 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d024      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b63      	ldr	r3, [pc, #396]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b62      	ldr	r3, [pc, #392]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7fe ff2e 	bl	8000c08 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db2:	f7fe ff29 	bl	8000c08 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e297      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	4b59      	ldr	r3, [pc, #356]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d0f1      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b57      	ldr	r3, [pc, #348]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	22f8      	movs	r2, #248	@ 0xf8
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	00da      	lsls	r2, r3, #3
 8001dde:	4b53      	ldr	r3, [pc, #332]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e018      	b.n	8001e18 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de6:	4b51      	ldr	r3, [pc, #324]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b50      	ldr	r3, [pc, #320]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	438a      	bics	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe ff09 	bl	8000c08 <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7fe ff04 	bl	8000c08 <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e272      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	4b47      	ldr	r3, [pc, #284]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d1f1      	bne.n	8001dfc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d036      	beq.n	8001e90 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d019      	beq.n	8001e5e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2a:	4b40      	ldr	r3, [pc, #256]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7fe fee7 	bl	8000c08 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7fe fee2 	bl	8000c08 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e250      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	2202      	movs	r2, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d0f1      	beq.n	8001e40 <HAL_RCC_OscConfig+0x24c>
 8001e5c:	e018      	b.n	8001e90 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5e:	4b33      	ldr	r3, [pc, #204]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e62:	4b32      	ldr	r3, [pc, #200]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	438a      	bics	r2, r1
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fecd 	bl	8000c08 <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e74:	f7fe fec8 	bl	8000c08 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e236      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e86:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d1f1      	bne.n	8001e74 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2204      	movs	r2, #4
 8001e96:	4013      	ands	r3, r2
 8001e98:	d100      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2a8>
 8001e9a:	e0b5      	b.n	8002008 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9c:	201f      	movs	r0, #31
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea4:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	055b      	lsls	r3, r3, #21
 8001eac:	4013      	ands	r3, r2
 8001eae:	d110      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001eb6:	2180      	movs	r1, #128	@ 0x80
 8001eb8:	0549      	lsls	r1, r1, #21
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	61da      	str	r2, [r3, #28]
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	2380      	movs	r3, #128	@ 0x80
 8001ec4:	055b      	lsls	r3, r3, #21
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ecc:	183b      	adds	r3, r7, r0
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <HAL_RCC_OscConfig+0x344>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	@ 0x80
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	d11a      	bne.n	8001f14 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <HAL_RCC_OscConfig+0x344>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <HAL_RCC_OscConfig+0x344>)
 8001ee4:	2180      	movs	r1, #128	@ 0x80
 8001ee6:	0049      	lsls	r1, r1, #1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eec:	f7fe fe8c 	bl	8000c08 <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7fe fe87 	bl	8000c08 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b64      	cmp	r3, #100	@ 0x64
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1f5      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <HAL_RCC_OscConfig+0x344>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d10f      	bne.n	8001f3c <HAL_RCC_OscConfig+0x348>
 8001f1c:	4b03      	ldr	r3, [pc, #12]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	4b02      	ldr	r3, [pc, #8]	@ (8001f2c <HAL_RCC_OscConfig+0x338>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	621a      	str	r2, [r3, #32]
 8001f28:	e036      	b.n	8001f98 <HAL_RCC_OscConfig+0x3a4>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	fffeffff 	.word	0xfffeffff
 8001f34:	fffbffff 	.word	0xfffbffff
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x36a>
 8001f44:	4bca      	ldr	r3, [pc, #808]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f46:	6a1a      	ldr	r2, [r3, #32]
 8001f48:	4bc9      	ldr	r3, [pc, #804]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	621a      	str	r2, [r3, #32]
 8001f50:	4bc7      	ldr	r3, [pc, #796]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4bc6      	ldr	r3, [pc, #792]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f56:	2104      	movs	r1, #4
 8001f58:	438a      	bics	r2, r1
 8001f5a:	621a      	str	r2, [r3, #32]
 8001f5c:	e01c      	b.n	8001f98 <HAL_RCC_OscConfig+0x3a4>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x38c>
 8001f66:	4bc2      	ldr	r3, [pc, #776]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f68:	6a1a      	ldr	r2, [r3, #32]
 8001f6a:	4bc1      	ldr	r3, [pc, #772]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	621a      	str	r2, [r3, #32]
 8001f72:	4bbf      	ldr	r3, [pc, #764]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	4bbe      	ldr	r3, [pc, #760]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f78:	2101      	movs	r1, #1
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	621a      	str	r2, [r3, #32]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0x3a4>
 8001f80:	4bbb      	ldr	r3, [pc, #748]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	4bba      	ldr	r3, [pc, #744]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	438a      	bics	r2, r1
 8001f8a:	621a      	str	r2, [r3, #32]
 8001f8c:	4bb8      	ldr	r3, [pc, #736]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	4bb7      	ldr	r3, [pc, #732]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001f92:	2104      	movs	r1, #4
 8001f94:	438a      	bics	r2, r1
 8001f96:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d014      	beq.n	8001fca <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fe32 	bl	8000c08 <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	e009      	b.n	8001fbe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fe2d 	bl	8000c08 <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	4aaf      	ldr	r2, [pc, #700]	@ (8002274 <HAL_RCC_OscConfig+0x680>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e19a      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbe:	4bac      	ldr	r3, [pc, #688]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x3b6>
 8001fc8:	e013      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7fe fe1d 	bl	8000c08 <HAL_GetTick>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd2:	e009      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7fe fe18 	bl	8000c08 <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	4aa5      	ldr	r2, [pc, #660]	@ (8002274 <HAL_RCC_OscConfig+0x680>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e185      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	4ba1      	ldr	r3, [pc, #644]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	2202      	movs	r2, #2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff2:	231f      	movs	r3, #31
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b9c      	ldr	r3, [pc, #624]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	4b9b      	ldr	r3, [pc, #620]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002002:	499d      	ldr	r1, [pc, #628]	@ (8002278 <HAL_RCC_OscConfig+0x684>)
 8002004:	400a      	ands	r2, r1
 8002006:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2210      	movs	r2, #16
 800200e:	4013      	ands	r3, r2
 8002010:	d063      	beq.n	80020da <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d12a      	bne.n	8002070 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800201a:	4b95      	ldr	r3, [pc, #596]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800201c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800201e:	4b94      	ldr	r3, [pc, #592]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002020:	2104      	movs	r1, #4
 8002022:	430a      	orrs	r2, r1
 8002024:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002026:	4b92      	ldr	r3, [pc, #584]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800202a:	4b91      	ldr	r3, [pc, #580]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7fe fde9 	bl	8000c08 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800203c:	f7fe fde4 	bl	8000c08 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e152      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800204e:	4b88      	ldr	r3, [pc, #544]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002052:	2202      	movs	r2, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d0f1      	beq.n	800203c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002058:	4b85      	ldr	r3, [pc, #532]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800205a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205c:	22f8      	movs	r2, #248	@ 0xf8
 800205e:	4393      	bics	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	00da      	lsls	r2, r3, #3
 8002068:	4b81      	ldr	r3, [pc, #516]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800206a:	430a      	orrs	r2, r1
 800206c:	635a      	str	r2, [r3, #52]	@ 0x34
 800206e:	e034      	b.n	80020da <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	3305      	adds	r3, #5
 8002076:	d111      	bne.n	800209c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002078:	4b7d      	ldr	r3, [pc, #500]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800207a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800207c:	4b7c      	ldr	r3, [pc, #496]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800207e:	2104      	movs	r1, #4
 8002080:	438a      	bics	r2, r1
 8002082:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002084:	4b7a      	ldr	r3, [pc, #488]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002088:	22f8      	movs	r2, #248	@ 0xf8
 800208a:	4393      	bics	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	00da      	lsls	r2, r3, #3
 8002094:	4b76      	ldr	r3, [pc, #472]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002096:	430a      	orrs	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	@ 0x34
 800209a:	e01e      	b.n	80020da <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800209c:	4b74      	ldr	r3, [pc, #464]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800209e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020a0:	4b73      	ldr	r3, [pc, #460]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	2104      	movs	r1, #4
 80020a4:	430a      	orrs	r2, r1
 80020a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020a8:	4b71      	ldr	r3, [pc, #452]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ac:	4b70      	ldr	r3, [pc, #448]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020ae:	2101      	movs	r1, #1
 80020b0:	438a      	bics	r2, r1
 80020b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b4:	f7fe fda8 	bl	8000c08 <HAL_GetTick>
 80020b8:	0003      	movs	r3, r0
 80020ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020be:	f7fe fda3 	bl	8000c08 <HAL_GetTick>
 80020c2:	0002      	movs	r2, r0
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e111      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020d0:	4b67      	ldr	r3, [pc, #412]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d4:	2202      	movs	r2, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	d1f1      	bne.n	80020be <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2220      	movs	r2, #32
 80020e0:	4013      	ands	r3, r2
 80020e2:	d05c      	beq.n	800219e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020e4:	4b62      	ldr	r3, [pc, #392]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	220c      	movs	r2, #12
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d00e      	beq.n	800210e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020f0:	4b5f      	ldr	r3, [pc, #380]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	220c      	movs	r2, #12
 80020f6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d114      	bne.n	8002126 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	23c0      	movs	r3, #192	@ 0xc0
 8002102:	025b      	lsls	r3, r3, #9
 8002104:	401a      	ands	r2, r3
 8002106:	23c0      	movs	r3, #192	@ 0xc0
 8002108:	025b      	lsls	r3, r3, #9
 800210a:	429a      	cmp	r2, r3
 800210c:	d10b      	bne.n	8002126 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800210e:	4b58      	ldr	r3, [pc, #352]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	029b      	lsls	r3, r3, #10
 8002116:	4013      	ands	r3, r2
 8002118:	d040      	beq.n	800219c <HAL_RCC_OscConfig+0x5a8>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d03c      	beq.n	800219c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0e6      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d01b      	beq.n	8002166 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800212e:	4b50      	ldr	r3, [pc, #320]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002132:	4b4f      	ldr	r3, [pc, #316]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002134:	2180      	movs	r1, #128	@ 0x80
 8002136:	0249      	lsls	r1, r1, #9
 8002138:	430a      	orrs	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe fd64 	bl	8000c08 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002146:	f7fe fd5f 	bl	8000c08 <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0cd      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002158:	4b45      	ldr	r3, [pc, #276]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800215a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800215c:	2380      	movs	r3, #128	@ 0x80
 800215e:	029b      	lsls	r3, r3, #10
 8002160:	4013      	ands	r3, r2
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x552>
 8002164:	e01b      	b.n	800219e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002166:	4b42      	ldr	r3, [pc, #264]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800216a:	4b41      	ldr	r3, [pc, #260]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800216c:	4943      	ldr	r1, [pc, #268]	@ (800227c <HAL_RCC_OscConfig+0x688>)
 800216e:	400a      	ands	r2, r1
 8002170:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7fe fd49 	bl	8000c08 <HAL_GetTick>
 8002176:	0003      	movs	r3, r0
 8002178:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800217c:	f7fe fd44 	bl	8000c08 <HAL_GetTick>
 8002180:	0002      	movs	r2, r0
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0b2      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800218e:	4b38      	ldr	r3, [pc, #224]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	029b      	lsls	r3, r3, #10
 8002196:	4013      	ands	r3, r2
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x588>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800219c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d100      	bne.n	80021a8 <HAL_RCC_OscConfig+0x5b4>
 80021a6:	e0a4      	b.n	80022f2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a8:	4b31      	ldr	r3, [pc, #196]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	220c      	movs	r2, #12
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d100      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5c2>
 80021b4:	e078      	b.n	80022a8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d14c      	bne.n	8002258 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b2c      	ldr	r3, [pc, #176]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80021c4:	492e      	ldr	r1, [pc, #184]	@ (8002280 <HAL_RCC_OscConfig+0x68c>)
 80021c6:	400a      	ands	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7fe fd1d 	bl	8000c08 <HAL_GetTick>
 80021ce:	0003      	movs	r3, r0
 80021d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fd18 	bl	8000c08 <HAL_GetTick>
 80021d8:	0002      	movs	r2, r0
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e086      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	@ 0x80
 80021ec:	049b      	lsls	r3, r3, #18
 80021ee:	4013      	ands	r3, r2
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	220f      	movs	r2, #15
 80021f8:	4393      	bics	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002206:	4b1a      	ldr	r3, [pc, #104]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a1e      	ldr	r2, [pc, #120]	@ (8002284 <HAL_RCC_OscConfig+0x690>)
 800220c:	4013      	ands	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	431a      	orrs	r2, r3
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002220:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 8002226:	2180      	movs	r1, #128	@ 0x80
 8002228:	0449      	lsls	r1, r1, #17
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7fe fceb 	bl	8000c08 <HAL_GetTick>
 8002232:	0003      	movs	r3, r0
 8002234:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe fce6 	bl	8000c08 <HAL_GetTick>
 800223c:	0002      	movs	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e054      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	049b      	lsls	r3, r3, #18
 8002252:	4013      	ands	r3, r2
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x644>
 8002256:	e04c      	b.n	80022f2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <HAL_RCC_OscConfig+0x67c>)
 800225e:	4908      	ldr	r1, [pc, #32]	@ (8002280 <HAL_RCC_OscConfig+0x68c>)
 8002260:	400a      	ands	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fcd0 	bl	8000c08 <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	e015      	b.n	800229a <HAL_RCC_OscConfig+0x6a6>
 800226e:	46c0      	nop			@ (mov r8, r8)
 8002270:	40021000 	.word	0x40021000
 8002274:	00001388 	.word	0x00001388
 8002278:	efffffff 	.word	0xefffffff
 800227c:	fffeffff 	.word	0xfffeffff
 8002280:	feffffff 	.word	0xfeffffff
 8002284:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002288:	f7fe fcbe 	bl	8000c08 <HAL_GetTick>
 800228c:	0002      	movs	r2, r0
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e02c      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229a:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <HAL_RCC_OscConfig+0x708>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	@ 0x80
 80022a0:	049b      	lsls	r3, r3, #18
 80022a2:	4013      	ands	r3, r2
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x694>
 80022a6:	e024      	b.n	80022f2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e01f      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_RCC_OscConfig+0x708>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022ba:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <HAL_RCC_OscConfig+0x708>)
 80022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022be:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	23c0      	movs	r3, #192	@ 0xc0
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	401a      	ands	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d10e      	bne.n	80022ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	220f      	movs	r2, #15
 80022d4:	401a      	ands	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	23f0      	movs	r3, #240	@ 0xf0
 80022e2:	039b      	lsls	r3, r3, #14
 80022e4:	401a      	ands	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b008      	add	sp, #32
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0bf      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b61      	ldr	r3, [pc, #388]	@ (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2201      	movs	r2, #1
 800231a:	4013      	ands	r3, r2
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d911      	bls.n	8002346 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b5e      	ldr	r3, [pc, #376]	@ (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2201      	movs	r2, #1
 8002328:	4393      	bics	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	4b5b      	ldr	r3, [pc, #364]	@ (800249c <HAL_RCC_ClockConfig+0x19c>)
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002334:	4b59      	ldr	r3, [pc, #356]	@ (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	4013      	ands	r3, r2
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0a6      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	d015      	beq.n	800237c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2204      	movs	r2, #4
 8002356:	4013      	ands	r3, r2
 8002358:	d006      	beq.n	8002368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800235a:	4b51      	ldr	r3, [pc, #324]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4b50      	ldr	r3, [pc, #320]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002360:	21e0      	movs	r1, #224	@ 0xe0
 8002362:	00c9      	lsls	r1, r1, #3
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b4d      	ldr	r3, [pc, #308]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	22f0      	movs	r2, #240	@ 0xf0
 800236e:	4393      	bics	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	4b4a      	ldr	r3, [pc, #296]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	d04c      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b44      	ldr	r3, [pc, #272]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	029b      	lsls	r3, r3, #10
 8002396:	4013      	ands	r3, r2
 8002398:	d120      	bne.n	80023dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07a      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b3e      	ldr	r3, [pc, #248]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	049b      	lsls	r3, r3, #18
 80023ae:	4013      	ands	r3, r2
 80023b0:	d114      	bne.n	80023dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06e      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 80023c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023c2:	2380      	movs	r3, #128	@ 0x80
 80023c4:	029b      	lsls	r3, r3, #10
 80023c6:	4013      	ands	r3, r2
 80023c8:	d108      	bne.n	80023dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e062      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b34      	ldr	r3, [pc, #208]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e05b      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023dc:	4b30      	ldr	r3, [pc, #192]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	4393      	bics	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fc0a 	bl	8000c08 <HAL_GetTick>
 80023f4:	0003      	movs	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f8:	e009      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7fe fc05 	bl	8000c08 <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	4a27      	ldr	r2, [pc, #156]	@ (80024a4 <HAL_RCC_ClockConfig+0x1a4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e042      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	220c      	movs	r2, #12
 8002414:	401a      	ands	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1ec      	bne.n	80023fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2201      	movs	r2, #1
 8002426:	4013      	ands	r3, r2
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d211      	bcs.n	8002452 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2201      	movs	r2, #1
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	4b18      	ldr	r3, [pc, #96]	@ (800249c <HAL_RCC_ClockConfig+0x19c>)
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002440:	4b16      	ldr	r3, [pc, #88]	@ (800249c <HAL_RCC_ClockConfig+0x19c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2201      	movs	r2, #1
 8002446:	4013      	ands	r3, r2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e020      	b.n	8002494 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2204      	movs	r2, #4
 8002458:	4013      	ands	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_RCC_ClockConfig+0x1a8>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 800246c:	430a      	orrs	r2, r1
 800246e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002470:	f000 f820 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002474:	0001      	movs	r1, r0
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	220f      	movs	r2, #15
 800247e:	4013      	ands	r3, r2
 8002480:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <HAL_RCC_ClockConfig+0x1ac>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	000a      	movs	r2, r1
 8002486:	40da      	lsrs	r2, r3
 8002488:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b0>)
 800248a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800248c:	2003      	movs	r0, #3
 800248e:	f7fe fb75 	bl	8000b7c <HAL_InitTick>
  
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40022000 	.word	0x40022000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	00001388 	.word	0x00001388
 80024a8:	fffff8ff 	.word	0xfffff8ff
 80024ac:	0800260c 	.word	0x0800260c
 80024b0:	20000008 	.word	0x20000008

080024b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002584 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	220c      	movs	r2, #12
 80024d8:	4013      	ands	r3, r2
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d046      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0xb8>
 80024de:	d848      	bhi.n	8002572 <HAL_RCC_GetSysClockFreq+0xbe>
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d002      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x36>
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d003      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x3c>
 80024e8:	e043      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024ea:	4b27      	ldr	r3, [pc, #156]	@ (8002588 <HAL_RCC_GetSysClockFreq+0xd4>)
 80024ec:	613b      	str	r3, [r7, #16]
      break;
 80024ee:	e043      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	0c9b      	lsrs	r3, r3, #18
 80024f4:	220f      	movs	r2, #15
 80024f6:	4013      	ands	r3, r2
 80024f8:	4a24      	ldr	r2, [pc, #144]	@ (800258c <HAL_RCC_GetSysClockFreq+0xd8>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024fe:	4b21      	ldr	r3, [pc, #132]	@ (8002584 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	220f      	movs	r2, #15
 8002504:	4013      	ands	r3, r2
 8002506:	4a22      	ldr	r2, [pc, #136]	@ (8002590 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002508:	5cd3      	ldrb	r3, [r2, r3]
 800250a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	23c0      	movs	r3, #192	@ 0xc0
 8002510:	025b      	lsls	r3, r3, #9
 8002512:	401a      	ands	r2, r3
 8002514:	2380      	movs	r3, #128	@ 0x80
 8002516:	025b      	lsls	r3, r3, #9
 8002518:	429a      	cmp	r2, r3
 800251a:	d109      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	481a      	ldr	r0, [pc, #104]	@ (8002588 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002520:	f7fd fdf2 	bl	8000108 <__udivsi3>
 8002524:	0003      	movs	r3, r0
 8002526:	001a      	movs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4353      	muls	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e01a      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	23c0      	movs	r3, #192	@ 0xc0
 8002534:	025b      	lsls	r3, r3, #9
 8002536:	401a      	ands	r2, r3
 8002538:	23c0      	movs	r3, #192	@ 0xc0
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	429a      	cmp	r2, r3
 800253e:	d109      	bne.n	8002554 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	4814      	ldr	r0, [pc, #80]	@ (8002594 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002544:	f7fd fde0 	bl	8000108 <__udivsi3>
 8002548:	0003      	movs	r3, r0
 800254a:	001a      	movs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4353      	muls	r3, r2
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e008      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	4810      	ldr	r0, [pc, #64]	@ (8002598 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002558:	f7fd fdd6 	bl	8000108 <__udivsi3>
 800255c:	0003      	movs	r3, r0
 800255e:	001a      	movs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4353      	muls	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	613b      	str	r3, [r7, #16]
      break;
 800256a:	e005      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800256c:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <HAL_RCC_GetSysClockFreq+0xe0>)
 800256e:	613b      	str	r3, [r7, #16]
      break;
 8002570:	e002      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002572:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002574:	613b      	str	r3, [r7, #16]
      break;
 8002576:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002578:	693b      	ldr	r3, [r7, #16]
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b006      	add	sp, #24
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	40021000 	.word	0x40021000
 8002588:	00f42400 	.word	0x00f42400
 800258c:	0800261c 	.word	0x0800261c
 8002590:	0800262c 	.word	0x0800262c
 8002594:	02dc6c00 	.word	0x02dc6c00
 8002598:	007a1200 	.word	0x007a1200

0800259c <memset>:
 800259c:	0003      	movs	r3, r0
 800259e:	1882      	adds	r2, r0, r2
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d100      	bne.n	80025a6 <memset+0xa>
 80025a4:	4770      	bx	lr
 80025a6:	7019      	strb	r1, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	e7f9      	b.n	80025a0 <memset+0x4>

080025ac <__libc_init_array>:
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	2600      	movs	r6, #0
 80025b0:	4c0c      	ldr	r4, [pc, #48]	@ (80025e4 <__libc_init_array+0x38>)
 80025b2:	4d0d      	ldr	r5, [pc, #52]	@ (80025e8 <__libc_init_array+0x3c>)
 80025b4:	1b64      	subs	r4, r4, r5
 80025b6:	10a4      	asrs	r4, r4, #2
 80025b8:	42a6      	cmp	r6, r4
 80025ba:	d109      	bne.n	80025d0 <__libc_init_array+0x24>
 80025bc:	2600      	movs	r6, #0
 80025be:	f000 f819 	bl	80025f4 <_init>
 80025c2:	4c0a      	ldr	r4, [pc, #40]	@ (80025ec <__libc_init_array+0x40>)
 80025c4:	4d0a      	ldr	r5, [pc, #40]	@ (80025f0 <__libc_init_array+0x44>)
 80025c6:	1b64      	subs	r4, r4, r5
 80025c8:	10a4      	asrs	r4, r4, #2
 80025ca:	42a6      	cmp	r6, r4
 80025cc:	d105      	bne.n	80025da <__libc_init_array+0x2e>
 80025ce:	bd70      	pop	{r4, r5, r6, pc}
 80025d0:	00b3      	lsls	r3, r6, #2
 80025d2:	58eb      	ldr	r3, [r5, r3]
 80025d4:	4798      	blx	r3
 80025d6:	3601      	adds	r6, #1
 80025d8:	e7ee      	b.n	80025b8 <__libc_init_array+0xc>
 80025da:	00b3      	lsls	r3, r6, #2
 80025dc:	58eb      	ldr	r3, [r5, r3]
 80025de:	4798      	blx	r3
 80025e0:	3601      	adds	r6, #1
 80025e2:	e7f2      	b.n	80025ca <__libc_init_array+0x1e>
 80025e4:	0800263c 	.word	0x0800263c
 80025e8:	0800263c 	.word	0x0800263c
 80025ec:	08002640 	.word	0x08002640
 80025f0:	0800263c 	.word	0x0800263c

080025f4 <_init>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fa:	bc08      	pop	{r3}
 80025fc:	469e      	mov	lr, r3
 80025fe:	4770      	bx	lr

08002600 <_fini>:
 8002600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002606:	bc08      	pop	{r3}
 8002608:	469e      	mov	lr, r3
 800260a:	4770      	bx	lr
