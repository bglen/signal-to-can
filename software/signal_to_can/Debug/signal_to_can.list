
signal_to_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003db4  08003db4  00004db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e80  08003e80  00005024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003e80  08003e80  00005024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003e80  08003e80  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e80  08003e80  00004e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e84  08003e84  00004e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003e88  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000024  08003eac  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003eac  00005150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ca4  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f4  00000000  00000000  0000bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000532  00000000  00000000  0000dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018592  00000000  00000000  0000e31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000899a  00000000  00000000  000268ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4bc  00000000  00000000  0002f246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001920  00000000  00000000  000b9748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000bb068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d9c 	.word	0x08003d9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08003d9c 	.word	0x08003d9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fd7c 	bl	8000d24 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fce1 	bl	8000bf8 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fa77 	bl	8000730 <__aeabi_fsub>
 8000242:	f000 fcd9 	bl	8000bf8 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fdiv>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	4646      	mov	r6, r8
 8000254:	464f      	mov	r7, r9
 8000256:	46d6      	mov	lr, sl
 8000258:	0245      	lsls	r5, r0, #9
 800025a:	b5c0      	push	{r6, r7, lr}
 800025c:	0fc3      	lsrs	r3, r0, #31
 800025e:	0047      	lsls	r7, r0, #1
 8000260:	4698      	mov	r8, r3
 8000262:	1c0e      	adds	r6, r1, #0
 8000264:	0a6d      	lsrs	r5, r5, #9
 8000266:	0e3f      	lsrs	r7, r7, #24
 8000268:	d05b      	beq.n	8000322 <__aeabi_fdiv+0xd2>
 800026a:	2fff      	cmp	r7, #255	@ 0xff
 800026c:	d021      	beq.n	80002b2 <__aeabi_fdiv+0x62>
 800026e:	2380      	movs	r3, #128	@ 0x80
 8000270:	00ed      	lsls	r5, r5, #3
 8000272:	04db      	lsls	r3, r3, #19
 8000274:	431d      	orrs	r5, r3
 8000276:	2300      	movs	r3, #0
 8000278:	4699      	mov	r9, r3
 800027a:	469a      	mov	sl, r3
 800027c:	3f7f      	subs	r7, #127	@ 0x7f
 800027e:	0274      	lsls	r4, r6, #9
 8000280:	0073      	lsls	r3, r6, #1
 8000282:	0a64      	lsrs	r4, r4, #9
 8000284:	0e1b      	lsrs	r3, r3, #24
 8000286:	0ff6      	lsrs	r6, r6, #31
 8000288:	2b00      	cmp	r3, #0
 800028a:	d020      	beq.n	80002ce <__aeabi_fdiv+0x7e>
 800028c:	2bff      	cmp	r3, #255	@ 0xff
 800028e:	d043      	beq.n	8000318 <__aeabi_fdiv+0xc8>
 8000290:	2280      	movs	r2, #128	@ 0x80
 8000292:	2000      	movs	r0, #0
 8000294:	00e4      	lsls	r4, r4, #3
 8000296:	04d2      	lsls	r2, r2, #19
 8000298:	4314      	orrs	r4, r2
 800029a:	3b7f      	subs	r3, #127	@ 0x7f
 800029c:	4642      	mov	r2, r8
 800029e:	1aff      	subs	r7, r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4072      	eors	r2, r6
 80002a4:	2b0f      	cmp	r3, #15
 80002a6:	d900      	bls.n	80002aa <__aeabi_fdiv+0x5a>
 80002a8:	e09d      	b.n	80003e6 <__aeabi_fdiv+0x196>
 80002aa:	4971      	ldr	r1, [pc, #452]	@ (8000470 <__aeabi_fdiv+0x220>)
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	58cb      	ldr	r3, [r1, r3]
 80002b0:	469f      	mov	pc, r3
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	d15a      	bne.n	800036c <__aeabi_fdiv+0x11c>
 80002b6:	2308      	movs	r3, #8
 80002b8:	4699      	mov	r9, r3
 80002ba:	3b06      	subs	r3, #6
 80002bc:	0274      	lsls	r4, r6, #9
 80002be:	469a      	mov	sl, r3
 80002c0:	0073      	lsls	r3, r6, #1
 80002c2:	27ff      	movs	r7, #255	@ 0xff
 80002c4:	0a64      	lsrs	r4, r4, #9
 80002c6:	0e1b      	lsrs	r3, r3, #24
 80002c8:	0ff6      	lsrs	r6, r6, #31
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1de      	bne.n	800028c <__aeabi_fdiv+0x3c>
 80002ce:	2c00      	cmp	r4, #0
 80002d0:	d13b      	bne.n	800034a <__aeabi_fdiv+0xfa>
 80002d2:	2301      	movs	r3, #1
 80002d4:	4642      	mov	r2, r8
 80002d6:	4649      	mov	r1, r9
 80002d8:	4072      	eors	r2, r6
 80002da:	4319      	orrs	r1, r3
 80002dc:	290e      	cmp	r1, #14
 80002de:	d818      	bhi.n	8000312 <__aeabi_fdiv+0xc2>
 80002e0:	4864      	ldr	r0, [pc, #400]	@ (8000474 <__aeabi_fdiv+0x224>)
 80002e2:	0089      	lsls	r1, r1, #2
 80002e4:	5841      	ldr	r1, [r0, r1]
 80002e6:	468f      	mov	pc, r1
 80002e8:	4653      	mov	r3, sl
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fdiv+0xa0>
 80002ee:	e0b8      	b.n	8000462 <__aeabi_fdiv+0x212>
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d06e      	beq.n	80003d2 <__aeabi_fdiv+0x182>
 80002f4:	4642      	mov	r2, r8
 80002f6:	002c      	movs	r4, r5
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d140      	bne.n	800037e <__aeabi_fdiv+0x12e>
 80002fc:	2000      	movs	r0, #0
 80002fe:	2400      	movs	r4, #0
 8000300:	05c0      	lsls	r0, r0, #23
 8000302:	4320      	orrs	r0, r4
 8000304:	07d2      	lsls	r2, r2, #31
 8000306:	4310      	orrs	r0, r2
 8000308:	bce0      	pop	{r5, r6, r7}
 800030a:	46ba      	mov	sl, r7
 800030c:	46b1      	mov	r9, r6
 800030e:	46a8      	mov	r8, r5
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	20ff      	movs	r0, #255	@ 0xff
 8000314:	2400      	movs	r4, #0
 8000316:	e7f3      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000318:	2c00      	cmp	r4, #0
 800031a:	d120      	bne.n	800035e <__aeabi_fdiv+0x10e>
 800031c:	2302      	movs	r3, #2
 800031e:	3fff      	subs	r7, #255	@ 0xff
 8000320:	e7d8      	b.n	80002d4 <__aeabi_fdiv+0x84>
 8000322:	2d00      	cmp	r5, #0
 8000324:	d105      	bne.n	8000332 <__aeabi_fdiv+0xe2>
 8000326:	2304      	movs	r3, #4
 8000328:	4699      	mov	r9, r3
 800032a:	3b03      	subs	r3, #3
 800032c:	2700      	movs	r7, #0
 800032e:	469a      	mov	sl, r3
 8000330:	e7a5      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000332:	0028      	movs	r0, r5
 8000334:	f000 fd00 	bl	8000d38 <__clzsi2>
 8000338:	2776      	movs	r7, #118	@ 0x76
 800033a:	1f43      	subs	r3, r0, #5
 800033c:	409d      	lsls	r5, r3
 800033e:	2300      	movs	r3, #0
 8000340:	427f      	negs	r7, r7
 8000342:	4699      	mov	r9, r3
 8000344:	469a      	mov	sl, r3
 8000346:	1a3f      	subs	r7, r7, r0
 8000348:	e799      	b.n	800027e <__aeabi_fdiv+0x2e>
 800034a:	0020      	movs	r0, r4
 800034c:	f000 fcf4 	bl	8000d38 <__clzsi2>
 8000350:	1f43      	subs	r3, r0, #5
 8000352:	409c      	lsls	r4, r3
 8000354:	2376      	movs	r3, #118	@ 0x76
 8000356:	425b      	negs	r3, r3
 8000358:	1a1b      	subs	r3, r3, r0
 800035a:	2000      	movs	r0, #0
 800035c:	e79e      	b.n	800029c <__aeabi_fdiv+0x4c>
 800035e:	2303      	movs	r3, #3
 8000360:	464a      	mov	r2, r9
 8000362:	431a      	orrs	r2, r3
 8000364:	4691      	mov	r9, r2
 8000366:	2003      	movs	r0, #3
 8000368:	33fc      	adds	r3, #252	@ 0xfc
 800036a:	e797      	b.n	800029c <__aeabi_fdiv+0x4c>
 800036c:	230c      	movs	r3, #12
 800036e:	4699      	mov	r9, r3
 8000370:	3b09      	subs	r3, #9
 8000372:	27ff      	movs	r7, #255	@ 0xff
 8000374:	469a      	mov	sl, r3
 8000376:	e782      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000378:	2803      	cmp	r0, #3
 800037a:	d02c      	beq.n	80003d6 <__aeabi_fdiv+0x186>
 800037c:	0032      	movs	r2, r6
 800037e:	0038      	movs	r0, r7
 8000380:	307f      	adds	r0, #127	@ 0x7f
 8000382:	2800      	cmp	r0, #0
 8000384:	dd47      	ble.n	8000416 <__aeabi_fdiv+0x1c6>
 8000386:	0763      	lsls	r3, r4, #29
 8000388:	d004      	beq.n	8000394 <__aeabi_fdiv+0x144>
 800038a:	230f      	movs	r3, #15
 800038c:	4023      	ands	r3, r4
 800038e:	2b04      	cmp	r3, #4
 8000390:	d000      	beq.n	8000394 <__aeabi_fdiv+0x144>
 8000392:	3404      	adds	r4, #4
 8000394:	0123      	lsls	r3, r4, #4
 8000396:	d503      	bpl.n	80003a0 <__aeabi_fdiv+0x150>
 8000398:	0038      	movs	r0, r7
 800039a:	4b37      	ldr	r3, [pc, #220]	@ (8000478 <__aeabi_fdiv+0x228>)
 800039c:	3080      	adds	r0, #128	@ 0x80
 800039e:	401c      	ands	r4, r3
 80003a0:	28fe      	cmp	r0, #254	@ 0xfe
 80003a2:	dcb6      	bgt.n	8000312 <__aeabi_fdiv+0xc2>
 80003a4:	01a4      	lsls	r4, r4, #6
 80003a6:	0a64      	lsrs	r4, r4, #9
 80003a8:	b2c0      	uxtb	r0, r0
 80003aa:	e7a9      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003ac:	2480      	movs	r4, #128	@ 0x80
 80003ae:	2200      	movs	r2, #0
 80003b0:	20ff      	movs	r0, #255	@ 0xff
 80003b2:	03e4      	lsls	r4, r4, #15
 80003b4:	e7a4      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003b6:	2380      	movs	r3, #128	@ 0x80
 80003b8:	03db      	lsls	r3, r3, #15
 80003ba:	421d      	tst	r5, r3
 80003bc:	d001      	beq.n	80003c2 <__aeabi_fdiv+0x172>
 80003be:	421c      	tst	r4, r3
 80003c0:	d00b      	beq.n	80003da <__aeabi_fdiv+0x18a>
 80003c2:	2480      	movs	r4, #128	@ 0x80
 80003c4:	03e4      	lsls	r4, r4, #15
 80003c6:	432c      	orrs	r4, r5
 80003c8:	0264      	lsls	r4, r4, #9
 80003ca:	4642      	mov	r2, r8
 80003cc:	20ff      	movs	r0, #255	@ 0xff
 80003ce:	0a64      	lsrs	r4, r4, #9
 80003d0:	e796      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003d2:	4646      	mov	r6, r8
 80003d4:	002c      	movs	r4, r5
 80003d6:	2380      	movs	r3, #128	@ 0x80
 80003d8:	03db      	lsls	r3, r3, #15
 80003da:	431c      	orrs	r4, r3
 80003dc:	0264      	lsls	r4, r4, #9
 80003de:	0032      	movs	r2, r6
 80003e0:	20ff      	movs	r0, #255	@ 0xff
 80003e2:	0a64      	lsrs	r4, r4, #9
 80003e4:	e78c      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003e6:	016d      	lsls	r5, r5, #5
 80003e8:	0160      	lsls	r0, r4, #5
 80003ea:	4285      	cmp	r5, r0
 80003ec:	d22d      	bcs.n	800044a <__aeabi_fdiv+0x1fa>
 80003ee:	231b      	movs	r3, #27
 80003f0:	2400      	movs	r4, #0
 80003f2:	3f01      	subs	r7, #1
 80003f4:	2601      	movs	r6, #1
 80003f6:	0029      	movs	r1, r5
 80003f8:	0064      	lsls	r4, r4, #1
 80003fa:	006d      	lsls	r5, r5, #1
 80003fc:	2900      	cmp	r1, #0
 80003fe:	db01      	blt.n	8000404 <__aeabi_fdiv+0x1b4>
 8000400:	4285      	cmp	r5, r0
 8000402:	d301      	bcc.n	8000408 <__aeabi_fdiv+0x1b8>
 8000404:	1a2d      	subs	r5, r5, r0
 8000406:	4334      	orrs	r4, r6
 8000408:	3b01      	subs	r3, #1
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1f3      	bne.n	80003f6 <__aeabi_fdiv+0x1a6>
 800040e:	1e6b      	subs	r3, r5, #1
 8000410:	419d      	sbcs	r5, r3
 8000412:	432c      	orrs	r4, r5
 8000414:	e7b3      	b.n	800037e <__aeabi_fdiv+0x12e>
 8000416:	2301      	movs	r3, #1
 8000418:	1a1b      	subs	r3, r3, r0
 800041a:	2b1b      	cmp	r3, #27
 800041c:	dd00      	ble.n	8000420 <__aeabi_fdiv+0x1d0>
 800041e:	e76d      	b.n	80002fc <__aeabi_fdiv+0xac>
 8000420:	0021      	movs	r1, r4
 8000422:	379e      	adds	r7, #158	@ 0x9e
 8000424:	40d9      	lsrs	r1, r3
 8000426:	40bc      	lsls	r4, r7
 8000428:	000b      	movs	r3, r1
 800042a:	1e61      	subs	r1, r4, #1
 800042c:	418c      	sbcs	r4, r1
 800042e:	4323      	orrs	r3, r4
 8000430:	0759      	lsls	r1, r3, #29
 8000432:	d004      	beq.n	800043e <__aeabi_fdiv+0x1ee>
 8000434:	210f      	movs	r1, #15
 8000436:	4019      	ands	r1, r3
 8000438:	2904      	cmp	r1, #4
 800043a:	d000      	beq.n	800043e <__aeabi_fdiv+0x1ee>
 800043c:	3304      	adds	r3, #4
 800043e:	0159      	lsls	r1, r3, #5
 8000440:	d413      	bmi.n	800046a <__aeabi_fdiv+0x21a>
 8000442:	019b      	lsls	r3, r3, #6
 8000444:	2000      	movs	r0, #0
 8000446:	0a5c      	lsrs	r4, r3, #9
 8000448:	e75a      	b.n	8000300 <__aeabi_fdiv+0xb0>
 800044a:	231a      	movs	r3, #26
 800044c:	2401      	movs	r4, #1
 800044e:	1a2d      	subs	r5, r5, r0
 8000450:	e7d0      	b.n	80003f4 <__aeabi_fdiv+0x1a4>
 8000452:	1e98      	subs	r0, r3, #2
 8000454:	4243      	negs	r3, r0
 8000456:	4158      	adcs	r0, r3
 8000458:	4240      	negs	r0, r0
 800045a:	0032      	movs	r2, r6
 800045c:	2400      	movs	r4, #0
 800045e:	b2c0      	uxtb	r0, r0
 8000460:	e74e      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000462:	4642      	mov	r2, r8
 8000464:	20ff      	movs	r0, #255	@ 0xff
 8000466:	2400      	movs	r4, #0
 8000468:	e74a      	b.n	8000300 <__aeabi_fdiv+0xb0>
 800046a:	2001      	movs	r0, #1
 800046c:	2400      	movs	r4, #0
 800046e:	e747      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000470:	08003db4 	.word	0x08003db4
 8000474:	08003df4 	.word	0x08003df4
 8000478:	f7ffffff 	.word	0xf7ffffff

0800047c <__aeabi_fmul>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	464f      	mov	r7, r9
 8000480:	4646      	mov	r6, r8
 8000482:	46d6      	mov	lr, sl
 8000484:	0044      	lsls	r4, r0, #1
 8000486:	b5c0      	push	{r6, r7, lr}
 8000488:	0246      	lsls	r6, r0, #9
 800048a:	1c0f      	adds	r7, r1, #0
 800048c:	0a76      	lsrs	r6, r6, #9
 800048e:	0e24      	lsrs	r4, r4, #24
 8000490:	0fc5      	lsrs	r5, r0, #31
 8000492:	2c00      	cmp	r4, #0
 8000494:	d100      	bne.n	8000498 <__aeabi_fmul+0x1c>
 8000496:	e0da      	b.n	800064e <__aeabi_fmul+0x1d2>
 8000498:	2cff      	cmp	r4, #255	@ 0xff
 800049a:	d074      	beq.n	8000586 <__aeabi_fmul+0x10a>
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	00f6      	lsls	r6, r6, #3
 80004a0:	04db      	lsls	r3, r3, #19
 80004a2:	431e      	orrs	r6, r3
 80004a4:	2300      	movs	r3, #0
 80004a6:	4699      	mov	r9, r3
 80004a8:	469a      	mov	sl, r3
 80004aa:	3c7f      	subs	r4, #127	@ 0x7f
 80004ac:	027b      	lsls	r3, r7, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	4698      	mov	r8, r3
 80004b2:	007b      	lsls	r3, r7, #1
 80004b4:	0e1b      	lsrs	r3, r3, #24
 80004b6:	0fff      	lsrs	r7, r7, #31
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d074      	beq.n	80005a6 <__aeabi_fmul+0x12a>
 80004bc:	2bff      	cmp	r3, #255	@ 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fmul+0x46>
 80004c0:	e08e      	b.n	80005e0 <__aeabi_fmul+0x164>
 80004c2:	4642      	mov	r2, r8
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	00d2      	lsls	r2, r2, #3
 80004c8:	04c9      	lsls	r1, r1, #19
 80004ca:	4311      	orrs	r1, r2
 80004cc:	3b7f      	subs	r3, #127	@ 0x7f
 80004ce:	002a      	movs	r2, r5
 80004d0:	18e4      	adds	r4, r4, r3
 80004d2:	464b      	mov	r3, r9
 80004d4:	407a      	eors	r2, r7
 80004d6:	4688      	mov	r8, r1
 80004d8:	b2d2      	uxtb	r2, r2
 80004da:	2b0a      	cmp	r3, #10
 80004dc:	dc75      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80004de:	464b      	mov	r3, r9
 80004e0:	2000      	movs	r0, #0
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	dd0f      	ble.n	8000506 <__aeabi_fmul+0x8a>
 80004e6:	4649      	mov	r1, r9
 80004e8:	2301      	movs	r3, #1
 80004ea:	408b      	lsls	r3, r1
 80004ec:	21a6      	movs	r1, #166	@ 0xa6
 80004ee:	00c9      	lsls	r1, r1, #3
 80004f0:	420b      	tst	r3, r1
 80004f2:	d169      	bne.n	80005c8 <__aeabi_fmul+0x14c>
 80004f4:	2190      	movs	r1, #144	@ 0x90
 80004f6:	0089      	lsls	r1, r1, #2
 80004f8:	420b      	tst	r3, r1
 80004fa:	d000      	beq.n	80004fe <__aeabi_fmul+0x82>
 80004fc:	e100      	b.n	8000700 <__aeabi_fmul+0x284>
 80004fe:	2188      	movs	r1, #136	@ 0x88
 8000500:	4219      	tst	r1, r3
 8000502:	d000      	beq.n	8000506 <__aeabi_fmul+0x8a>
 8000504:	e0f5      	b.n	80006f2 <__aeabi_fmul+0x276>
 8000506:	4641      	mov	r1, r8
 8000508:	0409      	lsls	r1, r1, #16
 800050a:	0c09      	lsrs	r1, r1, #16
 800050c:	4643      	mov	r3, r8
 800050e:	0008      	movs	r0, r1
 8000510:	0c35      	lsrs	r5, r6, #16
 8000512:	0436      	lsls	r6, r6, #16
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	0c36      	lsrs	r6, r6, #16
 8000518:	4370      	muls	r0, r6
 800051a:	4369      	muls	r1, r5
 800051c:	435e      	muls	r6, r3
 800051e:	435d      	muls	r5, r3
 8000520:	1876      	adds	r6, r6, r1
 8000522:	0c03      	lsrs	r3, r0, #16
 8000524:	199b      	adds	r3, r3, r6
 8000526:	4299      	cmp	r1, r3
 8000528:	d903      	bls.n	8000532 <__aeabi_fmul+0xb6>
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	0249      	lsls	r1, r1, #9
 800052e:	468c      	mov	ip, r1
 8000530:	4465      	add	r5, ip
 8000532:	0400      	lsls	r0, r0, #16
 8000534:	0419      	lsls	r1, r3, #16
 8000536:	0c00      	lsrs	r0, r0, #16
 8000538:	1809      	adds	r1, r1, r0
 800053a:	018e      	lsls	r6, r1, #6
 800053c:	1e70      	subs	r0, r6, #1
 800053e:	4186      	sbcs	r6, r0
 8000540:	0c1b      	lsrs	r3, r3, #16
 8000542:	0e89      	lsrs	r1, r1, #26
 8000544:	195b      	adds	r3, r3, r5
 8000546:	430e      	orrs	r6, r1
 8000548:	019b      	lsls	r3, r3, #6
 800054a:	431e      	orrs	r6, r3
 800054c:	011b      	lsls	r3, r3, #4
 800054e:	d46c      	bmi.n	800062a <__aeabi_fmul+0x1ae>
 8000550:	0023      	movs	r3, r4
 8000552:	337f      	adds	r3, #127	@ 0x7f
 8000554:	2b00      	cmp	r3, #0
 8000556:	dc00      	bgt.n	800055a <__aeabi_fmul+0xde>
 8000558:	e0b1      	b.n	80006be <__aeabi_fmul+0x242>
 800055a:	0015      	movs	r5, r2
 800055c:	0771      	lsls	r1, r6, #29
 800055e:	d00b      	beq.n	8000578 <__aeabi_fmul+0xfc>
 8000560:	200f      	movs	r0, #15
 8000562:	0021      	movs	r1, r4
 8000564:	4030      	ands	r0, r6
 8000566:	2804      	cmp	r0, #4
 8000568:	d006      	beq.n	8000578 <__aeabi_fmul+0xfc>
 800056a:	3604      	adds	r6, #4
 800056c:	0132      	lsls	r2, r6, #4
 800056e:	d503      	bpl.n	8000578 <__aeabi_fmul+0xfc>
 8000570:	4b6e      	ldr	r3, [pc, #440]	@ (800072c <__aeabi_fmul+0x2b0>)
 8000572:	401e      	ands	r6, r3
 8000574:	000b      	movs	r3, r1
 8000576:	3380      	adds	r3, #128	@ 0x80
 8000578:	2bfe      	cmp	r3, #254	@ 0xfe
 800057a:	dd00      	ble.n	800057e <__aeabi_fmul+0x102>
 800057c:	e0bd      	b.n	80006fa <__aeabi_fmul+0x27e>
 800057e:	01b2      	lsls	r2, r6, #6
 8000580:	0a52      	lsrs	r2, r2, #9
 8000582:	b2db      	uxtb	r3, r3
 8000584:	e048      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000586:	2e00      	cmp	r6, #0
 8000588:	d000      	beq.n	800058c <__aeabi_fmul+0x110>
 800058a:	e092      	b.n	80006b2 <__aeabi_fmul+0x236>
 800058c:	2308      	movs	r3, #8
 800058e:	4699      	mov	r9, r3
 8000590:	3b06      	subs	r3, #6
 8000592:	469a      	mov	sl, r3
 8000594:	027b      	lsls	r3, r7, #9
 8000596:	0a5b      	lsrs	r3, r3, #9
 8000598:	4698      	mov	r8, r3
 800059a:	007b      	lsls	r3, r7, #1
 800059c:	24ff      	movs	r4, #255	@ 0xff
 800059e:	0e1b      	lsrs	r3, r3, #24
 80005a0:	0fff      	lsrs	r7, r7, #31
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d18a      	bne.n	80004bc <__aeabi_fmul+0x40>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d164      	bne.n	8000676 <__aeabi_fmul+0x1fa>
 80005ac:	4649      	mov	r1, r9
 80005ae:	3201      	adds	r2, #1
 80005b0:	4311      	orrs	r1, r2
 80005b2:	4689      	mov	r9, r1
 80005b4:	290a      	cmp	r1, #10
 80005b6:	dc08      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80005b8:	407d      	eors	r5, r7
 80005ba:	2001      	movs	r0, #1
 80005bc:	b2ea      	uxtb	r2, r5
 80005be:	2902      	cmp	r1, #2
 80005c0:	dc91      	bgt.n	80004e6 <__aeabi_fmul+0x6a>
 80005c2:	0015      	movs	r5, r2
 80005c4:	2200      	movs	r2, #0
 80005c6:	e027      	b.n	8000618 <__aeabi_fmul+0x19c>
 80005c8:	0015      	movs	r5, r2
 80005ca:	4653      	mov	r3, sl
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fmul+0x156>
 80005d0:	e093      	b.n	80006fa <__aeabi_fmul+0x27e>
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d01a      	beq.n	800060c <__aeabi_fmul+0x190>
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d12c      	bne.n	8000634 <__aeabi_fmul+0x1b8>
 80005da:	2300      	movs	r3, #0
 80005dc:	2200      	movs	r2, #0
 80005de:	e01b      	b.n	8000618 <__aeabi_fmul+0x19c>
 80005e0:	4643      	mov	r3, r8
 80005e2:	34ff      	adds	r4, #255	@ 0xff
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d055      	beq.n	8000694 <__aeabi_fmul+0x218>
 80005e8:	2103      	movs	r1, #3
 80005ea:	464b      	mov	r3, r9
 80005ec:	430b      	orrs	r3, r1
 80005ee:	0019      	movs	r1, r3
 80005f0:	2b0a      	cmp	r3, #10
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_fmul+0x17a>
 80005f4:	e092      	b.n	800071c <__aeabi_fmul+0x2a0>
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	d000      	beq.n	80005fc <__aeabi_fmul+0x180>
 80005fa:	e08c      	b.n	8000716 <__aeabi_fmul+0x29a>
 80005fc:	2280      	movs	r2, #128	@ 0x80
 80005fe:	03d2      	lsls	r2, r2, #15
 8000600:	4216      	tst	r6, r2
 8000602:	d003      	beq.n	800060c <__aeabi_fmul+0x190>
 8000604:	4643      	mov	r3, r8
 8000606:	4213      	tst	r3, r2
 8000608:	d100      	bne.n	800060c <__aeabi_fmul+0x190>
 800060a:	e07d      	b.n	8000708 <__aeabi_fmul+0x28c>
 800060c:	2280      	movs	r2, #128	@ 0x80
 800060e:	03d2      	lsls	r2, r2, #15
 8000610:	4332      	orrs	r2, r6
 8000612:	0252      	lsls	r2, r2, #9
 8000614:	0a52      	lsrs	r2, r2, #9
 8000616:	23ff      	movs	r3, #255	@ 0xff
 8000618:	05d8      	lsls	r0, r3, #23
 800061a:	07ed      	lsls	r5, r5, #31
 800061c:	4310      	orrs	r0, r2
 800061e:	4328      	orrs	r0, r5
 8000620:	bce0      	pop	{r5, r6, r7}
 8000622:	46ba      	mov	sl, r7
 8000624:	46b1      	mov	r9, r6
 8000626:	46a8      	mov	r8, r5
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062a:	2301      	movs	r3, #1
 800062c:	0015      	movs	r5, r2
 800062e:	0871      	lsrs	r1, r6, #1
 8000630:	401e      	ands	r6, r3
 8000632:	430e      	orrs	r6, r1
 8000634:	0023      	movs	r3, r4
 8000636:	3380      	adds	r3, #128	@ 0x80
 8000638:	1c61      	adds	r1, r4, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	dd41      	ble.n	80006c2 <__aeabi_fmul+0x246>
 800063e:	0772      	lsls	r2, r6, #29
 8000640:	d094      	beq.n	800056c <__aeabi_fmul+0xf0>
 8000642:	220f      	movs	r2, #15
 8000644:	4032      	ands	r2, r6
 8000646:	2a04      	cmp	r2, #4
 8000648:	d000      	beq.n	800064c <__aeabi_fmul+0x1d0>
 800064a:	e78e      	b.n	800056a <__aeabi_fmul+0xee>
 800064c:	e78e      	b.n	800056c <__aeabi_fmul+0xf0>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d105      	bne.n	800065e <__aeabi_fmul+0x1e2>
 8000652:	2304      	movs	r3, #4
 8000654:	4699      	mov	r9, r3
 8000656:	3b03      	subs	r3, #3
 8000658:	2400      	movs	r4, #0
 800065a:	469a      	mov	sl, r3
 800065c:	e726      	b.n	80004ac <__aeabi_fmul+0x30>
 800065e:	0030      	movs	r0, r6
 8000660:	f000 fb6a 	bl	8000d38 <__clzsi2>
 8000664:	2476      	movs	r4, #118	@ 0x76
 8000666:	1f43      	subs	r3, r0, #5
 8000668:	409e      	lsls	r6, r3
 800066a:	2300      	movs	r3, #0
 800066c:	4264      	negs	r4, r4
 800066e:	4699      	mov	r9, r3
 8000670:	469a      	mov	sl, r3
 8000672:	1a24      	subs	r4, r4, r0
 8000674:	e71a      	b.n	80004ac <__aeabi_fmul+0x30>
 8000676:	4640      	mov	r0, r8
 8000678:	f000 fb5e 	bl	8000d38 <__clzsi2>
 800067c:	464b      	mov	r3, r9
 800067e:	1a24      	subs	r4, r4, r0
 8000680:	3c76      	subs	r4, #118	@ 0x76
 8000682:	2b0a      	cmp	r3, #10
 8000684:	dca1      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 8000686:	4643      	mov	r3, r8
 8000688:	3805      	subs	r0, #5
 800068a:	4083      	lsls	r3, r0
 800068c:	407d      	eors	r5, r7
 800068e:	4698      	mov	r8, r3
 8000690:	b2ea      	uxtb	r2, r5
 8000692:	e724      	b.n	80004de <__aeabi_fmul+0x62>
 8000694:	464a      	mov	r2, r9
 8000696:	3302      	adds	r3, #2
 8000698:	4313      	orrs	r3, r2
 800069a:	002a      	movs	r2, r5
 800069c:	407a      	eors	r2, r7
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	2b0a      	cmp	r3, #10
 80006a2:	dc92      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	0015      	movs	r5, r2
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d026      	beq.n	80006fa <__aeabi_fmul+0x27e>
 80006ac:	4699      	mov	r9, r3
 80006ae:	2002      	movs	r0, #2
 80006b0:	e719      	b.n	80004e6 <__aeabi_fmul+0x6a>
 80006b2:	230c      	movs	r3, #12
 80006b4:	4699      	mov	r9, r3
 80006b6:	3b09      	subs	r3, #9
 80006b8:	24ff      	movs	r4, #255	@ 0xff
 80006ba:	469a      	mov	sl, r3
 80006bc:	e6f6      	b.n	80004ac <__aeabi_fmul+0x30>
 80006be:	0015      	movs	r5, r2
 80006c0:	0021      	movs	r1, r4
 80006c2:	2201      	movs	r2, #1
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	2b1b      	cmp	r3, #27
 80006c8:	dd00      	ble.n	80006cc <__aeabi_fmul+0x250>
 80006ca:	e786      	b.n	80005da <__aeabi_fmul+0x15e>
 80006cc:	319e      	adds	r1, #158	@ 0x9e
 80006ce:	0032      	movs	r2, r6
 80006d0:	408e      	lsls	r6, r1
 80006d2:	40da      	lsrs	r2, r3
 80006d4:	1e73      	subs	r3, r6, #1
 80006d6:	419e      	sbcs	r6, r3
 80006d8:	4332      	orrs	r2, r6
 80006da:	0753      	lsls	r3, r2, #29
 80006dc:	d004      	beq.n	80006e8 <__aeabi_fmul+0x26c>
 80006de:	230f      	movs	r3, #15
 80006e0:	4013      	ands	r3, r2
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fmul+0x26c>
 80006e6:	3204      	adds	r2, #4
 80006e8:	0153      	lsls	r3, r2, #5
 80006ea:	d510      	bpl.n	800070e <__aeabi_fmul+0x292>
 80006ec:	2301      	movs	r3, #1
 80006ee:	2200      	movs	r2, #0
 80006f0:	e792      	b.n	8000618 <__aeabi_fmul+0x19c>
 80006f2:	003d      	movs	r5, r7
 80006f4:	4646      	mov	r6, r8
 80006f6:	4682      	mov	sl, r0
 80006f8:	e767      	b.n	80005ca <__aeabi_fmul+0x14e>
 80006fa:	23ff      	movs	r3, #255	@ 0xff
 80006fc:	2200      	movs	r2, #0
 80006fe:	e78b      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000700:	2280      	movs	r2, #128	@ 0x80
 8000702:	2500      	movs	r5, #0
 8000704:	03d2      	lsls	r2, r2, #15
 8000706:	e786      	b.n	8000616 <__aeabi_fmul+0x19a>
 8000708:	003d      	movs	r5, r7
 800070a:	431a      	orrs	r2, r3
 800070c:	e783      	b.n	8000616 <__aeabi_fmul+0x19a>
 800070e:	0192      	lsls	r2, r2, #6
 8000710:	2300      	movs	r3, #0
 8000712:	0a52      	lsrs	r2, r2, #9
 8000714:	e780      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000716:	003d      	movs	r5, r7
 8000718:	4646      	mov	r6, r8
 800071a:	e777      	b.n	800060c <__aeabi_fmul+0x190>
 800071c:	002a      	movs	r2, r5
 800071e:	2301      	movs	r3, #1
 8000720:	407a      	eors	r2, r7
 8000722:	408b      	lsls	r3, r1
 8000724:	2003      	movs	r0, #3
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	e6e9      	b.n	80004fe <__aeabi_fmul+0x82>
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	f7ffffff 	.word	0xf7ffffff

08000730 <__aeabi_fsub>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	4647      	mov	r7, r8
 8000734:	46ce      	mov	lr, r9
 8000736:	0243      	lsls	r3, r0, #9
 8000738:	b580      	push	{r7, lr}
 800073a:	0a5f      	lsrs	r7, r3, #9
 800073c:	099b      	lsrs	r3, r3, #6
 800073e:	0045      	lsls	r5, r0, #1
 8000740:	004a      	lsls	r2, r1, #1
 8000742:	469c      	mov	ip, r3
 8000744:	024b      	lsls	r3, r1, #9
 8000746:	0fc4      	lsrs	r4, r0, #31
 8000748:	0fce      	lsrs	r6, r1, #31
 800074a:	0e2d      	lsrs	r5, r5, #24
 800074c:	0a58      	lsrs	r0, r3, #9
 800074e:	0e12      	lsrs	r2, r2, #24
 8000750:	0999      	lsrs	r1, r3, #6
 8000752:	2aff      	cmp	r2, #255	@ 0xff
 8000754:	d06b      	beq.n	800082e <__aeabi_fsub+0xfe>
 8000756:	2301      	movs	r3, #1
 8000758:	405e      	eors	r6, r3
 800075a:	1aab      	subs	r3, r5, r2
 800075c:	42b4      	cmp	r4, r6
 800075e:	d04b      	beq.n	80007f8 <__aeabi_fsub+0xc8>
 8000760:	2b00      	cmp	r3, #0
 8000762:	dc00      	bgt.n	8000766 <__aeabi_fsub+0x36>
 8000764:	e0ff      	b.n	8000966 <__aeabi_fsub+0x236>
 8000766:	2a00      	cmp	r2, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x3c>
 800076a:	e088      	b.n	800087e <__aeabi_fsub+0x14e>
 800076c:	2dff      	cmp	r5, #255	@ 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fsub+0x42>
 8000770:	e0ef      	b.n	8000952 <__aeabi_fsub+0x222>
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	04d2      	lsls	r2, r2, #19
 8000776:	4311      	orrs	r1, r2
 8000778:	2001      	movs	r0, #1
 800077a:	2b1b      	cmp	r3, #27
 800077c:	dc08      	bgt.n	8000790 <__aeabi_fsub+0x60>
 800077e:	0008      	movs	r0, r1
 8000780:	2220      	movs	r2, #32
 8000782:	40d8      	lsrs	r0, r3
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4099      	lsls	r1, r3
 8000788:	000b      	movs	r3, r1
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	4193      	sbcs	r3, r2
 800078e:	4318      	orrs	r0, r3
 8000790:	4663      	mov	r3, ip
 8000792:	1a1b      	subs	r3, r3, r0
 8000794:	469c      	mov	ip, r3
 8000796:	4663      	mov	r3, ip
 8000798:	015b      	lsls	r3, r3, #5
 800079a:	d400      	bmi.n	800079e <__aeabi_fsub+0x6e>
 800079c:	e0cd      	b.n	800093a <__aeabi_fsub+0x20a>
 800079e:	4663      	mov	r3, ip
 80007a0:	019f      	lsls	r7, r3, #6
 80007a2:	09bf      	lsrs	r7, r7, #6
 80007a4:	0038      	movs	r0, r7
 80007a6:	f000 fac7 	bl	8000d38 <__clzsi2>
 80007aa:	003b      	movs	r3, r7
 80007ac:	3805      	subs	r0, #5
 80007ae:	4083      	lsls	r3, r0
 80007b0:	4285      	cmp	r5, r0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_fsub+0x86>
 80007b4:	e0a2      	b.n	80008fc <__aeabi_fsub+0x1cc>
 80007b6:	4ab7      	ldr	r2, [pc, #732]	@ (8000a94 <__aeabi_fsub+0x364>)
 80007b8:	1a2d      	subs	r5, r5, r0
 80007ba:	401a      	ands	r2, r3
 80007bc:	4694      	mov	ip, r2
 80007be:	075a      	lsls	r2, r3, #29
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x94>
 80007c2:	e0c3      	b.n	800094c <__aeabi_fsub+0x21c>
 80007c4:	220f      	movs	r2, #15
 80007c6:	4013      	ands	r3, r2
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d100      	bne.n	80007ce <__aeabi_fsub+0x9e>
 80007cc:	e0be      	b.n	800094c <__aeabi_fsub+0x21c>
 80007ce:	2304      	movs	r3, #4
 80007d0:	4698      	mov	r8, r3
 80007d2:	44c4      	add	ip, r8
 80007d4:	4663      	mov	r3, ip
 80007d6:	015b      	lsls	r3, r3, #5
 80007d8:	d400      	bmi.n	80007dc <__aeabi_fsub+0xac>
 80007da:	e0b7      	b.n	800094c <__aeabi_fsub+0x21c>
 80007dc:	1c68      	adds	r0, r5, #1
 80007de:	2dfe      	cmp	r5, #254	@ 0xfe
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fsub+0xb4>
 80007e2:	e0a5      	b.n	8000930 <__aeabi_fsub+0x200>
 80007e4:	20ff      	movs	r0, #255	@ 0xff
 80007e6:	2200      	movs	r2, #0
 80007e8:	05c0      	lsls	r0, r0, #23
 80007ea:	4310      	orrs	r0, r2
 80007ec:	07e4      	lsls	r4, r4, #31
 80007ee:	4320      	orrs	r0, r4
 80007f0:	bcc0      	pop	{r6, r7}
 80007f2:	46b9      	mov	r9, r7
 80007f4:	46b0      	mov	r8, r6
 80007f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fsub+0xce>
 80007fc:	e1eb      	b.n	8000bd6 <__aeabi_fsub+0x4a6>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d046      	beq.n	8000890 <__aeabi_fsub+0x160>
 8000802:	2dff      	cmp	r5, #255	@ 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fsub+0xd8>
 8000806:	e0a4      	b.n	8000952 <__aeabi_fsub+0x222>
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	04d2      	lsls	r2, r2, #19
 800080c:	4311      	orrs	r1, r2
 800080e:	2b1b      	cmp	r3, #27
 8000810:	dc00      	bgt.n	8000814 <__aeabi_fsub+0xe4>
 8000812:	e0fb      	b.n	8000a0c <__aeabi_fsub+0x2dc>
 8000814:	2305      	movs	r3, #5
 8000816:	4698      	mov	r8, r3
 8000818:	002b      	movs	r3, r5
 800081a:	44c4      	add	ip, r8
 800081c:	4662      	mov	r2, ip
 800081e:	08d7      	lsrs	r7, r2, #3
 8000820:	2bff      	cmp	r3, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fsub+0xf6>
 8000824:	e095      	b.n	8000952 <__aeabi_fsub+0x222>
 8000826:	027a      	lsls	r2, r7, #9
 8000828:	0a52      	lsrs	r2, r2, #9
 800082a:	b2d8      	uxtb	r0, r3
 800082c:	e7dc      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800082e:	002b      	movs	r3, r5
 8000830:	3bff      	subs	r3, #255	@ 0xff
 8000832:	4699      	mov	r9, r3
 8000834:	2900      	cmp	r1, #0
 8000836:	d118      	bne.n	800086a <__aeabi_fsub+0x13a>
 8000838:	2301      	movs	r3, #1
 800083a:	405e      	eors	r6, r3
 800083c:	42b4      	cmp	r4, r6
 800083e:	d100      	bne.n	8000842 <__aeabi_fsub+0x112>
 8000840:	e0ca      	b.n	80009d8 <__aeabi_fsub+0x2a8>
 8000842:	464b      	mov	r3, r9
 8000844:	2b00      	cmp	r3, #0
 8000846:	d02d      	beq.n	80008a4 <__aeabi_fsub+0x174>
 8000848:	2d00      	cmp	r5, #0
 800084a:	d000      	beq.n	800084e <__aeabi_fsub+0x11e>
 800084c:	e13c      	b.n	8000ac8 <__aeabi_fsub+0x398>
 800084e:	23ff      	movs	r3, #255	@ 0xff
 8000850:	4664      	mov	r4, ip
 8000852:	2c00      	cmp	r4, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fsub+0x128>
 8000856:	e15f      	b.n	8000b18 <__aeabi_fsub+0x3e8>
 8000858:	1e5d      	subs	r5, r3, #1
 800085a:	2b01      	cmp	r3, #1
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x130>
 800085e:	e174      	b.n	8000b4a <__aeabi_fsub+0x41a>
 8000860:	0034      	movs	r4, r6
 8000862:	2bff      	cmp	r3, #255	@ 0xff
 8000864:	d074      	beq.n	8000950 <__aeabi_fsub+0x220>
 8000866:	002b      	movs	r3, r5
 8000868:	e103      	b.n	8000a72 <__aeabi_fsub+0x342>
 800086a:	42b4      	cmp	r4, r6
 800086c:	d100      	bne.n	8000870 <__aeabi_fsub+0x140>
 800086e:	e09c      	b.n	80009aa <__aeabi_fsub+0x27a>
 8000870:	2b00      	cmp	r3, #0
 8000872:	d017      	beq.n	80008a4 <__aeabi_fsub+0x174>
 8000874:	2d00      	cmp	r5, #0
 8000876:	d0ea      	beq.n	800084e <__aeabi_fsub+0x11e>
 8000878:	0007      	movs	r7, r0
 800087a:	0034      	movs	r4, r6
 800087c:	e06c      	b.n	8000958 <__aeabi_fsub+0x228>
 800087e:	2900      	cmp	r1, #0
 8000880:	d0cc      	beq.n	800081c <__aeabi_fsub+0xec>
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	2b01      	cmp	r3, #1
 8000886:	d02b      	beq.n	80008e0 <__aeabi_fsub+0x1b0>
 8000888:	2bff      	cmp	r3, #255	@ 0xff
 800088a:	d062      	beq.n	8000952 <__aeabi_fsub+0x222>
 800088c:	0013      	movs	r3, r2
 800088e:	e773      	b.n	8000778 <__aeabi_fsub+0x48>
 8000890:	2900      	cmp	r1, #0
 8000892:	d0c3      	beq.n	800081c <__aeabi_fsub+0xec>
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	2b01      	cmp	r3, #1
 8000898:	d100      	bne.n	800089c <__aeabi_fsub+0x16c>
 800089a:	e11e      	b.n	8000ada <__aeabi_fsub+0x3aa>
 800089c:	2bff      	cmp	r3, #255	@ 0xff
 800089e:	d058      	beq.n	8000952 <__aeabi_fsub+0x222>
 80008a0:	0013      	movs	r3, r2
 80008a2:	e7b4      	b.n	800080e <__aeabi_fsub+0xde>
 80008a4:	22fe      	movs	r2, #254	@ 0xfe
 80008a6:	1c6b      	adds	r3, r5, #1
 80008a8:	421a      	tst	r2, r3
 80008aa:	d10d      	bne.n	80008c8 <__aeabi_fsub+0x198>
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d060      	beq.n	8000972 <__aeabi_fsub+0x242>
 80008b0:	4663      	mov	r3, ip
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d000      	beq.n	80008b8 <__aeabi_fsub+0x188>
 80008b6:	e120      	b.n	8000afa <__aeabi_fsub+0x3ca>
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d000      	beq.n	80008be <__aeabi_fsub+0x18e>
 80008bc:	e128      	b.n	8000b10 <__aeabi_fsub+0x3e0>
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	2400      	movs	r4, #0
 80008c2:	20ff      	movs	r0, #255	@ 0xff
 80008c4:	03d2      	lsls	r2, r2, #15
 80008c6:	e78f      	b.n	80007e8 <__aeabi_fsub+0xb8>
 80008c8:	4663      	mov	r3, ip
 80008ca:	1a5f      	subs	r7, r3, r1
 80008cc:	017b      	lsls	r3, r7, #5
 80008ce:	d500      	bpl.n	80008d2 <__aeabi_fsub+0x1a2>
 80008d0:	e0fe      	b.n	8000ad0 <__aeabi_fsub+0x3a0>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fsub+0x1a8>
 80008d6:	e765      	b.n	80007a4 <__aeabi_fsub+0x74>
 80008d8:	2400      	movs	r4, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	e783      	b.n	80007e8 <__aeabi_fsub+0xb8>
 80008e0:	4663      	mov	r3, ip
 80008e2:	1a59      	subs	r1, r3, r1
 80008e4:	014b      	lsls	r3, r1, #5
 80008e6:	d400      	bmi.n	80008ea <__aeabi_fsub+0x1ba>
 80008e8:	e119      	b.n	8000b1e <__aeabi_fsub+0x3ee>
 80008ea:	018f      	lsls	r7, r1, #6
 80008ec:	09bf      	lsrs	r7, r7, #6
 80008ee:	0038      	movs	r0, r7
 80008f0:	f000 fa22 	bl	8000d38 <__clzsi2>
 80008f4:	003b      	movs	r3, r7
 80008f6:	3805      	subs	r0, #5
 80008f8:	4083      	lsls	r3, r0
 80008fa:	2501      	movs	r5, #1
 80008fc:	2220      	movs	r2, #32
 80008fe:	1b40      	subs	r0, r0, r5
 8000900:	3001      	adds	r0, #1
 8000902:	1a12      	subs	r2, r2, r0
 8000904:	0019      	movs	r1, r3
 8000906:	4093      	lsls	r3, r2
 8000908:	40c1      	lsrs	r1, r0
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	4193      	sbcs	r3, r2
 800090e:	4319      	orrs	r1, r3
 8000910:	468c      	mov	ip, r1
 8000912:	1e0b      	subs	r3, r1, #0
 8000914:	d0e1      	beq.n	80008da <__aeabi_fsub+0x1aa>
 8000916:	075b      	lsls	r3, r3, #29
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0x1ec>
 800091a:	e152      	b.n	8000bc2 <__aeabi_fsub+0x492>
 800091c:	230f      	movs	r3, #15
 800091e:	2500      	movs	r5, #0
 8000920:	400b      	ands	r3, r1
 8000922:	2b04      	cmp	r3, #4
 8000924:	d000      	beq.n	8000928 <__aeabi_fsub+0x1f8>
 8000926:	e752      	b.n	80007ce <__aeabi_fsub+0x9e>
 8000928:	2001      	movs	r0, #1
 800092a:	014a      	lsls	r2, r1, #5
 800092c:	d400      	bmi.n	8000930 <__aeabi_fsub+0x200>
 800092e:	e092      	b.n	8000a56 <__aeabi_fsub+0x326>
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	4663      	mov	r3, ip
 8000934:	019a      	lsls	r2, r3, #6
 8000936:	0a52      	lsrs	r2, r2, #9
 8000938:	e756      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800093a:	4663      	mov	r3, ip
 800093c:	075b      	lsls	r3, r3, #29
 800093e:	d005      	beq.n	800094c <__aeabi_fsub+0x21c>
 8000940:	230f      	movs	r3, #15
 8000942:	4662      	mov	r2, ip
 8000944:	4013      	ands	r3, r2
 8000946:	2b04      	cmp	r3, #4
 8000948:	d000      	beq.n	800094c <__aeabi_fsub+0x21c>
 800094a:	e740      	b.n	80007ce <__aeabi_fsub+0x9e>
 800094c:	002b      	movs	r3, r5
 800094e:	e765      	b.n	800081c <__aeabi_fsub+0xec>
 8000950:	0007      	movs	r7, r0
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fsub+0x228>
 8000956:	e745      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	03d2      	lsls	r2, r2, #15
 800095c:	433a      	orrs	r2, r7
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	20ff      	movs	r0, #255	@ 0xff
 8000962:	0a52      	lsrs	r2, r2, #9
 8000964:	e740      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000966:	2b00      	cmp	r3, #0
 8000968:	d179      	bne.n	8000a5e <__aeabi_fsub+0x32e>
 800096a:	22fe      	movs	r2, #254	@ 0xfe
 800096c:	1c6b      	adds	r3, r5, #1
 800096e:	421a      	tst	r2, r3
 8000970:	d1aa      	bne.n	80008c8 <__aeabi_fsub+0x198>
 8000972:	4663      	mov	r3, ip
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x24a>
 8000978:	e0f5      	b.n	8000b66 <__aeabi_fsub+0x436>
 800097a:	2900      	cmp	r1, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fsub+0x250>
 800097e:	e0d1      	b.n	8000b24 <__aeabi_fsub+0x3f4>
 8000980:	1a5f      	subs	r7, r3, r1
 8000982:	2380      	movs	r3, #128	@ 0x80
 8000984:	04db      	lsls	r3, r3, #19
 8000986:	421f      	tst	r7, r3
 8000988:	d100      	bne.n	800098c <__aeabi_fsub+0x25c>
 800098a:	e10e      	b.n	8000baa <__aeabi_fsub+0x47a>
 800098c:	4662      	mov	r2, ip
 800098e:	2401      	movs	r4, #1
 8000990:	1a8a      	subs	r2, r1, r2
 8000992:	4694      	mov	ip, r2
 8000994:	2000      	movs	r0, #0
 8000996:	4034      	ands	r4, r6
 8000998:	2a00      	cmp	r2, #0
 800099a:	d100      	bne.n	800099e <__aeabi_fsub+0x26e>
 800099c:	e724      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800099e:	2001      	movs	r0, #1
 80009a0:	421a      	tst	r2, r3
 80009a2:	d1c6      	bne.n	8000932 <__aeabi_fsub+0x202>
 80009a4:	2300      	movs	r3, #0
 80009a6:	08d7      	lsrs	r7, r2, #3
 80009a8:	e73d      	b.n	8000826 <__aeabi_fsub+0xf6>
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d017      	beq.n	80009de <__aeabi_fsub+0x2ae>
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fsub+0x284>
 80009b2:	e0af      	b.n	8000b14 <__aeabi_fsub+0x3e4>
 80009b4:	23ff      	movs	r3, #255	@ 0xff
 80009b6:	4665      	mov	r5, ip
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fsub+0x28e>
 80009bc:	e0ad      	b.n	8000b1a <__aeabi_fsub+0x3ea>
 80009be:	1e5e      	subs	r6, r3, #1
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fsub+0x296>
 80009c4:	e089      	b.n	8000ada <__aeabi_fsub+0x3aa>
 80009c6:	2bff      	cmp	r3, #255	@ 0xff
 80009c8:	d0c2      	beq.n	8000950 <__aeabi_fsub+0x220>
 80009ca:	2e1b      	cmp	r6, #27
 80009cc:	dc00      	bgt.n	80009d0 <__aeabi_fsub+0x2a0>
 80009ce:	e0ab      	b.n	8000b28 <__aeabi_fsub+0x3f8>
 80009d0:	1d4b      	adds	r3, r1, #5
 80009d2:	469c      	mov	ip, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	e721      	b.n	800081c <__aeabi_fsub+0xec>
 80009d8:	464b      	mov	r3, r9
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d170      	bne.n	8000ac0 <__aeabi_fsub+0x390>
 80009de:	22fe      	movs	r2, #254	@ 0xfe
 80009e0:	1c6b      	adds	r3, r5, #1
 80009e2:	421a      	tst	r2, r3
 80009e4:	d15e      	bne.n	8000aa4 <__aeabi_fsub+0x374>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_fsub+0x2bc>
 80009ea:	e0c3      	b.n	8000b74 <__aeabi_fsub+0x444>
 80009ec:	4663      	mov	r3, ip
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x2c4>
 80009f2:	e0d0      	b.n	8000b96 <__aeabi_fsub+0x466>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_fsub+0x2ca>
 80009f8:	e094      	b.n	8000b24 <__aeabi_fsub+0x3f4>
 80009fa:	000a      	movs	r2, r1
 80009fc:	4462      	add	r2, ip
 80009fe:	0153      	lsls	r3, r2, #5
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_fsub+0x2d4>
 8000a02:	e0d8      	b.n	8000bb6 <__aeabi_fsub+0x486>
 8000a04:	0192      	lsls	r2, r2, #6
 8000a06:	2001      	movs	r0, #1
 8000a08:	0a52      	lsrs	r2, r2, #9
 8000a0a:	e6ed      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000a0c:	0008      	movs	r0, r1
 8000a0e:	2220      	movs	r2, #32
 8000a10:	40d8      	lsrs	r0, r3
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	4099      	lsls	r1, r3
 8000a16:	000b      	movs	r3, r1
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	4193      	sbcs	r3, r2
 8000a1c:	4303      	orrs	r3, r0
 8000a1e:	449c      	add	ip, r3
 8000a20:	4663      	mov	r3, ip
 8000a22:	015b      	lsls	r3, r3, #5
 8000a24:	d589      	bpl.n	800093a <__aeabi_fsub+0x20a>
 8000a26:	3501      	adds	r5, #1
 8000a28:	2dff      	cmp	r5, #255	@ 0xff
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fsub+0x2fe>
 8000a2c:	e6da      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000a2e:	4662      	mov	r2, ip
 8000a30:	2301      	movs	r3, #1
 8000a32:	4919      	ldr	r1, [pc, #100]	@ (8000a98 <__aeabi_fsub+0x368>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	0852      	lsrs	r2, r2, #1
 8000a38:	400a      	ands	r2, r1
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	4694      	mov	ip, r2
 8000a40:	075b      	lsls	r3, r3, #29
 8000a42:	d004      	beq.n	8000a4e <__aeabi_fsub+0x31e>
 8000a44:	230f      	movs	r3, #15
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fsub+0x31e>
 8000a4c:	e6bf      	b.n	80007ce <__aeabi_fsub+0x9e>
 8000a4e:	4663      	mov	r3, ip
 8000a50:	015b      	lsls	r3, r3, #5
 8000a52:	d500      	bpl.n	8000a56 <__aeabi_fsub+0x326>
 8000a54:	e6c2      	b.n	80007dc <__aeabi_fsub+0xac>
 8000a56:	4663      	mov	r3, ip
 8000a58:	08df      	lsrs	r7, r3, #3
 8000a5a:	002b      	movs	r3, r5
 8000a5c:	e6e3      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000a5e:	1b53      	subs	r3, r2, r5
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_fsub+0x336>
 8000a64:	e6f4      	b.n	8000850 <__aeabi_fsub+0x120>
 8000a66:	2080      	movs	r0, #128	@ 0x80
 8000a68:	4664      	mov	r4, ip
 8000a6a:	04c0      	lsls	r0, r0, #19
 8000a6c:	4304      	orrs	r4, r0
 8000a6e:	46a4      	mov	ip, r4
 8000a70:	0034      	movs	r4, r6
 8000a72:	2001      	movs	r0, #1
 8000a74:	2b1b      	cmp	r3, #27
 8000a76:	dc09      	bgt.n	8000a8c <__aeabi_fsub+0x35c>
 8000a78:	2520      	movs	r5, #32
 8000a7a:	4660      	mov	r0, ip
 8000a7c:	40d8      	lsrs	r0, r3
 8000a7e:	1aeb      	subs	r3, r5, r3
 8000a80:	4665      	mov	r5, ip
 8000a82:	409d      	lsls	r5, r3
 8000a84:	002b      	movs	r3, r5
 8000a86:	1e5d      	subs	r5, r3, #1
 8000a88:	41ab      	sbcs	r3, r5
 8000a8a:	4318      	orrs	r0, r3
 8000a8c:	1a0b      	subs	r3, r1, r0
 8000a8e:	469c      	mov	ip, r3
 8000a90:	0015      	movs	r5, r2
 8000a92:	e680      	b.n	8000796 <__aeabi_fsub+0x66>
 8000a94:	fbffffff 	.word	0xfbffffff
 8000a98:	7dffffff 	.word	0x7dffffff
 8000a9c:	22fe      	movs	r2, #254	@ 0xfe
 8000a9e:	1c6b      	adds	r3, r5, #1
 8000aa0:	4213      	tst	r3, r2
 8000aa2:	d0a3      	beq.n	80009ec <__aeabi_fsub+0x2bc>
 8000aa4:	2bff      	cmp	r3, #255	@ 0xff
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x37a>
 8000aa8:	e69c      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000aaa:	4461      	add	r1, ip
 8000aac:	0849      	lsrs	r1, r1, #1
 8000aae:	074a      	lsls	r2, r1, #29
 8000ab0:	d049      	beq.n	8000b46 <__aeabi_fsub+0x416>
 8000ab2:	220f      	movs	r2, #15
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	2a04      	cmp	r2, #4
 8000ab8:	d045      	beq.n	8000b46 <__aeabi_fsub+0x416>
 8000aba:	1d0a      	adds	r2, r1, #4
 8000abc:	4694      	mov	ip, r2
 8000abe:	e6ad      	b.n	800081c <__aeabi_fsub+0xec>
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fsub+0x396>
 8000ac4:	e776      	b.n	80009b4 <__aeabi_fsub+0x284>
 8000ac6:	e68d      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000ac8:	0034      	movs	r4, r6
 8000aca:	20ff      	movs	r0, #255	@ 0xff
 8000acc:	2200      	movs	r2, #0
 8000ace:	e68b      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000ad0:	4663      	mov	r3, ip
 8000ad2:	2401      	movs	r4, #1
 8000ad4:	1acf      	subs	r7, r1, r3
 8000ad6:	4034      	ands	r4, r6
 8000ad8:	e664      	b.n	80007a4 <__aeabi_fsub+0x74>
 8000ada:	4461      	add	r1, ip
 8000adc:	014b      	lsls	r3, r1, #5
 8000ade:	d56d      	bpl.n	8000bbc <__aeabi_fsub+0x48c>
 8000ae0:	0848      	lsrs	r0, r1, #1
 8000ae2:	4944      	ldr	r1, [pc, #272]	@ (8000bf4 <__aeabi_fsub+0x4c4>)
 8000ae4:	4001      	ands	r1, r0
 8000ae6:	0743      	lsls	r3, r0, #29
 8000ae8:	d02c      	beq.n	8000b44 <__aeabi_fsub+0x414>
 8000aea:	230f      	movs	r3, #15
 8000aec:	4003      	ands	r3, r0
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	d028      	beq.n	8000b44 <__aeabi_fsub+0x414>
 8000af2:	1d0b      	adds	r3, r1, #4
 8000af4:	469c      	mov	ip, r3
 8000af6:	2302      	movs	r3, #2
 8000af8:	e690      	b.n	800081c <__aeabi_fsub+0xec>
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fsub+0x3d0>
 8000afe:	e72b      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	03db      	lsls	r3, r3, #15
 8000b04:	429f      	cmp	r7, r3
 8000b06:	d200      	bcs.n	8000b0a <__aeabi_fsub+0x3da>
 8000b08:	e726      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	d300      	bcc.n	8000b10 <__aeabi_fsub+0x3e0>
 8000b0e:	e723      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b10:	2401      	movs	r4, #1
 8000b12:	4034      	ands	r4, r6
 8000b14:	0007      	movs	r7, r0
 8000b16:	e71f      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b18:	0034      	movs	r4, r6
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	e67e      	b.n	800081c <__aeabi_fsub+0xec>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	08cf      	lsrs	r7, r1, #3
 8000b22:	e680      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b24:	2300      	movs	r3, #0
 8000b26:	e67e      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b28:	2020      	movs	r0, #32
 8000b2a:	4665      	mov	r5, ip
 8000b2c:	1b80      	subs	r0, r0, r6
 8000b2e:	4085      	lsls	r5, r0
 8000b30:	4663      	mov	r3, ip
 8000b32:	0028      	movs	r0, r5
 8000b34:	40f3      	lsrs	r3, r6
 8000b36:	1e45      	subs	r5, r0, #1
 8000b38:	41a8      	sbcs	r0, r5
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	469c      	mov	ip, r3
 8000b3e:	0015      	movs	r5, r2
 8000b40:	448c      	add	ip, r1
 8000b42:	e76d      	b.n	8000a20 <__aeabi_fsub+0x2f0>
 8000b44:	2302      	movs	r3, #2
 8000b46:	08cf      	lsrs	r7, r1, #3
 8000b48:	e66d      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b4a:	1b0f      	subs	r7, r1, r4
 8000b4c:	017b      	lsls	r3, r7, #5
 8000b4e:	d528      	bpl.n	8000ba2 <__aeabi_fsub+0x472>
 8000b50:	01bf      	lsls	r7, r7, #6
 8000b52:	09bf      	lsrs	r7, r7, #6
 8000b54:	0038      	movs	r0, r7
 8000b56:	f000 f8ef 	bl	8000d38 <__clzsi2>
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	3805      	subs	r0, #5
 8000b5e:	4083      	lsls	r3, r0
 8000b60:	0034      	movs	r4, r6
 8000b62:	2501      	movs	r5, #1
 8000b64:	e6ca      	b.n	80008fc <__aeabi_fsub+0x1cc>
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fsub+0x43c>
 8000b6a:	e6b5      	b.n	80008d8 <__aeabi_fsub+0x1a8>
 8000b6c:	2401      	movs	r4, #1
 8000b6e:	0007      	movs	r7, r0
 8000b70:	4034      	ands	r4, r6
 8000b72:	e658      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b74:	4663      	mov	r3, ip
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x44c>
 8000b7a:	e6e9      	b.n	8000950 <__aeabi_fsub+0x220>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fsub+0x452>
 8000b80:	e6ea      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	03db      	lsls	r3, r3, #15
 8000b86:	429f      	cmp	r7, r3
 8000b88:	d200      	bcs.n	8000b8c <__aeabi_fsub+0x45c>
 8000b8a:	e6e5      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b8c:	4298      	cmp	r0, r3
 8000b8e:	d300      	bcc.n	8000b92 <__aeabi_fsub+0x462>
 8000b90:	e6e2      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b92:	0007      	movs	r7, r0
 8000b94:	e6e0      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x46c>
 8000b9a:	e69e      	b.n	80008da <__aeabi_fsub+0x1aa>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	08cf      	lsrs	r7, r1, #3
 8000ba0:	e641      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000ba2:	0034      	movs	r4, r6
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	08ff      	lsrs	r7, r7, #3
 8000ba8:	e63d      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000baa:	2f00      	cmp	r7, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fsub+0x480>
 8000bae:	e693      	b.n	80008d8 <__aeabi_fsub+0x1a8>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	08ff      	lsrs	r7, r7, #3
 8000bb4:	e637      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	08d7      	lsrs	r7, r2, #3
 8000bba:	e634      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	08cf      	lsrs	r7, r1, #3
 8000bc0:	e631      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	000b      	movs	r3, r1
 8000bc6:	04d2      	lsls	r2, r2, #19
 8000bc8:	2001      	movs	r0, #1
 8000bca:	4013      	ands	r3, r2
 8000bcc:	4211      	tst	r1, r2
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_fsub+0x4a2>
 8000bd0:	e6ae      	b.n	8000930 <__aeabi_fsub+0x200>
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e627      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_fsub+0x4ac>
 8000bda:	e75f      	b.n	8000a9c <__aeabi_fsub+0x36c>
 8000bdc:	1b56      	subs	r6, r2, r5
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d101      	bne.n	8000be6 <__aeabi_fsub+0x4b6>
 8000be2:	0033      	movs	r3, r6
 8000be4:	e6e7      	b.n	80009b6 <__aeabi_fsub+0x286>
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	4660      	mov	r0, ip
 8000bea:	04db      	lsls	r3, r3, #19
 8000bec:	4318      	orrs	r0, r3
 8000bee:	4684      	mov	ip, r0
 8000bf0:	e6eb      	b.n	80009ca <__aeabi_fsub+0x29a>
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	7dffffff 	.word	0x7dffffff

08000bf8 <__aeabi_f2iz>:
 8000bf8:	0241      	lsls	r1, r0, #9
 8000bfa:	0042      	lsls	r2, r0, #1
 8000bfc:	0fc3      	lsrs	r3, r0, #31
 8000bfe:	0a49      	lsrs	r1, r1, #9
 8000c00:	2000      	movs	r0, #0
 8000c02:	0e12      	lsrs	r2, r2, #24
 8000c04:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c06:	dd03      	ble.n	8000c10 <__aeabi_f2iz+0x18>
 8000c08:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c0a:	dd02      	ble.n	8000c12 <__aeabi_f2iz+0x1a>
 8000c0c:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <__aeabi_f2iz+0x3c>)
 8000c0e:	1898      	adds	r0, r3, r2
 8000c10:	4770      	bx	lr
 8000c12:	2080      	movs	r0, #128	@ 0x80
 8000c14:	0400      	lsls	r0, r0, #16
 8000c16:	4301      	orrs	r1, r0
 8000c18:	2a95      	cmp	r2, #149	@ 0x95
 8000c1a:	dc07      	bgt.n	8000c2c <__aeabi_f2iz+0x34>
 8000c1c:	2096      	movs	r0, #150	@ 0x96
 8000c1e:	1a82      	subs	r2, r0, r2
 8000c20:	40d1      	lsrs	r1, r2
 8000c22:	4248      	negs	r0, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f3      	bne.n	8000c10 <__aeabi_f2iz+0x18>
 8000c28:	0008      	movs	r0, r1
 8000c2a:	e7f1      	b.n	8000c10 <__aeabi_f2iz+0x18>
 8000c2c:	3a96      	subs	r2, #150	@ 0x96
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	e7f7      	b.n	8000c22 <__aeabi_f2iz+0x2a>
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	7fffffff 	.word	0x7fffffff

08000c38 <__aeabi_ui2f>:
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	1e04      	subs	r4, r0, #0
 8000c3c:	d00d      	beq.n	8000c5a <__aeabi_ui2f+0x22>
 8000c3e:	f000 f87b 	bl	8000d38 <__clzsi2>
 8000c42:	239e      	movs	r3, #158	@ 0x9e
 8000c44:	1a1b      	subs	r3, r3, r0
 8000c46:	2b96      	cmp	r3, #150	@ 0x96
 8000c48:	dc0c      	bgt.n	8000c64 <__aeabi_ui2f+0x2c>
 8000c4a:	2808      	cmp	r0, #8
 8000c4c:	d034      	beq.n	8000cb8 <__aeabi_ui2f+0x80>
 8000c4e:	3808      	subs	r0, #8
 8000c50:	4084      	lsls	r4, r0
 8000c52:	0264      	lsls	r4, r4, #9
 8000c54:	0a64      	lsrs	r4, r4, #9
 8000c56:	b2d8      	uxtb	r0, r3
 8000c58:	e001      	b.n	8000c5e <__aeabi_ui2f+0x26>
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	05c0      	lsls	r0, r0, #23
 8000c60:	4320      	orrs	r0, r4
 8000c62:	bd10      	pop	{r4, pc}
 8000c64:	2b99      	cmp	r3, #153	@ 0x99
 8000c66:	dc13      	bgt.n	8000c90 <__aeabi_ui2f+0x58>
 8000c68:	1f42      	subs	r2, r0, #5
 8000c6a:	4094      	lsls	r4, r2
 8000c6c:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <__aeabi_ui2f+0x88>)
 8000c6e:	4022      	ands	r2, r4
 8000c70:	0761      	lsls	r1, r4, #29
 8000c72:	d01c      	beq.n	8000cae <__aeabi_ui2f+0x76>
 8000c74:	210f      	movs	r1, #15
 8000c76:	4021      	ands	r1, r4
 8000c78:	2904      	cmp	r1, #4
 8000c7a:	d018      	beq.n	8000cae <__aeabi_ui2f+0x76>
 8000c7c:	3204      	adds	r2, #4
 8000c7e:	08d4      	lsrs	r4, r2, #3
 8000c80:	0152      	lsls	r2, r2, #5
 8000c82:	d515      	bpl.n	8000cb0 <__aeabi_ui2f+0x78>
 8000c84:	239f      	movs	r3, #159	@ 0x9f
 8000c86:	0264      	lsls	r4, r4, #9
 8000c88:	1a18      	subs	r0, r3, r0
 8000c8a:	0a64      	lsrs	r4, r4, #9
 8000c8c:	b2c0      	uxtb	r0, r0
 8000c8e:	e7e6      	b.n	8000c5e <__aeabi_ui2f+0x26>
 8000c90:	0002      	movs	r2, r0
 8000c92:	0021      	movs	r1, r4
 8000c94:	321b      	adds	r2, #27
 8000c96:	4091      	lsls	r1, r2
 8000c98:	000a      	movs	r2, r1
 8000c9a:	1e51      	subs	r1, r2, #1
 8000c9c:	418a      	sbcs	r2, r1
 8000c9e:	2105      	movs	r1, #5
 8000ca0:	1a09      	subs	r1, r1, r0
 8000ca2:	40cc      	lsrs	r4, r1
 8000ca4:	4314      	orrs	r4, r2
 8000ca6:	4a06      	ldr	r2, [pc, #24]	@ (8000cc0 <__aeabi_ui2f+0x88>)
 8000ca8:	4022      	ands	r2, r4
 8000caa:	0761      	lsls	r1, r4, #29
 8000cac:	d1e2      	bne.n	8000c74 <__aeabi_ui2f+0x3c>
 8000cae:	08d4      	lsrs	r4, r2, #3
 8000cb0:	0264      	lsls	r4, r4, #9
 8000cb2:	0a64      	lsrs	r4, r4, #9
 8000cb4:	b2d8      	uxtb	r0, r3
 8000cb6:	e7d2      	b.n	8000c5e <__aeabi_ui2f+0x26>
 8000cb8:	0264      	lsls	r4, r4, #9
 8000cba:	0a64      	lsrs	r4, r4, #9
 8000cbc:	308e      	adds	r0, #142	@ 0x8e
 8000cbe:	e7ce      	b.n	8000c5e <__aeabi_ui2f+0x26>
 8000cc0:	fbffffff 	.word	0xfbffffff

08000cc4 <__aeabi_cfrcmple>:
 8000cc4:	4684      	mov	ip, r0
 8000cc6:	0008      	movs	r0, r1
 8000cc8:	4661      	mov	r1, ip
 8000cca:	e7ff      	b.n	8000ccc <__aeabi_cfcmpeq>

08000ccc <__aeabi_cfcmpeq>:
 8000ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000cce:	f000 f8c1 	bl	8000e54 <__lesf2>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d401      	bmi.n	8000cda <__aeabi_cfcmpeq+0xe>
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	42c8      	cmn	r0, r1
 8000cda:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000cdc <__aeabi_fcmpeq>:
 8000cdc:	b510      	push	{r4, lr}
 8000cde:	f000 f849 	bl	8000d74 <__eqsf2>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	3001      	adds	r0, #1
 8000ce6:	bd10      	pop	{r4, pc}

08000ce8 <__aeabi_fcmplt>:
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	f000 f8b3 	bl	8000e54 <__lesf2>
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	db01      	blt.n	8000cf6 <__aeabi_fcmplt+0xe>
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	bd10      	pop	{r4, pc}
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	bd10      	pop	{r4, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)

08000cfc <__aeabi_fcmple>:
 8000cfc:	b510      	push	{r4, lr}
 8000cfe:	f000 f8a9 	bl	8000e54 <__lesf2>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	dd01      	ble.n	8000d0a <__aeabi_fcmple+0xe>
 8000d06:	2000      	movs	r0, #0
 8000d08:	bd10      	pop	{r4, pc}
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	bd10      	pop	{r4, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)

08000d10 <__aeabi_fcmpgt>:
 8000d10:	b510      	push	{r4, lr}
 8000d12:	f000 f857 	bl	8000dc4 <__gesf2>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	dc01      	bgt.n	8000d1e <__aeabi_fcmpgt+0xe>
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	bd10      	pop	{r4, pc}
 8000d1e:	2001      	movs	r0, #1
 8000d20:	bd10      	pop	{r4, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)

08000d24 <__aeabi_fcmpge>:
 8000d24:	b510      	push	{r4, lr}
 8000d26:	f000 f84d 	bl	8000dc4 <__gesf2>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	da01      	bge.n	8000d32 <__aeabi_fcmpge+0xe>
 8000d2e:	2000      	movs	r0, #0
 8000d30:	bd10      	pop	{r4, pc}
 8000d32:	2001      	movs	r0, #1
 8000d34:	bd10      	pop	{r4, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)

08000d38 <__clzsi2>:
 8000d38:	211c      	movs	r1, #28
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	041b      	lsls	r3, r3, #16
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d301      	bcc.n	8000d46 <__clzsi2+0xe>
 8000d42:	0c00      	lsrs	r0, r0, #16
 8000d44:	3910      	subs	r1, #16
 8000d46:	0a1b      	lsrs	r3, r3, #8
 8000d48:	4298      	cmp	r0, r3
 8000d4a:	d301      	bcc.n	8000d50 <__clzsi2+0x18>
 8000d4c:	0a00      	lsrs	r0, r0, #8
 8000d4e:	3908      	subs	r1, #8
 8000d50:	091b      	lsrs	r3, r3, #4
 8000d52:	4298      	cmp	r0, r3
 8000d54:	d301      	bcc.n	8000d5a <__clzsi2+0x22>
 8000d56:	0900      	lsrs	r0, r0, #4
 8000d58:	3904      	subs	r1, #4
 8000d5a:	a202      	add	r2, pc, #8	@ (adr r2, 8000d64 <__clzsi2+0x2c>)
 8000d5c:	5c10      	ldrb	r0, [r2, r0]
 8000d5e:	1840      	adds	r0, r0, r1
 8000d60:	4770      	bx	lr
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	02020304 	.word	0x02020304
 8000d68:	01010101 	.word	0x01010101
	...

08000d74 <__eqsf2>:
 8000d74:	b570      	push	{r4, r5, r6, lr}
 8000d76:	0042      	lsls	r2, r0, #1
 8000d78:	024e      	lsls	r6, r1, #9
 8000d7a:	004c      	lsls	r4, r1, #1
 8000d7c:	0245      	lsls	r5, r0, #9
 8000d7e:	0a6d      	lsrs	r5, r5, #9
 8000d80:	0e12      	lsrs	r2, r2, #24
 8000d82:	0fc3      	lsrs	r3, r0, #31
 8000d84:	0a76      	lsrs	r6, r6, #9
 8000d86:	0e24      	lsrs	r4, r4, #24
 8000d88:	0fc9      	lsrs	r1, r1, #31
 8000d8a:	2aff      	cmp	r2, #255	@ 0xff
 8000d8c:	d010      	beq.n	8000db0 <__eqsf2+0x3c>
 8000d8e:	2cff      	cmp	r4, #255	@ 0xff
 8000d90:	d00c      	beq.n	8000dac <__eqsf2+0x38>
 8000d92:	2001      	movs	r0, #1
 8000d94:	42a2      	cmp	r2, r4
 8000d96:	d10a      	bne.n	8000dae <__eqsf2+0x3a>
 8000d98:	42b5      	cmp	r5, r6
 8000d9a:	d108      	bne.n	8000dae <__eqsf2+0x3a>
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d00f      	beq.n	8000dc0 <__eqsf2+0x4c>
 8000da0:	2a00      	cmp	r2, #0
 8000da2:	d104      	bne.n	8000dae <__eqsf2+0x3a>
 8000da4:	0028      	movs	r0, r5
 8000da6:	1e43      	subs	r3, r0, #1
 8000da8:	4198      	sbcs	r0, r3
 8000daa:	e000      	b.n	8000dae <__eqsf2+0x3a>
 8000dac:	2001      	movs	r0, #1
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	2001      	movs	r0, #1
 8000db2:	2cff      	cmp	r4, #255	@ 0xff
 8000db4:	d1fb      	bne.n	8000dae <__eqsf2+0x3a>
 8000db6:	4335      	orrs	r5, r6
 8000db8:	d1f9      	bne.n	8000dae <__eqsf2+0x3a>
 8000dba:	404b      	eors	r3, r1
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	e7f6      	b.n	8000dae <__eqsf2+0x3a>
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	e7f4      	b.n	8000dae <__eqsf2+0x3a>

08000dc4 <__gesf2>:
 8000dc4:	b530      	push	{r4, r5, lr}
 8000dc6:	0042      	lsls	r2, r0, #1
 8000dc8:	0244      	lsls	r4, r0, #9
 8000dca:	024d      	lsls	r5, r1, #9
 8000dcc:	0fc3      	lsrs	r3, r0, #31
 8000dce:	0048      	lsls	r0, r1, #1
 8000dd0:	0a64      	lsrs	r4, r4, #9
 8000dd2:	0e12      	lsrs	r2, r2, #24
 8000dd4:	0a6d      	lsrs	r5, r5, #9
 8000dd6:	0e00      	lsrs	r0, r0, #24
 8000dd8:	0fc9      	lsrs	r1, r1, #31
 8000dda:	2aff      	cmp	r2, #255	@ 0xff
 8000ddc:	d018      	beq.n	8000e10 <__gesf2+0x4c>
 8000dde:	28ff      	cmp	r0, #255	@ 0xff
 8000de0:	d00a      	beq.n	8000df8 <__gesf2+0x34>
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d11e      	bne.n	8000e24 <__gesf2+0x60>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d10a      	bne.n	8000e00 <__gesf2+0x3c>
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d029      	beq.n	8000e42 <__gesf2+0x7e>
 8000dee:	2c00      	cmp	r4, #0
 8000df0:	d12d      	bne.n	8000e4e <__gesf2+0x8a>
 8000df2:	0048      	lsls	r0, r1, #1
 8000df4:	3801      	subs	r0, #1
 8000df6:	bd30      	pop	{r4, r5, pc}
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d125      	bne.n	8000e48 <__gesf2+0x84>
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	d101      	bne.n	8000e04 <__gesf2+0x40>
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	d0f6      	beq.n	8000df2 <__gesf2+0x2e>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d019      	beq.n	8000e3c <__gesf2+0x78>
 8000e08:	2001      	movs	r0, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	4318      	orrs	r0, r3
 8000e0e:	e7f2      	b.n	8000df6 <__gesf2+0x32>
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	d119      	bne.n	8000e48 <__gesf2+0x84>
 8000e14:	28ff      	cmp	r0, #255	@ 0xff
 8000e16:	d1f7      	bne.n	8000e08 <__gesf2+0x44>
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d115      	bne.n	8000e48 <__gesf2+0x84>
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d1f2      	bne.n	8000e08 <__gesf2+0x44>
 8000e22:	e7e8      	b.n	8000df6 <__gesf2+0x32>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d0ef      	beq.n	8000e08 <__gesf2+0x44>
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d1ed      	bne.n	8000e08 <__gesf2+0x44>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	dceb      	bgt.n	8000e08 <__gesf2+0x44>
 8000e30:	db04      	blt.n	8000e3c <__gesf2+0x78>
 8000e32:	42ac      	cmp	r4, r5
 8000e34:	d8e8      	bhi.n	8000e08 <__gesf2+0x44>
 8000e36:	2000      	movs	r0, #0
 8000e38:	42ac      	cmp	r4, r5
 8000e3a:	d2dc      	bcs.n	8000df6 <__gesf2+0x32>
 8000e3c:	0058      	lsls	r0, r3, #1
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7d9      	b.n	8000df6 <__gesf2+0x32>
 8000e42:	2c00      	cmp	r4, #0
 8000e44:	d0d7      	beq.n	8000df6 <__gesf2+0x32>
 8000e46:	e7df      	b.n	8000e08 <__gesf2+0x44>
 8000e48:	2002      	movs	r0, #2
 8000e4a:	4240      	negs	r0, r0
 8000e4c:	e7d3      	b.n	8000df6 <__gesf2+0x32>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d1da      	bne.n	8000e08 <__gesf2+0x44>
 8000e52:	e7ee      	b.n	8000e32 <__gesf2+0x6e>

08000e54 <__lesf2>:
 8000e54:	b530      	push	{r4, r5, lr}
 8000e56:	0042      	lsls	r2, r0, #1
 8000e58:	0244      	lsls	r4, r0, #9
 8000e5a:	024d      	lsls	r5, r1, #9
 8000e5c:	0fc3      	lsrs	r3, r0, #31
 8000e5e:	0048      	lsls	r0, r1, #1
 8000e60:	0a64      	lsrs	r4, r4, #9
 8000e62:	0e12      	lsrs	r2, r2, #24
 8000e64:	0a6d      	lsrs	r5, r5, #9
 8000e66:	0e00      	lsrs	r0, r0, #24
 8000e68:	0fc9      	lsrs	r1, r1, #31
 8000e6a:	2aff      	cmp	r2, #255	@ 0xff
 8000e6c:	d017      	beq.n	8000e9e <__lesf2+0x4a>
 8000e6e:	28ff      	cmp	r0, #255	@ 0xff
 8000e70:	d00a      	beq.n	8000e88 <__lesf2+0x34>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d11b      	bne.n	8000eae <__lesf2+0x5a>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d10a      	bne.n	8000e90 <__lesf2+0x3c>
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d01d      	beq.n	8000eba <__lesf2+0x66>
 8000e7e:	2c00      	cmp	r4, #0
 8000e80:	d12d      	bne.n	8000ede <__lesf2+0x8a>
 8000e82:	0048      	lsls	r0, r1, #1
 8000e84:	3801      	subs	r0, #1
 8000e86:	e011      	b.n	8000eac <__lesf2+0x58>
 8000e88:	2d00      	cmp	r5, #0
 8000e8a:	d10e      	bne.n	8000eaa <__lesf2+0x56>
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	d101      	bne.n	8000e94 <__lesf2+0x40>
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d0f6      	beq.n	8000e82 <__lesf2+0x2e>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d10c      	bne.n	8000eb2 <__lesf2+0x5e>
 8000e98:	0058      	lsls	r0, r3, #1
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e006      	b.n	8000eac <__lesf2+0x58>
 8000e9e:	2c00      	cmp	r4, #0
 8000ea0:	d103      	bne.n	8000eaa <__lesf2+0x56>
 8000ea2:	28ff      	cmp	r0, #255	@ 0xff
 8000ea4:	d105      	bne.n	8000eb2 <__lesf2+0x5e>
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d015      	beq.n	8000ed6 <__lesf2+0x82>
 8000eaa:	2002      	movs	r0, #2
 8000eac:	bd30      	pop	{r4, r5, pc}
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d106      	bne.n	8000ec0 <__lesf2+0x6c>
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	4318      	orrs	r0, r3
 8000eb8:	e7f8      	b.n	8000eac <__lesf2+0x58>
 8000eba:	2c00      	cmp	r4, #0
 8000ebc:	d0f6      	beq.n	8000eac <__lesf2+0x58>
 8000ebe:	e7f8      	b.n	8000eb2 <__lesf2+0x5e>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d1f6      	bne.n	8000eb2 <__lesf2+0x5e>
 8000ec4:	4282      	cmp	r2, r0
 8000ec6:	dcf4      	bgt.n	8000eb2 <__lesf2+0x5e>
 8000ec8:	dbe6      	blt.n	8000e98 <__lesf2+0x44>
 8000eca:	42ac      	cmp	r4, r5
 8000ecc:	d8f1      	bhi.n	8000eb2 <__lesf2+0x5e>
 8000ece:	2000      	movs	r0, #0
 8000ed0:	42ac      	cmp	r4, r5
 8000ed2:	d2eb      	bcs.n	8000eac <__lesf2+0x58>
 8000ed4:	e7e0      	b.n	8000e98 <__lesf2+0x44>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d1ea      	bne.n	8000eb2 <__lesf2+0x5e>
 8000edc:	e7e6      	b.n	8000eac <__lesf2+0x58>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d1e7      	bne.n	8000eb2 <__lesf2+0x5e>
 8000ee2:	e7f2      	b.n	8000eca <__lesf2+0x76>

08000ee4 <adc_max_count>:

/**
 * @brief Return max ADC count based on configured resolution.
 */
static uint32_t adc_max_count(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    if (s_adc == NULL) {
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <adc_max_count+0x3c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <adc_max_count+0x10>
        return 4095u;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <adc_max_count+0x40>)
 8000ef2:	e011      	b.n	8000f18 <adc_max_count+0x34>
    }

    /* Map HAL enum to numeric maximum. */
    switch (s_adc->Init.Resolution) {
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <adc_max_count+0x3c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b18      	cmp	r3, #24
 8000efc:	d005      	beq.n	8000f0a <adc_max_count+0x26>
 8000efe:	d80a      	bhi.n	8000f16 <adc_max_count+0x32>
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d006      	beq.n	8000f12 <adc_max_count+0x2e>
 8000f04:	2b10      	cmp	r3, #16
 8000f06:	d002      	beq.n	8000f0e <adc_max_count+0x2a>
 8000f08:	e005      	b.n	8000f16 <adc_max_count+0x32>
    case ADC_RESOLUTION_6B:  return 63u;
 8000f0a:	233f      	movs	r3, #63	@ 0x3f
 8000f0c:	e004      	b.n	8000f18 <adc_max_count+0x34>
    case ADC_RESOLUTION_8B:  return 255u;
 8000f0e:	23ff      	movs	r3, #255	@ 0xff
 8000f10:	e002      	b.n	8000f18 <adc_max_count+0x34>
    case ADC_RESOLUTION_10B: return 1023u;
 8000f12:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <adc_max_count+0x44>)
 8000f14:	e000      	b.n	8000f18 <adc_max_count+0x34>
    case ADC_RESOLUTION_12B:
    default:                 return 4095u;
 8000f16:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <adc_max_count+0x40>)
    }
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	20000040 	.word	0x20000040
 8000f24:	00000fff 	.word	0x00000fff
 8000f28:	000003ff 	.word	0x000003ff

08000f2c <adc_select_channel>:

/**
 * @brief Configure the ADC to convert the given HAL channel in single mode.
 */
static HAL_StatusTypeDef adc_select_channel(uint32_t hal_channel)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef s_config;
    memset(&s_config, 0, sizeof(s_config));
 8000f34:	240c      	movs	r4, #12
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	220c      	movs	r2, #12
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f002 ff01 	bl	8003d44 <memset>

    s_config.Channel      = hal_channel;
 8000f42:	0021      	movs	r1, r4
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
    s_config.Rank         = ADC_RANK_CHANNEL_NUMBER; /* F0 uses channel number as rank in some HAL versions */
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	0152      	lsls	r2, r2, #5
 8000f50:	605a      	str	r2, [r3, #4]
    s_config.SamplingTime = ADC_MODULE_SAMPLETIME;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2207      	movs	r2, #7
 8000f56:	609a      	str	r2, [r3, #8]
    /* Some HAL versions require ADC_REGULAR_RANK_1; fallback if available. */
#ifdef ADC_REGULAR_RANK_1
    s_config.Rank = ADC_REGULAR_RANK_1;
#endif

    return HAL_ADC_ConfigChannel(s_adc, &s_config);
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <adc_select_channel+0x44>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	187a      	adds	r2, r7, r1
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 fa2d 	bl	80023c0 <HAL_ADC_ConfigChannel>
 8000f66:	0003      	movs	r3, r0
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b007      	add	sp, #28
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	20000040 	.word	0x20000040

08000f74 <start_next_enabled_conversion>:
 * @brief Start conversion for the next enabled channel after 'start_index'.
 *        If start_index is 0xFF, begin from channel 0.
 * @return HAL_OK if a conversion was started, HAL_BUSY if none enabled, or error.
 */
static HAL_StatusTypeDef start_next_enabled_conversion(uint8_t start_index)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	701a      	strb	r2, [r3, #0]
    if (s_adc == NULL) {
 8000f80:	4b39      	ldr	r3, [pc, #228]	@ (8001068 <start_next_enabled_conversion+0xf4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <start_next_enabled_conversion+0x18>
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e068      	b.n	800105e <start_next_enabled_conversion+0xea>
    }

    uint8_t idx = (start_index == 0xFFu) ? 0u : (uint8_t)(start_index + 1u);
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2bff      	cmp	r3, #255	@ 0xff
 8000f92:	d004      	beq.n	8000f9e <start_next_enabled_conversion+0x2a>
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	e000      	b.n	8000fa0 <start_next_enabled_conversion+0x2c>
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	230e      	movs	r3, #14
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	701a      	strb	r2, [r3, #0]

    /* Search across all channels once. */
    for (uint8_t n = 0u; n < ADC_MODULE_CHANNEL_COUNT; n++) {
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	e04a      	b.n	8001046 <start_next_enabled_conversion+0xd2>
        uint8_t ch = (uint8_t)((idx + n) % ADC_MODULE_CHANNEL_COUNT);
 8000fb0:	230e      	movs	r3, #14
 8000fb2:	18fa      	adds	r2, r7, r3
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	7812      	ldrb	r2, [r2, #0]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	18d3      	adds	r3, r2, r3
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	200d      	movs	r0, #13
 8000fc2:	183b      	adds	r3, r7, r0
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
        if ((s_enable_mask & (1u << ch)) == 0u) {
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <start_next_enabled_conversion+0xf8>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	001a      	movs	r2, r3
 8000fd0:	0001      	movs	r1, r0
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	40da      	lsrs	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d02b      	beq.n	8001038 <start_next_enabled_conversion+0xc4>
            continue;
        }

        HAL_StatusTypeDef st = adc_select_channel(s_hal_channel_map[ch]);
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <start_next_enabled_conversion+0xfc>)
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	58d3      	ldr	r3, [r2, r3]
 8000fea:	250c      	movs	r5, #12
 8000fec:	197c      	adds	r4, r7, r5
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff ff9c 	bl	8000f2c <adc_select_channel>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	7023      	strb	r3, [r4, #0]
        if (st != HAL_OK) {
 8000ff8:	197b      	adds	r3, r7, r5
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <start_next_enabled_conversion+0x92>
            return st;
 8001000:	197b      	adds	r3, r7, r5
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	e02b      	b.n	800105e <start_next_enabled_conversion+0xea>
        }

        s_active_channel = ch;
 8001006:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <start_next_enabled_conversion+0x100>)
 8001008:	220d      	movs	r2, #13
 800100a:	18ba      	adds	r2, r7, r2
 800100c:	7812      	ldrb	r2, [r2, #0]
 800100e:	701a      	strb	r2, [r3, #0]

        st = HAL_ADC_Start(s_adc);
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <start_next_enabled_conversion+0xf4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	250c      	movs	r5, #12
 8001016:	197c      	adds	r4, r7, r5
 8001018:	0018      	movs	r0, r3
 800101a:	f001 f899 	bl	8002150 <HAL_ADC_Start>
 800101e:	0003      	movs	r3, r0
 8001020:	7023      	strb	r3, [r4, #0]
        if (st == HAL_OK) {
 8001022:	197b      	adds	r3, r7, r5
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <start_next_enabled_conversion+0xbc>
            s_conv_in_progress = 1u;
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <start_next_enabled_conversion+0x104>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
        }
        return st;
 8001030:	230c      	movs	r3, #12
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	e012      	b.n	800105e <start_next_enabled_conversion+0xea>
            continue;
 8001038:	46c0      	nop			@ (mov r8, r8)
    for (uint8_t n = 0u; n < ADC_MODULE_CHANNEL_COUNT; n++) {
 800103a:	210f      	movs	r1, #15
 800103c:	187b      	adds	r3, r7, r1
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	187b      	adds	r3, r7, r1
 8001042:	3201      	adds	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	230f      	movs	r3, #15
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b07      	cmp	r3, #7
 800104e:	d9af      	bls.n	8000fb0 <start_next_enabled_conversion+0x3c>
    }

    /* No channel enabled. */
    s_active_channel   = 0xFFu;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <start_next_enabled_conversion+0x100>)
 8001052:	22ff      	movs	r2, #255	@ 0xff
 8001054:	701a      	strb	r2, [r3, #0]
    s_conv_in_progress = 0u;
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <start_next_enabled_conversion+0x104>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
    return HAL_BUSY;
 800105c:	2302      	movs	r3, #2
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b004      	add	sp, #16
 8001064:	bdb0      	pop	{r4, r5, r7, pc}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	20000040 	.word	0x20000040
 800106c:	20000044 	.word	0x20000044
 8001070:	08003e30 	.word	0x08003e30
 8001074:	2000000c 	.word	0x2000000c
 8001078:	200000bd 	.word	0x200000bd

0800107c <service_conversion_state>:

/**
 * @brief Finish an in-progress conversion if ready, store results, and advance.
 */
static void service_conversion_state(void)
{
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
    if (s_conv_in_progress == 0u || s_adc == NULL) {
 8001082:	4b3d      	ldr	r3, [pc, #244]	@ (8001178 <service_conversion_state+0xfc>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d071      	beq.n	800116e <service_conversion_state+0xf2>
 800108a:	4b3c      	ldr	r3, [pc, #240]	@ (800117c <service_conversion_state+0x100>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d06d      	beq.n	800116e <service_conversion_state+0xf2>
        return;
    }

    /* Zero-timeout poll to avoid blocking. */
    if (HAL_ADC_PollForConversion(s_adc, 0u) == HAL_OK) {
 8001092:	4b3a      	ldr	r3, [pc, #232]	@ (800117c <service_conversion_state+0x100>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2100      	movs	r1, #0
 8001098:	0018      	movs	r0, r3
 800109a:	f001 f8ed 	bl	8002278 <HAL_ADC_PollForConversion>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d166      	bne.n	8001170 <service_conversion_state+0xf4>
        uint32_t raw = HAL_ADC_GetValue(s_adc);
 80010a2:	4b36      	ldr	r3, [pc, #216]	@ (800117c <service_conversion_state+0x100>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	0018      	movs	r0, r3
 80010a8:	f001 f97e 	bl	80023a8 <HAL_ADC_GetValue>
 80010ac:	0003      	movs	r3, r0
 80010ae:	60fb      	str	r3, [r7, #12]
        (void)HAL_ADC_Stop(s_adc);  /* Stop single conversion */
 80010b0:	4b32      	ldr	r3, [pc, #200]	@ (800117c <service_conversion_state+0x100>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f001 f89f 	bl	80021f8 <HAL_ADC_Stop>

        uint8_t ch = s_active_channel;
 80010ba:	250b      	movs	r5, #11
 80010bc:	197b      	adds	r3, r7, r5
 80010be:	4a30      	ldr	r2, [pc, #192]	@ (8001180 <service_conversion_state+0x104>)
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	701a      	strb	r2, [r3, #0]
        if (ch < ADC_MODULE_CHANNEL_COUNT) {
 80010c4:	197b      	adds	r3, r7, r5
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b07      	cmp	r3, #7
 80010ca:	d83e      	bhi.n	800114a <service_conversion_state+0xce>
            s_raw[ch] = (uint16_t)(raw & 0xFFFFu);
 80010cc:	197b      	adds	r3, r7, r5
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	b299      	uxth	r1, r3
 80010d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <service_conversion_state+0x108>)
 80010d6:	0052      	lsls	r2, r2, #1
 80010d8:	52d1      	strh	r1, [r2, r3]

            /* Convert to pin voltage in volts. */
            float pin_v = ((float)raw * (float)s_vref_mv) / ((float)adc_max_count() * 1000.0f);
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f7ff fdac 	bl	8000c38 <__aeabi_ui2f>
 80010e0:	1c04      	adds	r4, r0, #0
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <service_conversion_state+0x10c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fda6 	bl	8000c38 <__aeabi_ui2f>
 80010ec:	1c03      	adds	r3, r0, #0
 80010ee:	1c19      	adds	r1, r3, #0
 80010f0:	1c20      	adds	r0, r4, #0
 80010f2:	f7ff f9c3 	bl	800047c <__aeabi_fmul>
 80010f6:	1c03      	adds	r3, r0, #0
 80010f8:	1c1c      	adds	r4, r3, #0
 80010fa:	f7ff fef3 	bl	8000ee4 <adc_max_count>
 80010fe:	0003      	movs	r3, r0
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff fd99 	bl	8000c38 <__aeabi_ui2f>
 8001106:	1c03      	adds	r3, r0, #0
 8001108:	4920      	ldr	r1, [pc, #128]	@ (800118c <service_conversion_state+0x110>)
 800110a:	1c18      	adds	r0, r3, #0
 800110c:	f7ff f9b6 	bl	800047c <__aeabi_fmul>
 8001110:	1c03      	adds	r3, r0, #0
 8001112:	1c19      	adds	r1, r3, #0
 8001114:	1c20      	adds	r0, r4, #0
 8001116:	f7ff f89b 	bl	8000250 <__aeabi_fdiv>
 800111a:	1c03      	adds	r3, r0, #0
 800111c:	607b      	str	r3, [r7, #4]
            s_pin_v[ch]    = pin_v;
 800111e:	197b      	adds	r3, r7, r5
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <service_conversion_state+0x114>)
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	50d1      	str	r1, [r2, r3]
            s_scaled_v[ch] = pin_v * s_scale_gain[ch];
 800112a:	197b      	adds	r3, r7, r5
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <service_conversion_state+0x118>)
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	58d2      	ldr	r2, [r2, r3]
 8001134:	197b      	adds	r3, r7, r5
 8001136:	781c      	ldrb	r4, [r3, #0]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	1c10      	adds	r0, r2, #0
 800113c:	f7ff f99e 	bl	800047c <__aeabi_fmul>
 8001140:	1c03      	adds	r3, r0, #0
 8001142:	1c19      	adds	r1, r3, #0
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <service_conversion_state+0x11c>)
 8001146:	00a2      	lsls	r2, r4, #2
 8001148:	50d1      	str	r1, [r2, r3]
        }

        s_conv_in_progress = 0u;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <service_conversion_state+0xfc>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]

        /* Start the next enabled channel in this cycle, if any. */
        if (start_next_enabled_conversion(ch) != HAL_OK) {
 8001150:	230b      	movs	r3, #11
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ff0c 	bl	8000f74 <start_next_enabled_conversion>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d007      	beq.n	8001170 <service_conversion_state+0xf4>
            /* No more channels or error; end of scan for this cycle. */
            s_scan_active = 0u;
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <service_conversion_state+0x120>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
            s_active_channel = 0xFFu;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <service_conversion_state+0x104>)
 8001168:	22ff      	movs	r2, #255	@ 0xff
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e000      	b.n	8001170 <service_conversion_state+0xf4>
        return;
 800116e:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8001170:	46bd      	mov	sp, r7
 8001172:	b004      	add	sp, #16
 8001174:	bdb0      	pop	{r4, r5, r7, pc}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	200000bd 	.word	0x200000bd
 800117c:	20000040 	.word	0x20000040
 8001180:	2000000c 	.word	0x2000000c
 8001184:	20000048 	.word	0x20000048
 8001188:	20000000 	.word	0x20000000
 800118c:	447a0000 	.word	0x447a0000
 8001190:	20000058 	.word	0x20000058
 8001194:	20000098 	.word	0x20000098
 8001198:	20000078 	.word	0x20000078
 800119c:	200000bc 	.word	0x200000bc

080011a0 <recompute_cycle_interval>:

/**
 * @brief Recompute cycle interval (ms) from sample rate.
 */
static void recompute_cycle_interval(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
    uint16_t hz = (s_sample_hz == 0u) ? 1u : s_sample_hz;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <recompute_cycle_interval+0x44>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <recompute_cycle_interval+0x14>
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <recompute_cycle_interval+0x44>)
 80011b0:	881a      	ldrh	r2, [r3, #0]
 80011b2:	e000      	b.n	80011b6 <recompute_cycle_interval+0x16>
 80011b4:	2201      	movs	r2, #1
 80011b6:	1dbb      	adds	r3, r7, #6
 80011b8:	801a      	strh	r2, [r3, #0]
    /* Round to nearest integer ms to keep timing stable. */
    s_cycle_interval_ms = (uint32_t)((1000u + (hz / 2u)) / hz);
 80011ba:	1dbb      	adds	r3, r7, #6
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	085b      	lsrs	r3, r3, #1
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	22fa      	movs	r2, #250	@ 0xfa
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	189a      	adds	r2, r3, r2
 80011c8:	1dbb      	adds	r3, r7, #6
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	0019      	movs	r1, r3
 80011ce:	0010      	movs	r0, r2
 80011d0:	f7fe ff9a 	bl	8000108 <__udivsi3>
 80011d4:	0003      	movs	r3, r0
 80011d6:	001a      	movs	r2, r3
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <recompute_cycle_interval+0x48>)
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000004 	.word	0x20000004
 80011e8:	20000008 	.word	0x20000008

080011ec <ADC_Module_Init>:

/* ===== Public API ===== */

HAL_StatusTypeDef ADC_Module_Init(ADC_HandleTypeDef *hadc, uint32_t vref_mv, uint16_t sample_hz)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	1dbb      	adds	r3, r7, #6
 80011f8:	801a      	strh	r2, [r3, #0]
    if (hadc == NULL) {
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <ADC_Module_Init+0x18>
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e051      	b.n	80012a8 <ADC_Module_Init+0xbc>
    }

    s_adc = hadc;
 8001204:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <ADC_Module_Init+0xc4>)
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	601a      	str	r2, [r3, #0]
    s_vref_mv = (vref_mv == 0u) ? 3300u : vref_mv;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <ADC_Module_Init+0x28>
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	e000      	b.n	8001216 <ADC_Module_Init+0x2a>
 8001214:	4a27      	ldr	r2, [pc, #156]	@ (80012b4 <ADC_Module_Init+0xc8>)
 8001216:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <ADC_Module_Init+0xcc>)
 8001218:	601a      	str	r2, [r3, #0]

    /* Default all disabled, unity scale, zero readings. */
    s_enable_mask = 0u;
 800121a:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <ADC_Module_Init+0xd0>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0u; i < ADC_MODULE_CHANNEL_COUNT; i++) {
 8001220:	2317      	movs	r3, #23
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	e01e      	b.n	8001268 <ADC_Module_Init+0x7c>
        s_scale_gain[i] = 1.0f;
 800122a:	2017      	movs	r0, #23
 800122c:	183b      	adds	r3, r7, r0
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <ADC_Module_Init+0xd4>)
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	21fe      	movs	r1, #254	@ 0xfe
 8001236:	0589      	lsls	r1, r1, #22
 8001238:	50d1      	str	r1, [r2, r3]
        s_raw[i] = 0u;
 800123a:	183b      	adds	r3, r7, r0
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <ADC_Module_Init+0xd8>)
 8001240:	0052      	lsls	r2, r2, #1
 8001242:	2100      	movs	r1, #0
 8001244:	52d1      	strh	r1, [r2, r3]
        s_pin_v[i] = 0.0f;
 8001246:	183b      	adds	r3, r7, r0
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4b1f      	ldr	r3, [pc, #124]	@ (80012c8 <ADC_Module_Init+0xdc>)
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	2100      	movs	r1, #0
 8001250:	50d1      	str	r1, [r2, r3]
        s_scaled_v[i] = 0.0f;
 8001252:	183b      	adds	r3, r7, r0
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <ADC_Module_Init+0xe0>)
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	2100      	movs	r1, #0
 800125c:	50d1      	str	r1, [r2, r3]
    for (uint8_t i = 0u; i < ADC_MODULE_CHANNEL_COUNT; i++) {
 800125e:	183b      	adds	r3, r7, r0
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	183b      	adds	r3, r7, r0
 8001264:	3201      	adds	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	2317      	movs	r3, #23
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b07      	cmp	r3, #7
 8001270:	d9db      	bls.n	800122a <ADC_Module_Init+0x3e>
    /* Optional calibration (supported on F0). */
#ifdef HAL_ADCEx_Calibration_Start
    (void)HAL_ADCEx_Calibration_Start(s_adc);
#endif

    s_sample_hz = (sample_hz == 0u) ? ADC_MODULE_DEFAULT_RATE_HZ : sample_hz;
 8001272:	1dbb      	adds	r3, r7, #6
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <ADC_Module_Init+0x94>
 800127a:	1dbb      	adds	r3, r7, #6
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	e000      	b.n	8001282 <ADC_Module_Init+0x96>
 8001280:	2264      	movs	r2, #100	@ 0x64
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <ADC_Module_Init+0xe4>)
 8001284:	801a      	strh	r2, [r3, #0]
    recompute_cycle_interval();
 8001286:	f7ff ff8b 	bl	80011a0 <recompute_cycle_interval>

    s_cycle_start_ms   = HAL_GetTick();
 800128a:	f000 fdf3 	bl	8001e74 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <ADC_Module_Init+0xe8>)
 8001292:	601a      	str	r2, [r3, #0]
    s_scan_active      = 0u;
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <ADC_Module_Init+0xec>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
    s_conv_in_progress = 0u;
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <ADC_Module_Init+0xf0>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
    s_active_channel   = 0xFFu;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <ADC_Module_Init+0xf4>)
 80012a2:	22ff      	movs	r2, #255	@ 0xff
 80012a4:	701a      	strb	r2, [r3, #0]

    return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b006      	add	sp, #24
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000040 	.word	0x20000040
 80012b4:	00000ce4 	.word	0x00000ce4
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000044 	.word	0x20000044
 80012c0:	20000098 	.word	0x20000098
 80012c4:	20000048 	.word	0x20000048
 80012c8:	20000058 	.word	0x20000058
 80012cc:	20000078 	.word	0x20000078
 80012d0:	20000004 	.word	0x20000004
 80012d4:	200000b8 	.word	0x200000b8
 80012d8:	200000bc 	.word	0x200000bc
 80012dc:	200000bd 	.word	0x200000bd
 80012e0:	2000000c 	.word	0x2000000c

080012e4 <ADC_Module_Task>:

void ADC_Module_Task(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
    if (s_adc == NULL) {
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <ADC_Module_Task+0x64>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d026      	beq.n	8001340 <ADC_Module_Task+0x5c>
        return;
    }

    /* Always try to progress any in-flight conversion. */
    service_conversion_state();
 80012f2:	f7ff fec3 	bl	800107c <service_conversion_state>

    uint32_t now = HAL_GetTick();
 80012f6:	f000 fdbd 	bl	8001e74 <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	607b      	str	r3, [r7, #4]

    /* Start a new cycle when interval elapsed and no scan is active. */
    if (s_scan_active == 0u) {
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <ADC_Module_Task+0x68>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d11d      	bne.n	8001342 <ADC_Module_Task+0x5e>
        if ((now - s_cycle_start_ms) >= s_cycle_interval_ms) {
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <ADC_Module_Task+0x6c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	1ad2      	subs	r2, r2, r3
 800130e:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <ADC_Module_Task+0x70>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d315      	bcc.n	8001342 <ADC_Module_Task+0x5e>
            s_cycle_start_ms = now;
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <ADC_Module_Task+0x6c>)
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	601a      	str	r2, [r3, #0]
            s_scan_active = 1u;
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <ADC_Module_Task+0x68>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
            s_conv_in_progress = 0u;
 8001322:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <ADC_Module_Task+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
            s_active_channel = 0xFFu;
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <ADC_Module_Task+0x78>)
 800132a:	22ff      	movs	r2, #255	@ 0xff
 800132c:	701a      	strb	r2, [r3, #0]

            /* Begin with the first enabled channel. If none enabled, stay idle. */
            if (start_next_enabled_conversion(0xFFu) != HAL_OK) {
 800132e:	20ff      	movs	r0, #255	@ 0xff
 8001330:	f7ff fe20 	bl	8000f74 <start_next_enabled_conversion>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d004      	beq.n	8001342 <ADC_Module_Task+0x5e>
                s_scan_active = 0u; /* nothing to do this cycle */
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <ADC_Module_Task+0x68>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
 800133e:	e000      	b.n	8001342 <ADC_Module_Task+0x5e>
        return;
 8001340:	46c0      	nop			@ (mov r8, r8)
            }
        }
    }
}
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000040 	.word	0x20000040
 800134c:	200000bc 	.word	0x200000bc
 8001350:	200000b8 	.word	0x200000b8
 8001354:	20000008 	.word	0x20000008
 8001358:	200000bd 	.word	0x200000bd
 800135c:	2000000c 	.word	0x2000000c

08001360 <ADC_Module_Set_Enable_Mask>:
        s_enable_mask &= (uint8_t)~(1u << channel_index);
    }
}

void ADC_Module_Set_Enable_Mask(uint8_t enable_mask)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	0002      	movs	r2, r0
 8001368:	1dfb      	adds	r3, r7, #7
 800136a:	701a      	strb	r2, [r3, #0]
    s_enable_mask = enable_mask;
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <ADC_Module_Set_Enable_Mask+0x1c>)
 800136e:	1dfa      	adds	r2, r7, #7
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	701a      	strb	r2, [r3, #0]
}
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b002      	add	sp, #8
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000044 	.word	0x20000044

08001380 <ADC_Module_Set_Scale>:
{
    return s_enable_mask;
}

void ADC_Module_Set_Scale(uint8_t channel_index, float scale_gain)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	0002      	movs	r2, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	701a      	strb	r2, [r3, #0]
    if (channel_index >= ADC_MODULE_CHANNEL_COUNT) {
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b07      	cmp	r3, #7
 8001394:	d806      	bhi.n	80013a4 <ADC_Module_Set_Scale+0x24>
        return;
    }
    s_scale_gain[channel_index] = scale_gain;
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <ADC_Module_Set_Scale+0x2c>)
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	50d1      	str	r1, [r2, r3]
 80013a2:	e000      	b.n	80013a6 <ADC_Module_Set_Scale+0x26>
        return;
 80013a4:	46c0      	nop			@ (mov r8, r8)
}
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000098 	.word	0x20000098

080013b0 <ADC_Module_Get_Pin_Voltage>:
    }
    return s_raw[channel_index];
}

float ADC_Module_Get_Pin_Voltage(uint8_t channel_index)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	0002      	movs	r2, r0
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	701a      	strb	r2, [r3, #0]
    if (channel_index >= ADC_MODULE_CHANNEL_COUNT) {
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b07      	cmp	r3, #7
 80013c2:	d901      	bls.n	80013c8 <ADC_Module_Get_Pin_Voltage+0x18>
        return 0.0f;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e004      	b.n	80013d2 <ADC_Module_Get_Pin_Voltage+0x22>
    }
    return s_pin_v[channel_index];
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <ADC_Module_Get_Pin_Voltage+0x2c>)
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	58d3      	ldr	r3, [r2, r3]
}
 80013d2:	1c18      	adds	r0, r3, #0
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	20000058 	.word	0x20000058

080013e0 <set_bit_timing_for_baud>:
 *  - 125 kbps: prescaler 24
 *
 * If your CAN kernel clock is not 48 MHz, adjust these values accordingly.
 */
static void set_bit_timing_for_baud(CAN_HandleTypeDef *hcan, uint32_t baud_enum)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
    /* Common time segments: 1 + 13 + 2 = 16 TQ, SJW=1 TQ */
    hcan->Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
    hcan->Init.TimeSeg1      = CAN_BS1_13TQ;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	22c0      	movs	r2, #192	@ 0xc0
 80013f4:	0312      	lsls	r2, r2, #12
 80013f6:	611a      	str	r2, [r3, #16]
    hcan->Init.TimeSeg2      = CAN_BS2_2TQ;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	0352      	lsls	r2, r2, #13
 80013fe:	615a      	str	r2, [r3, #20]

    switch (baud_enum) {
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d014      	beq.n	8001430 <set_bit_timing_for_baud+0x50>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d805      	bhi.n	8001418 <set_bit_timing_for_baud+0x38>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d006      	beq.n	8001420 <set_bit_timing_for_baud+0x40>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d007      	beq.n	8001428 <set_bit_timing_for_baud+0x48>
    default:
    case 0: /* 125 kbps */
        hcan->Init.Prescaler = 24u;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2218      	movs	r2, #24
 800141c:	605a      	str	r2, [r3, #4]
        break;
 800141e:	e00b      	b.n	8001438 <set_bit_timing_for_baud+0x58>
    case 1: /* 250 kbps */
        hcan->Init.Prescaler = 12u;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	220c      	movs	r2, #12
 8001424:	605a      	str	r2, [r3, #4]
        break;
 8001426:	e007      	b.n	8001438 <set_bit_timing_for_baud+0x58>
    case 2: /* 500 kbps */
        hcan->Init.Prescaler = 6u;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2206      	movs	r2, #6
 800142c:	605a      	str	r2, [r3, #4]
        break;
 800142e:	e003      	b.n	8001438 <set_bit_timing_for_baud+0x58>
    case 3: /* 1 Mbps */
        hcan->Init.Prescaler = 3u;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2203      	movs	r2, #3
 8001434:	605a      	str	r2, [r3, #4]
        break;
 8001436:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001438:	46c0      	nop			@ (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}

08001440 <apply_accept_all_filter>:

/* Applies an "accept all" filter (mask=0) so all STD/EXT frames pass to FIFO0.
 * This is used at first init and if no explicit ID list has been configured.
 */
static HAL_StatusTypeDef apply_accept_all_filter(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	@ 0x28
 8001444:	af00      	add	r7, sp, #0
    if (s_can == NULL) {
 8001446:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <apply_accept_all_filter+0x74>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <apply_accept_all_filter+0x12>
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e02b      	b.n	80014aa <apply_accept_all_filter+0x6a>
    }

    CAN_FilterTypeDef filter;
    memset(&filter, 0, sizeof(filter));
 8001452:	003b      	movs	r3, r7
 8001454:	2228      	movs	r2, #40	@ 0x28
 8001456:	2100      	movs	r1, #0
 8001458:	0018      	movs	r0, r3
 800145a:	f002 fc73 	bl	8003d44 <memset>

    filter.FilterBank = 0u;
 800145e:	003b      	movs	r3, r7
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001464:	003b      	movs	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800146a:	003b      	movs	r3, r7
 800146c:	2201      	movs	r2, #1
 800146e:	61da      	str	r2, [r3, #28]

    /* Accept all: mask = 0x00000000. For STD IDs, ID and mask use 32-bit format:
       STDID at bits 31:21. Setting mask to zero makes all bits "don't care". */
    filter.FilterIdHigh      = 0x0000;
 8001470:	003b      	movs	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
    filter.FilterIdLow       = 0x0000;
 8001476:	003b      	movs	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
    filter.FilterMaskIdHigh  = 0x0000;
 800147c:	003b      	movs	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
    filter.FilterMaskIdLow   = 0x0000;
 8001482:	003b      	movs	r3, r7
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]

    filter.FilterFIFOAssignment = CAN_MODULE_RX_FIFO;
 8001488:	003b      	movs	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
    filter.FilterActivation = ENABLE;
 800148e:	003b      	movs	r3, r7
 8001490:	2201      	movs	r2, #1
 8001492:	621a      	str	r2, [r3, #32]
    filter.SlaveStartFilterBank = CAN_MODULE_FILTER_BANKS; /* not used on single CAN */
 8001494:	003b      	movs	r3, r7
 8001496:	220e      	movs	r2, #14
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_CAN_ConfigFilter(s_can, &filter);
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <apply_accept_all_filter+0x74>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	003a      	movs	r2, r7
 80014a0:	0011      	movs	r1, r2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f001 fad9 	bl	8002a5a <HAL_CAN_ConfigFilter>
 80014a8:	0003      	movs	r3, r0
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b00a      	add	sp, #40	@ 0x28
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	200000c0 	.word	0x200000c0

080014b8 <wait_for_tx_mailbox>:
    return HAL_OK;
}

/* Waits until a TX mailbox is free or the timeout elapses. */
static HAL_StatusTypeDef wait_for_tx_mailbox(uint32_t timeout_ms)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    uint32_t start = HAL_GetTick();
 80014c0:	f000 fcd8 	bl	8001e74 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	60fb      	str	r3, [r7, #12]
    while (HAL_CAN_GetTxMailboxesFreeLevel(s_can) == 0u) {
 80014c8:	e009      	b.n	80014de <wait_for_tx_mailbox+0x26>
        if ((HAL_GetTick() - start) >= timeout_ms) {
 80014ca:	f000 fcd3 	bl	8001e74 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d801      	bhi.n	80014de <wait_for_tx_mailbox+0x26>
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e007      	b.n	80014ee <wait_for_tx_mailbox+0x36>
    while (HAL_CAN_GetTxMailboxesFreeLevel(s_can) == 0u) {
 80014de:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <wait_for_tx_mailbox+0x40>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f001 fcc3 	bl	8002e6e <HAL_CAN_GetTxMailboxesFreeLevel>
 80014e8:	1e03      	subs	r3, r0, #0
 80014ea:	d0ee      	beq.n	80014ca <wait_for_tx_mailbox+0x12>
        }
    }
    return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	200000c0 	.word	0x200000c0

080014fc <CAN_Module_Init>:

/* Initializes the CAN peripheral with the requested baud, starts it, and applies
 * a default permissive filter. Stores the provided node_id.
 */
HAL_StatusTypeDef CAN_Module_Init(CAN_HandleTypeDef *hcan, uint32_t baud_enum)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
    if (hcan == NULL) {
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <CAN_Module_Init+0x14>
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e041      	b.n	8001594 <CAN_Module_Init+0x98>
    }

    s_can = hcan;
 8001510:	4b22      	ldr	r3, [pc, #136]	@ (800159c <CAN_Module_Init+0xa0>)
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
    s_baud_enum = baud_enum;
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <CAN_Module_Init+0xa4>)
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	601a      	str	r2, [r3, #0]

    /* Base init fields. These may be overridden by CubeMX; set key ones here. */
    s_can->Init.Mode = CAN_MODE_NORMAL;
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <CAN_Module_Init+0xa0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
    s_can->Init.TimeTriggeredMode = DISABLE;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <CAN_Module_Init+0xa0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2200      	movs	r2, #0
 800152a:	761a      	strb	r2, [r3, #24]
    s_can->Init.AutoBusOff = ENABLE;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <CAN_Module_Init+0xa0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2201      	movs	r2, #1
 8001532:	765a      	strb	r2, [r3, #25]
    s_can->Init.AutoWakeUp = ENABLE;
 8001534:	4b19      	ldr	r3, [pc, #100]	@ (800159c <CAN_Module_Init+0xa0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2201      	movs	r2, #1
 800153a:	769a      	strb	r2, [r3, #26]
    s_can->Init.AutoRetransmission = ENABLE;
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <CAN_Module_Init+0xa0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2201      	movs	r2, #1
 8001542:	76da      	strb	r2, [r3, #27]
    s_can->Init.ReceiveFifoLocked = DISABLE;
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <CAN_Module_Init+0xa0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	771a      	strb	r2, [r3, #28]
    s_can->Init.TransmitFifoPriority = ENABLE;
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <CAN_Module_Init+0xa0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2201      	movs	r2, #1
 8001552:	775a      	strb	r2, [r3, #29]

    set_bit_timing_for_baud(s_can, baud_enum);
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <CAN_Module_Init+0xa0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	0011      	movs	r1, r2
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff ff3f 	bl	80013e0 <set_bit_timing_for_baud>

    if (HAL_CAN_Init(s_can) != HAL_OK) {
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <CAN_Module_Init+0xa0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	0018      	movs	r0, r3
 8001568:	f001 f979 	bl	800285e <HAL_CAN_Init>
 800156c:	1e03      	subs	r3, r0, #0
 800156e:	d001      	beq.n	8001574 <CAN_Module_Init+0x78>
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e00f      	b.n	8001594 <CAN_Module_Init+0x98>
    }

    /* Default to accept-all until user configures specific IDs. */
    if (apply_accept_all_filter() != HAL_OK) {
 8001574:	f7ff ff64 	bl	8001440 <apply_accept_all_filter>
 8001578:	1e03      	subs	r3, r0, #0
 800157a:	d001      	beq.n	8001580 <CAN_Module_Init+0x84>
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e009      	b.n	8001594 <CAN_Module_Init+0x98>
    }

    if (HAL_CAN_Start(s_can) != HAL_OK) {
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <CAN_Module_Init+0xa0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0018      	movs	r0, r3
 8001586:	f001 fb5a 	bl	8002c3e <HAL_CAN_Start>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d001      	beq.n	8001592 <CAN_Module_Init+0x96>
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <CAN_Module_Init+0x98>
    }

    return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200000c0 	.word	0x200000c0
 80015a0:	20000010 	.word	0x20000010

080015a4 <CAN_Module_Send_Std>:

/* Sends a Standard ID data frame with the given payload and DLC.
 * timeout_ms applies to waiting for a free TX mailbox.
 */
HAL_StatusTypeDef CAN_Module_Send_Std(uint16_t std_id, const uint8_t *data, uint8_t dlc, uint32_t timeout_ms)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b08c      	sub	sp, #48	@ 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	0011      	movs	r1, r2
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	230e      	movs	r3, #14
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	1c02      	adds	r2, r0, #0
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	200d      	movs	r0, #13
 80015ba:	183b      	adds	r3, r7, r0
 80015bc:	1c0a      	adds	r2, r1, #0
 80015be:	701a      	strb	r2, [r3, #0]
    if (s_can == NULL || data == NULL || dlc > 8u) {
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <CAN_Module_Send_Std+0xa0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <CAN_Module_Send_Std+0x32>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <CAN_Module_Send_Std+0x32>
 80015ce:	183b      	adds	r3, r7, r0
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d901      	bls.n	80015da <CAN_Module_Send_Std+0x36>
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e030      	b.n	800163c <CAN_Module_Send_Std+0x98>
    }

    HAL_StatusTypeDef st = wait_for_tx_mailbox(timeout_ms);
 80015da:	252f      	movs	r5, #47	@ 0x2f
 80015dc:	197c      	adds	r4, r7, r5
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff ff69 	bl	80014b8 <wait_for_tx_mailbox>
 80015e6:	0003      	movs	r3, r0
 80015e8:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) {
 80015ea:	197b      	adds	r3, r7, r5
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <CAN_Module_Send_Std+0x54>
        return st;
 80015f2:	197b      	adds	r3, r7, r5
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	e021      	b.n	800163c <CAN_Module_Send_Std+0x98>
    }

    CAN_TxHeaderTypeDef tx_header;
    uint32_t mailbox;

    tx_header.StdId = (std_id & 0x7FFu);
 80015f8:	230e      	movs	r3, #14
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	055b      	lsls	r3, r3, #21
 8001600:	0d5a      	lsrs	r2, r3, #21
 8001602:	2114      	movs	r1, #20
 8001604:	187b      	adds	r3, r7, r1
 8001606:	601a      	str	r2, [r3, #0]
    tx_header.ExtId = 0u;
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
    tx_header.IDE   = CAN_ID_STD;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    tx_header.RTR   = CAN_RTR_DATA;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    tx_header.DLC   = dlc;
 800161a:	230d      	movs	r3, #13
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	187b      	adds	r3, r7, r1
 8001622:	611a      	str	r2, [r3, #16]
    tx_header.TransmitGlobalTime = DISABLE;
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2200      	movs	r2, #0
 8001628:	751a      	strb	r2, [r3, #20]

    return HAL_CAN_AddTxMessage(s_can, &tx_header, (uint8_t *)data, &mailbox);
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <CAN_Module_Send_Std+0xa0>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	2310      	movs	r3, #16
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	1879      	adds	r1, r7, r1
 8001636:	f001 fb48 	bl	8002cca <HAL_CAN_AddTxMessage>
 800163a:	0003      	movs	r3, r0
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b00c      	add	sp, #48	@ 0x30
 8001642:	bdb0      	pop	{r4, r5, r7, pc}
 8001644:	200000c0 	.word	0x200000c0

08001648 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800164e:	f000 fbb7 	bl	8001dc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001652:	f000 f875 	bl	8001740 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001656:	f000 f9af 	bl	80019b8 <MX_GPIO_Init>
	MX_CAN_Init();
 800165a:	f000 f975 	bl	8001948 <MX_CAN_Init>
	MX_ADC_Init();
 800165e:	f000 f8bd 	bl	80017dc <MX_ADC_Init>
	/* USER CODE BEGIN 2 */

	// Set Standby Pin on CAN transceiver low (normal mode) before initializing
	HAL_GPIO_WritePin(GPIOB, CAN_STANDBY_Pin, GPIO_PIN_RESET);
 8001662:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <main+0xd8>)
 8001664:	2200      	movs	r2, #0
 8001666:	2110      	movs	r1, #16
 8001668:	0018      	movs	r0, r3
 800166a:	f001 fe5f 	bl	800332c <HAL_GPIO_WritePin>

	if (CAN_Module_Init(&hcan, baud_enum) != HAL_OK) {
 800166e:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <main+0xdc>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b2d      	ldr	r3, [pc, #180]	@ (8001728 <main+0xe0>)
 8001674:	0011      	movs	r1, r2
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff ff40 	bl	80014fc <CAN_Module_Init>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d001      	beq.n	8001684 <main+0x3c>
		// TODO
		Error_Handler();
 8001680:	f000 fa6a 	bl	8001b58 <Error_Handler>
	}

	if (ADC_Module_Init(&hadc, ADC_VREF_MV, ADC_SAMPLE_RATE_HZ) != HAL_OK) {
 8001684:	4929      	ldr	r1, [pc, #164]	@ (800172c <main+0xe4>)
 8001686:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <main+0xe8>)
 8001688:	2264      	movs	r2, #100	@ 0x64
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff fdae 	bl	80011ec <ADC_Module_Init>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <main+0x50>
		// TODO
		Error_Handler();
 8001694:	f000 fa60 	bl	8001b58 <Error_Handler>
	}

	// Set ADC to default settings
	ADC_Module_Set_Enable_Mask(0xFFu);
 8001698:	20ff      	movs	r0, #255	@ 0xff
 800169a:	f7ff fe61 	bl	8001360 <ADC_Module_Set_Enable_Mask>
	for (uint8_t ch = 0; ch < 8u; ch++) {
 800169e:	230f      	movs	r3, #15
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
 80016a6:	e00e      	b.n	80016c6 <main+0x7e>
		ADC_Module_Set_Scale(ch, 1.0f);
 80016a8:	22fe      	movs	r2, #254	@ 0xfe
 80016aa:	0592      	lsls	r2, r2, #22
 80016ac:	240f      	movs	r4, #15
 80016ae:	193b      	adds	r3, r7, r4
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	1c11      	adds	r1, r2, #0
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7ff fe63 	bl	8001380 <ADC_Module_Set_Scale>
	for (uint8_t ch = 0; ch < 8u; ch++) {
 80016ba:	0021      	movs	r1, r4
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	3201      	adds	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	230f      	movs	r3, #15
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b07      	cmp	r3, #7
 80016ce:	d9eb      	bls.n	80016a8 <main+0x60>
	}

	last_tick = HAL_GetTick();
 80016d0:	f000 fbd0 	bl	8001e74 <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <main+0xec>)
 80016d8:	601a      	str	r2, [r3, #0]
	heartbeat_tick = last_tick;
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <main+0xec>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <main+0xf0>)
 80016e0:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Heartbeat_Task();
 80016e2:	f000 f9bf 	bl	8001a64 <Heartbeat_Task>
		ADC_Module_Task();
 80016e6:	f7ff fdfd 	bl	80012e4 <ADC_Module_Task>
		float ch0_v = ADC_Module_Get_Pin_Voltage(0);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fe60 	bl	80013b0 <ADC_Module_Get_Pin_Voltage>
 80016f0:	1c03      	adds	r3, r0, #0
 80016f2:	60bb      	str	r3, [r7, #8]
		uint16_t ch0_v_i = (uint16_t)(ch0_v * 1000); // get channel 0 voltage in whole mV
 80016f4:	4911      	ldr	r1, [pc, #68]	@ (800173c <main+0xf4>)
 80016f6:	68b8      	ldr	r0, [r7, #8]
 80016f8:	f7fe fec0 	bl	800047c <__aeabi_fmul>
 80016fc:	1c03      	adds	r3, r0, #0
 80016fe:	1dbc      	adds	r4, r7, #6
 8001700:	1c18      	adds	r0, r3, #0
 8001702:	f7fe fd8d 	bl	8000220 <__aeabi_f2uiz>
 8001706:	0003      	movs	r3, r0
 8001708:	8023      	strh	r3, [r4, #0]
		Test_Can_Task(ch0_v_i);
 800170a:	1dbb      	adds	r3, r7, #6
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	0018      	movs	r0, r3
 8001710:	f000 f9c6 	bl	8001aa0 <Test_Can_Task>
		HAL_Delay(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f000 fbb7 	bl	8001e88 <HAL_Delay>
	while (1) {
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	e7e1      	b.n	80016e2 <main+0x9a>
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	48000400 	.word	0x48000400
 8001724:	20000014 	.word	0x20000014
 8001728:	20000104 	.word	0x20000104
 800172c:	00000ce4 	.word	0x00000ce4
 8001730:	200000c4 	.word	0x200000c4
 8001734:	20000148 	.word	0x20000148
 8001738:	2000012c 	.word	0x2000012c
 800173c:	447a0000 	.word	0x447a0000

08001740 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b093      	sub	sp, #76	@ 0x4c
 8001744:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001746:	2414      	movs	r4, #20
 8001748:	193b      	adds	r3, r7, r4
 800174a:	0018      	movs	r0, r3
 800174c:	2334      	movs	r3, #52	@ 0x34
 800174e:	001a      	movs	r2, r3
 8001750:	2100      	movs	r1, #0
 8001752:	f002 faf7 	bl	8003d44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	0018      	movs	r0, r3
 800175a:	2310      	movs	r3, #16
 800175c:	001a      	movs	r2, r3
 800175e:	2100      	movs	r1, #0
 8001760:	f002 faf0 	bl	8003d44 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14
 8001764:	0021      	movs	r1, r4
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2211      	movs	r2, #17
 800176a:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2201      	movs	r2, #1
 8001770:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2201      	movs	r2, #1
 8001776:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001778:	187b      	adds	r3, r7, r1
 800177a:	2210      	movs	r2, #16
 800177c:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177e:	187b      	adds	r3, r7, r1
 8001780:	2202      	movs	r2, #2
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001784:	187b      	adds	r3, r7, r1
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	0252      	lsls	r2, r2, #9
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800178c:	187b      	adds	r3, r7, r1
 800178e:	2280      	movs	r2, #128	@ 0x80
 8001790:	02d2      	lsls	r2, r2, #11
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2200      	movs	r2, #0
 8001798:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800179a:	187b      	adds	r3, r7, r1
 800179c:	0018      	movs	r0, r3
 800179e:	f001 fdfd 	bl	800339c <HAL_RCC_OscConfig>
 80017a2:	1e03      	subs	r3, r0, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0x6a>
		Error_Handler();
 80017a6:	f000 f9d7 	bl	8001b58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2202      	movs	r2, #2
 80017b4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2101      	movs	r1, #1
 80017c6:	0018      	movs	r0, r3
 80017c8:	f002 f96e 	bl	8003aa8 <HAL_RCC_ClockConfig>
 80017cc:	1e03      	subs	r3, r0, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0x94>
		Error_Handler();
 80017d0:	f000 f9c2 	bl	8001b58 <Error_Handler>
	}
}
 80017d4:	46c0      	nop			@ (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b013      	add	sp, #76	@ 0x4c
 80017da:	bd90      	pop	{r4, r7, pc}

080017dc <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	0018      	movs	r0, r3
 80017e6:	230c      	movs	r3, #12
 80017e8:	001a      	movs	r2, r3
 80017ea:	2100      	movs	r1, #0
 80017ec:	f002 faaa 	bl	8003d44 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80017f0:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <MX_ADC_Init+0x164>)
 80017f2:	4a54      	ldr	r2, [pc, #336]	@ (8001944 <MX_ADC_Init+0x168>)
 80017f4:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017f6:	4b52      	ldr	r3, [pc, #328]	@ (8001940 <MX_ADC_Init+0x164>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80017fc:	4b50      	ldr	r3, [pc, #320]	@ (8001940 <MX_ADC_Init+0x164>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001802:	4b4f      	ldr	r3, [pc, #316]	@ (8001940 <MX_ADC_Init+0x164>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001808:	4b4d      	ldr	r3, [pc, #308]	@ (8001940 <MX_ADC_Init+0x164>)
 800180a:	2201      	movs	r2, #1
 800180c:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180e:	4b4c      	ldr	r3, [pc, #304]	@ (8001940 <MX_ADC_Init+0x164>)
 8001810:	2204      	movs	r2, #4
 8001812:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8001814:	4b4a      	ldr	r3, [pc, #296]	@ (8001940 <MX_ADC_Init+0x164>)
 8001816:	2200      	movs	r2, #0
 8001818:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800181a:	4b49      	ldr	r3, [pc, #292]	@ (8001940 <MX_ADC_Init+0x164>)
 800181c:	2200      	movs	r2, #0
 800181e:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8001820:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <MX_ADC_Init+0x164>)
 8001822:	2200      	movs	r2, #0
 8001824:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001826:	4b46      	ldr	r3, [pc, #280]	@ (8001940 <MX_ADC_Init+0x164>)
 8001828:	2200      	movs	r2, #0
 800182a:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800182c:	4b44      	ldr	r3, [pc, #272]	@ (8001940 <MX_ADC_Init+0x164>)
 800182e:	22c2      	movs	r2, #194	@ 0xc2
 8001830:	32ff      	adds	r2, #255	@ 0xff
 8001832:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001834:	4b42      	ldr	r3, [pc, #264]	@ (8001940 <MX_ADC_Init+0x164>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 800183a:	4b41      	ldr	r3, [pc, #260]	@ (8001940 <MX_ADC_Init+0x164>)
 800183c:	2224      	movs	r2, #36	@ 0x24
 800183e:	2100      	movs	r1, #0
 8001840:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001842:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <MX_ADC_Init+0x164>)
 8001844:	2200      	movs	r2, #0
 8001846:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8001848:	4b3d      	ldr	r3, [pc, #244]	@ (8001940 <MX_ADC_Init+0x164>)
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fb40 	bl	8001ed0 <HAL_ADC_Init>
 8001850:	1e03      	subs	r3, r0, #0
 8001852:	d001      	beq.n	8001858 <MX_ADC_Init+0x7c>
		Error_Handler();
 8001854:	f000 f980 	bl	8001b58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	0152      	lsls	r2, r2, #5
 8001864:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2280      	movs	r2, #128	@ 0x80
 800186a:	0552      	lsls	r2, r2, #21
 800186c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800186e:	1d3a      	adds	r2, r7, #4
 8001870:	4b33      	ldr	r3, [pc, #204]	@ (8001940 <MX_ADC_Init+0x164>)
 8001872:	0011      	movs	r1, r2
 8001874:	0018      	movs	r0, r3
 8001876:	f000 fda3 	bl	80023c0 <HAL_ADC_ConfigChannel>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d001      	beq.n	8001882 <MX_ADC_Init+0xa6>
		Error_Handler();
 800187e:	f000 f96b 	bl	8001b58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001888:	1d3a      	adds	r2, r7, #4
 800188a:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <MX_ADC_Init+0x164>)
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f000 fd96 	bl	80023c0 <HAL_ADC_ConfigChannel>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d001      	beq.n	800189c <MX_ADC_Init+0xc0>
		Error_Handler();
 8001898:	f000 f95e 	bl	8001b58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2202      	movs	r2, #2
 80018a0:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80018a2:	1d3a      	adds	r2, r7, #4
 80018a4:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <MX_ADC_Init+0x164>)
 80018a6:	0011      	movs	r1, r2
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 fd89 	bl	80023c0 <HAL_ADC_ConfigChannel>
 80018ae:	1e03      	subs	r3, r0, #0
 80018b0:	d001      	beq.n	80018b6 <MX_ADC_Init+0xda>
		Error_Handler();
 80018b2:	f000 f951 	bl	8001b58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2203      	movs	r2, #3
 80018ba:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80018bc:	1d3a      	adds	r2, r7, #4
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <MX_ADC_Init+0x164>)
 80018c0:	0011      	movs	r1, r2
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 fd7c 	bl	80023c0 <HAL_ADC_ConfigChannel>
 80018c8:	1e03      	subs	r3, r0, #0
 80018ca:	d001      	beq.n	80018d0 <MX_ADC_Init+0xf4>
		Error_Handler();
 80018cc:	f000 f944 	bl	8001b58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2204      	movs	r2, #4
 80018d4:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80018d6:	1d3a      	adds	r2, r7, #4
 80018d8:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <MX_ADC_Init+0x164>)
 80018da:	0011      	movs	r1, r2
 80018dc:	0018      	movs	r0, r3
 80018de:	f000 fd6f 	bl	80023c0 <HAL_ADC_ConfigChannel>
 80018e2:	1e03      	subs	r3, r0, #0
 80018e4:	d001      	beq.n	80018ea <MX_ADC_Init+0x10e>
		Error_Handler();
 80018e6:	f000 f937 	bl	8001b58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2205      	movs	r2, #5
 80018ee:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80018f0:	1d3a      	adds	r2, r7, #4
 80018f2:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <MX_ADC_Init+0x164>)
 80018f4:	0011      	movs	r1, r2
 80018f6:	0018      	movs	r0, r3
 80018f8:	f000 fd62 	bl	80023c0 <HAL_ADC_ConfigChannel>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d001      	beq.n	8001904 <MX_ADC_Init+0x128>
		Error_Handler();
 8001900:	f000 f92a 	bl	8001b58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2206      	movs	r2, #6
 8001908:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800190a:	1d3a      	adds	r2, r7, #4
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <MX_ADC_Init+0x164>)
 800190e:	0011      	movs	r1, r2
 8001910:	0018      	movs	r0, r3
 8001912:	f000 fd55 	bl	80023c0 <HAL_ADC_ConfigChannel>
 8001916:	1e03      	subs	r3, r0, #0
 8001918:	d001      	beq.n	800191e <MX_ADC_Init+0x142>
		Error_Handler();
 800191a:	f000 f91d 	bl	8001b58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001924:	1d3a      	adds	r2, r7, #4
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <MX_ADC_Init+0x164>)
 8001928:	0011      	movs	r1, r2
 800192a:	0018      	movs	r0, r3
 800192c:	f000 fd48 	bl	80023c0 <HAL_ADC_ConfigChannel>
 8001930:	1e03      	subs	r3, r0, #0
 8001932:	d001      	beq.n	8001938 <MX_ADC_Init+0x15c>
		Error_Handler();
 8001934:	f000 f910 	bl	8001b58 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001938:	46c0      	nop			@ (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b004      	add	sp, #16
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000c4 	.word	0x200000c4
 8001944:	40012400 	.word	0x40012400

08001948 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 800194c:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <MX_CAN_Init+0x68>)
 800194e:	4a19      	ldr	r2, [pc, #100]	@ (80019b4 <MX_CAN_Init+0x6c>)
 8001950:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8001952:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <MX_CAN_Init+0x68>)
 8001954:	2206      	movs	r2, #6
 8001956:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <MX_CAN_Init+0x68>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <MX_CAN_Init+0x68>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <MX_CAN_Init+0x68>)
 8001966:	22c0      	movs	r2, #192	@ 0xc0
 8001968:	0312      	lsls	r2, r2, #12
 800196a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <MX_CAN_Init+0x68>)
 800196e:	2280      	movs	r2, #128	@ 0x80
 8001970:	0352      	lsls	r2, r2, #13
 8001972:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001974:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <MX_CAN_Init+0x68>)
 8001976:	2200      	movs	r2, #0
 8001978:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800197a:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <MX_CAN_Init+0x68>)
 800197c:	2200      	movs	r2, #0
 800197e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <MX_CAN_Init+0x68>)
 8001982:	2200      	movs	r2, #0
 8001984:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <MX_CAN_Init+0x68>)
 8001988:	2200      	movs	r2, #0
 800198a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <MX_CAN_Init+0x68>)
 800198e:	2200      	movs	r2, #0
 8001990:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001992:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <MX_CAN_Init+0x68>)
 8001994:	2200      	movs	r2, #0
 8001996:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <MX_CAN_Init+0x68>)
 800199a:	0018      	movs	r0, r3
 800199c:	f000 ff5f 	bl	800285e <HAL_CAN_Init>
 80019a0:	1e03      	subs	r3, r0, #0
 80019a2:	d001      	beq.n	80019a8 <MX_CAN_Init+0x60>
		Error_Handler();
 80019a4:	f000 f8d8 	bl	8001b58 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 80019a8:	46c0      	nop			@ (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	20000104 	.word	0x20000104
 80019b4:	40006400 	.word	0x40006400

080019b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b089      	sub	sp, #36	@ 0x24
 80019bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019be:	240c      	movs	r4, #12
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	0018      	movs	r0, r3
 80019c4:	2314      	movs	r3, #20
 80019c6:	001a      	movs	r2, r3
 80019c8:	2100      	movs	r1, #0
 80019ca:	f002 f9bb 	bl	8003d44 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80019ce:	4b23      	ldr	r3, [pc, #140]	@ (8001a5c <MX_GPIO_Init+0xa4>)
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <MX_GPIO_Init+0xa4>)
 80019d4:	2180      	movs	r1, #128	@ 0x80
 80019d6:	03c9      	lsls	r1, r1, #15
 80019d8:	430a      	orrs	r2, r1
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <MX_GPIO_Init+0xa4>)
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	03db      	lsls	r3, r3, #15
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <MX_GPIO_Init+0xa4>)
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <MX_GPIO_Init+0xa4>)
 80019f0:	2180      	movs	r1, #128	@ 0x80
 80019f2:	0289      	lsls	r1, r1, #10
 80019f4:	430a      	orrs	r2, r1
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <MX_GPIO_Init+0xa4>)
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	029b      	lsls	r3, r3, #10
 8001a00:	4013      	ands	r3, r2
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <MX_GPIO_Init+0xa4>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <MX_GPIO_Init+0xa4>)
 8001a0c:	2180      	movs	r1, #128	@ 0x80
 8001a0e:	02c9      	lsls	r1, r1, #11
 8001a10:	430a      	orrs	r2, r1
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <MX_GPIO_Init+0xa4>)
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	02db      	lsls	r3, r3, #11
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001a22:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <MX_GPIO_Init+0xa8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	2113      	movs	r1, #19
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f001 fc7f 	bl	800332c <HAL_GPIO_WritePin>
			LED_STATUS_1_Pin | LED_STATUS_2_Pin | CAN_STANDBY_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED_STATUS_1_Pin LED_STATUS_2_Pin CAN_STANDBY_Pin */
	GPIO_InitStruct.Pin = LED_STATUS_1_Pin | LED_STATUS_2_Pin | CAN_STANDBY_Pin;
 8001a2e:	0021      	movs	r1, r4
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2213      	movs	r2, #19
 8001a34:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2201      	movs	r2, #1
 8001a3a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	4a05      	ldr	r2, [pc, #20]	@ (8001a60 <MX_GPIO_Init+0xa8>)
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	0010      	movs	r0, r2
 8001a50:	f001 fb04 	bl	800305c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b009      	add	sp, #36	@ 0x24
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	48000400 	.word	0x48000400

08001a64 <Heartbeat_Task>:

/* USER CODE BEGIN 4 */

void Heartbeat_Task(void) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	/* Check if enough time has passed */
	if ((HAL_GetTick() - heartbeat_tick) >= HEARTBEAT_INTERVAL_MS) {
 8001a68:	f000 fa04 	bl	8001e74 <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <Heartbeat_Task+0x34>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	23fa      	movs	r3, #250	@ 0xfa
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d309      	bcc.n	8001a90 <Heartbeat_Task+0x2c>
		/* Toggle the LED */
		HAL_GPIO_TogglePin(GPIOB, LED_STATUS_1_Pin); // Example: Port B
 8001a7c:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <Heartbeat_Task+0x38>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	0018      	movs	r0, r3
 8001a82:	f001 fc70 	bl	8003366 <HAL_GPIO_TogglePin>

		/* Update last toggle time */
		heartbeat_tick = HAL_GetTick();
 8001a86:	f000 f9f5 	bl	8001e74 <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	4b02      	ldr	r3, [pc, #8]	@ (8001a98 <Heartbeat_Task+0x34>)
 8001a8e:	601a      	str	r2, [r3, #0]
	}
}
 8001a90:	46c0      	nop			@ (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	2000012c 	.word	0x2000012c
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <Test_Can_Task>:

/**
 * @brief Periodically send a simple CAN test message and flash LED on success.
 *        Note: Updated to use CAN_Module_Send_Std() from can_module.c.
 */
static void Test_Can_Task(uint16_t value) {
 8001aa0:	b5b0      	push	{r4, r5, r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	1dbb      	adds	r3, r7, #6
 8001aaa:	801a      	strh	r2, [r3, #0]
	uint32_t now = HAL_GetTick();
 8001aac:	f000 f9e2 	bl	8001e74 <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	617b      	str	r3, [r7, #20]
	if ((now - last_tick) < TEST_SEND_INTERVAL_MS) {
 8001ab4:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <Test_Can_Task+0xa8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	1ad2      	subs	r2, r2, r3
 8001abc:	23fa      	movs	r3, #250	@ 0xfa
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d33c      	bcc.n	8001b3e <Test_Can_Task+0x9e>
		return;
	}
	last_tick = now;
 8001ac4:	4b20      	ldr	r3, [pc, #128]	@ (8001b48 <Test_Can_Task+0xa8>)
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]

	/* Minimal 1-byte test payload (kept as-is). */
	uint8_t data[2] = {(uint8_t)((value >> 8) & 0xFFu), (uint8_t)(value & 0xFFu)};
 8001aca:	1dbb      	adds	r3, r7, #6
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	210c      	movs	r1, #12
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	1dbb      	adds	r3, r7, #6
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	705a      	strb	r2, [r3, #1]


	/* Short TX timeout so we don't block the task loop. */
	const uint32_t tx_timeout_ms = 10u;
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	613b      	str	r3, [r7, #16]

	/* Updated call: (std_id, data_ptr, dlc, timeout_ms). */
	HAL_StatusTypeDef st = CAN_Module_Send_Std(TEST_CAN_ID, data, 2u, tx_timeout_ms);
 8001ae8:	250f      	movs	r5, #15
 8001aea:	197c      	adds	r4, r7, r5
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1879      	adds	r1, r7, r1
 8001af0:	2292      	movs	r2, #146	@ 0x92
 8001af2:	0050      	lsls	r0, r2, #1
 8001af4:	2202      	movs	r2, #2
 8001af6:	f7ff fd55 	bl	80015a4 <CAN_Module_Send_Std>
 8001afa:	0003      	movs	r3, r0
 8001afc:	7023      	strb	r3, [r4, #0]

	g_can_dbg.last_tx_status = st;
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <Test_Can_Task+0xac>)
 8001b00:	002c      	movs	r4, r5
 8001b02:	193a      	adds	r2, r7, r4
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	701a      	strb	r2, [r3, #0]
	g_can_dbg.last_hal_error = HAL_CAN_GetError(&hcan);
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <Test_Can_Task+0xb0>)
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f001 f9e7 	bl	8002ede <HAL_CAN_GetError>
 8001b10:	0002      	movs	r2, r0
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <Test_Can_Task+0xac>)
 8001b14:	605a      	str	r2, [r3, #4]
	g_can_dbg.last_esr = hcan.Instance->ESR;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <Test_Can_Task+0xb0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <Test_Can_Task+0xac>)
 8001b1e:	609a      	str	r2, [r3, #8]
	g_can_dbg.last_tsr = hcan.Instance->TSR;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <Test_Can_Task+0xb0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <Test_Can_Task+0xac>)
 8001b28:	60da      	str	r2, [r3, #12]

	if (st == HAL_OK) {
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <Test_Can_Task+0xa0>
		HAL_GPIO_TogglePin(GPIOB, LED_STATUS_2_Pin);
 8001b32:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <Test_Can_Task+0xb4>)
 8001b34:	2102      	movs	r1, #2
 8001b36:	0018      	movs	r0, r3
 8001b38:	f001 fc15 	bl	8003366 <HAL_GPIO_TogglePin>
 8001b3c:	e000      	b.n	8001b40 <Test_Can_Task+0xa0>
		return;
 8001b3e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b006      	add	sp, #24
 8001b44:	bdb0      	pop	{r4, r5, r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	20000148 	.word	0x20000148
 8001b4c:	20000130 	.word	0x20000130
 8001b50:	20000104 	.word	0x20000104
 8001b54:	48000400 	.word	0x48000400

08001b58 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b60:	46c0      	nop			@ (mov r8, r8)
 8001b62:	e7fd      	b.n	8001b60 <Error_Handler+0x8>

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b70:	2101      	movs	r1, #1
 8001b72:	430a      	orrs	r2, r1
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b88:	2180      	movs	r1, #128	@ 0x80
 8001b8a:	0549      	lsls	r1, r1, #21
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	61da      	str	r2, [r3, #28]
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	055b      	lsls	r3, r3, #21
 8001b98:	4013      	ands	r3, r2
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b08b      	sub	sp, #44	@ 0x2c
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	2414      	movs	r4, #20
 8001bb6:	193b      	adds	r3, r7, r4
 8001bb8:	0018      	movs	r0, r3
 8001bba:	2314      	movs	r3, #20
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f002 f8c0 	bl	8003d44 <memset>
  if(hadc->Instance==ADC1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	@ (8001c30 <HAL_ADC_MspInit+0x84>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12b      	bne.n	8001c26 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bce:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_ADC_MspInit+0x88>)
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <HAL_ADC_MspInit+0x88>)
 8001bd4:	2180      	movs	r1, #128	@ 0x80
 8001bd6:	0089      	lsls	r1, r1, #2
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <HAL_ADC_MspInit+0x88>)
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_ADC_MspInit+0x88>)
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_ADC_MspInit+0x88>)
 8001bf0:	2180      	movs	r1, #128	@ 0x80
 8001bf2:	0289      	lsls	r1, r1, #10
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	615a      	str	r2, [r3, #20]
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_ADC_MspInit+0x88>)
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	029b      	lsls	r3, r3, #10
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	22ff      	movs	r2, #255	@ 0xff
 8001c0a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0c:	193b      	adds	r3, r7, r4
 8001c0e:	2203      	movs	r2, #3
 8001c10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	193b      	adds	r3, r7, r4
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	193a      	adds	r2, r7, r4
 8001c1a:	2390      	movs	r3, #144	@ 0x90
 8001c1c:	05db      	lsls	r3, r3, #23
 8001c1e:	0011      	movs	r1, r2
 8001c20:	0018      	movs	r0, r3
 8001c22:	f001 fa1b 	bl	800305c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b00b      	add	sp, #44	@ 0x2c
 8001c2c:	bd90      	pop	{r4, r7, pc}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	40012400 	.word	0x40012400
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b08b      	sub	sp, #44	@ 0x2c
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	2414      	movs	r4, #20
 8001c42:	193b      	adds	r3, r7, r4
 8001c44:	0018      	movs	r0, r3
 8001c46:	2314      	movs	r3, #20
 8001c48:	001a      	movs	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	f002 f87a 	bl	8003d44 <memset>
  if(hcan->Instance==CAN)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a28      	ldr	r2, [pc, #160]	@ (8001cf8 <HAL_CAN_MspInit+0xc0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d14a      	bne.n	8001cf0 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c5a:	4b28      	ldr	r3, [pc, #160]	@ (8001cfc <HAL_CAN_MspInit+0xc4>)
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HAL_CAN_MspInit+0xc4>)
 8001c60:	2180      	movs	r1, #128	@ 0x80
 8001c62:	0489      	lsls	r1, r1, #18
 8001c64:	430a      	orrs	r2, r1
 8001c66:	61da      	str	r2, [r3, #28]
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <HAL_CAN_MspInit+0xc4>)
 8001c6a:	69da      	ldr	r2, [r3, #28]
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	049b      	lsls	r3, r3, #18
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <HAL_CAN_MspInit+0xc4>)
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_CAN_MspInit+0xc4>)
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	0289      	lsls	r1, r1, #10
 8001c80:	430a      	orrs	r2, r1
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_CAN_MspInit+0xc4>)
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c92:	193b      	adds	r3, r7, r4
 8001c94:	2280      	movs	r2, #128	@ 0x80
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	193b      	adds	r3, r7, r4
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	193b      	adds	r3, r7, r4
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca6:	193b      	adds	r3, r7, r4
 8001ca8:	2203      	movs	r2, #3
 8001caa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001cac:	193b      	adds	r3, r7, r4
 8001cae:	2204      	movs	r2, #4
 8001cb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	193a      	adds	r2, r7, r4
 8001cb4:	2390      	movs	r3, #144	@ 0x90
 8001cb6:	05db      	lsls	r3, r3, #23
 8001cb8:	0011      	movs	r1, r2
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f001 f9ce 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cc0:	0021      	movs	r1, r4
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	2280      	movs	r2, #128	@ 0x80
 8001cc6:	0152      	lsls	r2, r2, #5
 8001cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2202      	movs	r2, #2
 8001cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	2204      	movs	r2, #4
 8001ce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	187a      	adds	r2, r7, r1
 8001ce4:	2390      	movs	r3, #144	@ 0x90
 8001ce6:	05db      	lsls	r3, r3, #23
 8001ce8:	0011      	movs	r1, r2
 8001cea:	0018      	movs	r0, r3
 8001cec:	f001 f9b6 	bl	800305c <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001cf0:	46c0      	nop			@ (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b00b      	add	sp, #44	@ 0x2c
 8001cf6:	bd90      	pop	{r4, r7, pc}
 8001cf8:	40006400 	.word	0x40006400
 8001cfc:	40021000 	.word	0x40021000

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	e7fd      	b.n	8001d04 <NMI_Handler+0x4>

08001d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0c:	46c0      	nop			@ (mov r8, r8)
 8001d0e:	e7fd      	b.n	8001d0c <HardFault_Handler+0x4>

08001d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d14:	46c0      	nop			@ (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1e:	46c0      	nop			@ (mov r8, r8)
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 f892 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	46c0      	nop			@ (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d36:	46c0      	nop			@ (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d3c:	4813      	ldr	r0, [pc, #76]	@ (8001d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d3e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d40:	f7ff fff7 	bl	8001d32 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001d44:	4812      	ldr	r0, [pc, #72]	@ (8001d90 <LoopForever+0x6>)
    LDR R1, [R0]
 8001d46:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001d48:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001d4a:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <LoopForever+0xa>)
    CMP R1, R2
 8001d4c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001d4e:	d105      	bne.n	8001d5c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001d50:	4811      	ldr	r0, [pc, #68]	@ (8001d98 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001d52:	4912      	ldr	r1, [pc, #72]	@ (8001d9c <LoopForever+0x12>)
    STR R1, [R0]
 8001d54:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001d56:	4812      	ldr	r0, [pc, #72]	@ (8001da0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001d58:	4912      	ldr	r1, [pc, #72]	@ (8001da4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001d5a:	6001      	str	r1, [r0, #0]

08001d5c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d5c:	4812      	ldr	r0, [pc, #72]	@ (8001da8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001d5e:	4913      	ldr	r1, [pc, #76]	@ (8001dac <LoopForever+0x22>)
  ldr r2, =_sidata
 8001d60:	4a13      	ldr	r2, [pc, #76]	@ (8001db0 <LoopForever+0x26>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a10      	ldr	r2, [pc, #64]	@ (8001db4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001d74:	4c10      	ldr	r4, [pc, #64]	@ (8001db8 <LoopForever+0x2e>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d82:	f001 ffe7 	bl	8003d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d86:	f7ff fc5f 	bl	8001648 <main>

08001d8a <LoopForever>:

LoopForever:
    b LoopForever
 8001d8a:	e7fe      	b.n	8001d8a <LoopForever>
  ldr   r0, =_estack
 8001d8c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001d90:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001d94:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001d98:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001d9c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001da0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001da4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001db0:	08003e88 	.word	0x08003e88
  ldr r2, =_sbss
 8001db4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001db8:	20000150 	.word	0x20000150

08001dbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC1_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <HAL_Init+0x24>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_Init+0x24>)
 8001dca:	2110      	movs	r1, #16
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f809 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd6:	f7ff fec5 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	40022000 	.word	0x40022000

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <HAL_InitTick+0x5c>)
 8001df2:	681c      	ldr	r4, [r3, #0]
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <HAL_InitTick+0x60>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	0019      	movs	r1, r3
 8001dfa:	23fa      	movs	r3, #250	@ 0xfa
 8001dfc:	0098      	lsls	r0, r3, #2
 8001dfe:	f7fe f983 	bl	8000108 <__udivsi3>
 8001e02:	0003      	movs	r3, r0
 8001e04:	0019      	movs	r1, r3
 8001e06:	0020      	movs	r0, r4
 8001e08:	f7fe f97e 	bl	8000108 <__udivsi3>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f001 f917 	bl	8003042 <HAL_SYSTICK_Config>
 8001e14:	1e03      	subs	r3, r0, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e00f      	b.n	8001e3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d80b      	bhi.n	8001e3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	2301      	movs	r3, #1
 8001e26:	425b      	negs	r3, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f001 f8f4 	bl	8003018 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_InitTick+0x64>)
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b003      	add	sp, #12
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	20000018 	.word	0x20000018
 8001e48:	20000020 	.word	0x20000020
 8001e4c:	2000001c 	.word	0x2000001c

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_IncTick+0x1c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	001a      	movs	r2, r3
 8001e5a:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_IncTick+0x20>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	18d2      	adds	r2, r2, r3
 8001e60:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <HAL_IncTick+0x20>)
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	46c0      	nop			@ (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	20000020 	.word	0x20000020
 8001e70:	2000014c 	.word	0x2000014c

08001e74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b02      	ldr	r3, [pc, #8]	@ (8001e84 <HAL_GetTick+0x10>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	2000014c 	.word	0x2000014c

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_GetTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	189b      	adds	r3, r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	f7ff ffe0 	bl	8001e74 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	46c0      	nop			@ (mov r8, r8)
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	20000020 	.word	0x20000020

08001ed0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed8:	230f      	movs	r3, #15
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e125      	b.n	800213a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10a      	bne.n	8001f0c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2234      	movs	r2, #52	@ 0x34
 8001f00:	2100      	movs	r1, #0
 8001f02:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff fe50 	bl	8001bac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f10:	2210      	movs	r2, #16
 8001f12:	4013      	ands	r3, r2
 8001f14:	d000      	beq.n	8001f18 <HAL_ADC_Init+0x48>
 8001f16:	e103      	b.n	8002120 <HAL_ADC_Init+0x250>
 8001f18:	230f      	movs	r3, #15
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d000      	beq.n	8001f24 <HAL_ADC_Init+0x54>
 8001f22:	e0fd      	b.n	8002120 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001f2e:	d000      	beq.n	8001f32 <HAL_ADC_Init+0x62>
 8001f30:	e0f6      	b.n	8002120 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f36:	4a83      	ldr	r2, [pc, #524]	@ (8002144 <HAL_ADC_Init+0x274>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d112      	bne.n	8001f76 <HAL_ADC_Init+0xa6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d009      	beq.n	8001f72 <HAL_ADC_Init+0xa2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	401a      	ands	r2, r3
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Init+0xa6>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_ADC_Init+0xa8>
 8001f76:	2300      	movs	r3, #0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d116      	bne.n	8001faa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2218      	movs	r2, #24
 8001f84:	4393      	bics	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	0899      	lsrs	r1, r3, #2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4964      	ldr	r1, [pc, #400]	@ (8002148 <HAL_ADC_Init+0x278>)
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7e1b      	ldrb	r3, [r3, #24]
 8001fbe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7e5b      	ldrb	r3, [r3, #25]
 8001fc4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fc6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7e9b      	ldrb	r3, [r3, #26]
 8001fcc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001fce:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d002      	beq.n	8001fde <HAL_ADC_Init+0x10e>
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	015b      	lsls	r3, r3, #5
 8001fdc:	e000      	b.n	8001fe0 <HAL_ADC_Init+0x110>
 8001fde:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fe0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001fe6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_Init+0x124>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	e000      	b.n	8001ff6 <HAL_ADC_Init+0x126>
 8001ff4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001ff6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2124      	movs	r1, #36	@ 0x24
 8001ffc:	5c5b      	ldrb	r3, [r3, r1]
 8001ffe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002000:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	4313      	orrs	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7edb      	ldrb	r3, [r3, #27]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d115      	bne.n	800203c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7e9b      	ldrb	r3, [r3, #26]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2280      	movs	r2, #128	@ 0x80
 800201c:	0252      	lsls	r2, r2, #9
 800201e:	4313      	orrs	r3, r2
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	e00b      	b.n	800203c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002028:	2220      	movs	r2, #32
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002034:	2201      	movs	r2, #1
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69da      	ldr	r2, [r3, #28]
 8002040:	23c2      	movs	r3, #194	@ 0xc2
 8002042:	33ff      	adds	r3, #255	@ 0xff
 8002044:	429a      	cmp	r2, r3
 8002046:	d007      	beq.n	8002058 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002050:	4313      	orrs	r3, r2
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68d9      	ldr	r1, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	429a      	cmp	r2, r3
 8002072:	d01b      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d017      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	2b02      	cmp	r3, #2
 8002082:	d013      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002088:	2b03      	cmp	r3, #3
 800208a:	d00f      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002090:	2b04      	cmp	r3, #4
 8002092:	d00b      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002098:	2b05      	cmp	r3, #5
 800209a:	d007      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d003      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	2b07      	cmp	r3, #7
 80020aa:	d112      	bne.n	80020d2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2107      	movs	r1, #7
 80020b8:	438a      	bics	r2, r1
 80020ba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6959      	ldr	r1, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c6:	2207      	movs	r2, #7
 80020c8:	401a      	ands	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	@ (800214c <HAL_ADC_Init+0x27c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d10b      	bne.n	80020fa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ec:	2203      	movs	r2, #3
 80020ee:	4393      	bics	r3, r2
 80020f0:	2201      	movs	r2, #1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020f8:	e01c      	b.n	8002134 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fe:	2212      	movs	r2, #18
 8002100:	4393      	bics	r3, r2
 8002102:	2210      	movs	r2, #16
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210e:	2201      	movs	r2, #1
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002116:	230f      	movs	r3, #15
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800211e:	e009      	b.n	8002134 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002124:	2210      	movs	r2, #16
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 800212c:	230f      	movs	r3, #15
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002134:	230f      	movs	r3, #15
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	781b      	ldrb	r3, [r3, #0]
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b004      	add	sp, #16
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	fffffefd 	.word	0xfffffefd
 8002148:	fffe0219 	.word	0xfffe0219
 800214c:	833fffe7 	.word	0x833fffe7

08002150 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	230f      	movs	r3, #15
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2204      	movs	r2, #4
 8002168:	4013      	ands	r3, r2
 800216a:	d138      	bne.n	80021de <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2234      	movs	r2, #52	@ 0x34
 8002170:	5c9b      	ldrb	r3, [r3, r2]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_ADC_Start+0x2a>
 8002176:	2302      	movs	r3, #2
 8002178:	e038      	b.n	80021ec <HAL_ADC_Start+0x9c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2234      	movs	r2, #52	@ 0x34
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7e5b      	ldrb	r3, [r3, #25]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d007      	beq.n	800219a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800218a:	230f      	movs	r3, #15
 800218c:	18fc      	adds	r4, r7, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	0018      	movs	r0, r3
 8002192:	f000 fa23 	bl	80025dc <ADC_Enable>
 8002196:	0003      	movs	r3, r0
 8002198:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800219a:	230f      	movs	r3, #15
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d120      	bne.n	80021e6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a8:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <HAL_ADC_Start+0xa4>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	2280      	movs	r2, #128	@ 0x80
 80021ae:	0052      	lsls	r2, r2, #1
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2234      	movs	r2, #52	@ 0x34
 80021c0:	2100      	movs	r1, #0
 80021c2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	221c      	movs	r2, #28
 80021ca:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2104      	movs	r1, #4
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e003      	b.n	80021e6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021de:	230f      	movs	r3, #15
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021e6:	230f      	movs	r3, #15
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	781b      	ldrb	r3, [r3, #0]
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b005      	add	sp, #20
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	fffff0fe 	.word	0xfffff0fe

080021f8 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002200:	230f      	movs	r3, #15
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2234      	movs	r2, #52	@ 0x34
 800220c:	5c9b      	ldrb	r3, [r3, r2]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_ADC_Stop+0x1e>
 8002212:	2302      	movs	r3, #2
 8002214:	e029      	b.n	800226a <HAL_ADC_Stop+0x72>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2234      	movs	r2, #52	@ 0x34
 800221a:	2101      	movs	r1, #1
 800221c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800221e:	250f      	movs	r5, #15
 8002220:	197c      	adds	r4, r7, r5
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 face 	bl	80027c6 <ADC_ConversionStop>
 800222a:	0003      	movs	r3, r0
 800222c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800222e:	197b      	adds	r3, r7, r5
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d112      	bne.n	800225c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002236:	197c      	adds	r4, r7, r5
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0018      	movs	r0, r3
 800223c:	f000 fa52 	bl	80026e4 <ADC_Disable>
 8002240:	0003      	movs	r3, r0
 8002242:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002244:	197b      	adds	r3, r7, r5
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002250:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <HAL_ADC_Stop+0x7c>)
 8002252:	4013      	ands	r3, r2
 8002254:	2201      	movs	r2, #1
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2234      	movs	r2, #52	@ 0x34
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002264:	230f      	movs	r3, #15
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	781b      	ldrb	r3, [r3, #0]
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b004      	add	sp, #16
 8002270:	bdb0      	pop	{r4, r5, r7, pc}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	fffffefe 	.word	0xfffffefe

08002278 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	2b08      	cmp	r3, #8
 8002288:	d102      	bne.n	8002290 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800228a:	2308      	movs	r3, #8
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	e014      	b.n	80022ba <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	4013      	ands	r3, r2
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10b      	bne.n	80022b6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a2:	2220      	movs	r2, #32
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2234      	movs	r2, #52	@ 0x34
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e071      	b.n	800239a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80022b6:	230c      	movs	r3, #12
 80022b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80022ba:	f7ff fddb 	bl	8001e74 <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80022c2:	e01f      	b.n	8002304 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	d01c      	beq.n	8002304 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_ADC_PollForConversion+0x68>
 80022d0:	f7ff fdd0 	bl	8001e74 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d211      	bcs.n	8002304 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4013      	ands	r3, r2
 80022ea:	d10b      	bne.n	8002304 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f0:	2204      	movs	r2, #4
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2234      	movs	r2, #52	@ 0x34
 80022fc:	2100      	movs	r1, #0
 80022fe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e04a      	b.n	800239a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4013      	ands	r3, r2
 800230e:	d0d9      	beq.n	80022c4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	23c0      	movs	r3, #192	@ 0xc0
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	4013      	ands	r3, r2
 800232a:	d12d      	bne.n	8002388 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002330:	2b00      	cmp	r3, #0
 8002332:	d129      	bne.n	8002388 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2208      	movs	r2, #8
 800233c:	4013      	ands	r3, r2
 800233e:	2b08      	cmp	r3, #8
 8002340:	d122      	bne.n	8002388 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2204      	movs	r2, #4
 800234a:	4013      	ands	r3, r2
 800234c:	d110      	bne.n	8002370 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	210c      	movs	r1, #12
 800235a:	438a      	bics	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002362:	4a10      	ldr	r2, [pc, #64]	@ (80023a4 <HAL_ADC_PollForConversion+0x12c>)
 8002364:	4013      	ands	r3, r2
 8002366:	2201      	movs	r2, #1
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	639a      	str	r2, [r3, #56]	@ 0x38
 800236e:	e00b      	b.n	8002388 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002374:	2220      	movs	r2, #32
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002380:	2201      	movs	r2, #1
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7e1b      	ldrb	r3, [r3, #24]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d103      	bne.n	8002398 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	220c      	movs	r2, #12
 8002396:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	fffffefe 	.word	0xfffffefe

080023a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b002      	add	sp, #8
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ca:	230f      	movs	r3, #15
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023da:	2380      	movs	r3, #128	@ 0x80
 80023dc:	055b      	lsls	r3, r3, #21
 80023de:	429a      	cmp	r2, r3
 80023e0:	d011      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x46>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d00d      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x46>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d009      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x46>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d005      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x46>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d001      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x46>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2234      	movs	r2, #52	@ 0x34
 800240a:	5c9b      	ldrb	r3, [r3, r2]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x54>
 8002410:	2302      	movs	r3, #2
 8002412:	e0d0      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x1f6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2234      	movs	r2, #52	@ 0x34
 8002418:	2101      	movs	r1, #1
 800241a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2204      	movs	r2, #4
 8002424:	4013      	ands	r3, r2
 8002426:	d000      	beq.n	800242a <HAL_ADC_ConfigChannel+0x6a>
 8002428:	e0b4      	b.n	8002594 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a64      	ldr	r2, [pc, #400]	@ (80025c0 <HAL_ADC_ConfigChannel+0x200>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d100      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x76>
 8002434:	e082      	b.n	800253c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2201      	movs	r2, #1
 8002442:	409a      	lsls	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	055b      	lsls	r3, r3, #21
 8002454:	429a      	cmp	r2, r3
 8002456:	d037      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x108>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d033      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x108>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002464:	2b02      	cmp	r3, #2
 8002466:	d02f      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x108>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	2b03      	cmp	r3, #3
 800246e:	d02b      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x108>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	2b04      	cmp	r3, #4
 8002476:	d027      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x108>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247c:	2b05      	cmp	r3, #5
 800247e:	d023      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x108>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	2b06      	cmp	r3, #6
 8002486:	d01f      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x108>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	2b07      	cmp	r3, #7
 800248e:	d01b      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	2107      	movs	r1, #7
 800249c:	400b      	ands	r3, r1
 800249e:	429a      	cmp	r2, r3
 80024a0:	d012      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2107      	movs	r1, #7
 80024ae:	438a      	bics	r2, r1
 80024b0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6959      	ldr	r1, [r3, #20]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2207      	movs	r2, #7
 80024be:	401a      	ands	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d007      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x120>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b11      	cmp	r3, #17
 80024d6:	d003      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x120>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b12      	cmp	r3, #18
 80024de:	d163      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80024e0:	4b38      	ldr	r3, [pc, #224]	@ (80025c4 <HAL_ADC_ConfigChannel+0x204>)
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d009      	beq.n	8002500 <HAL_ADC_ConfigChannel+0x140>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b11      	cmp	r3, #17
 80024f2:	d102      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x13a>
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	03db      	lsls	r3, r3, #15
 80024f8:	e004      	b.n	8002504 <HAL_ADC_ConfigChannel+0x144>
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	045b      	lsls	r3, r3, #17
 80024fe:	e001      	b.n	8002504 <HAL_ADC_ConfigChannel+0x144>
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	041b      	lsls	r3, r3, #16
 8002504:	4a2f      	ldr	r2, [pc, #188]	@ (80025c4 <HAL_ADC_ConfigChannel+0x204>)
 8002506:	430b      	orrs	r3, r1
 8002508:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b10      	cmp	r3, #16
 8002510:	d14a      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002512:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <HAL_ADC_ConfigChannel+0x208>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	492d      	ldr	r1, [pc, #180]	@ (80025cc <HAL_ADC_ConfigChannel+0x20c>)
 8002518:	0018      	movs	r0, r3
 800251a:	f7fd fdf5 	bl	8000108 <__udivsi3>
 800251e:	0003      	movs	r3, r0
 8002520:	001a      	movs	r2, r3
 8002522:	0013      	movs	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	189b      	adds	r3, r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800252c:	e002      	b.n	8002534 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3b01      	subs	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f9      	bne.n	800252e <HAL_ADC_ConfigChannel+0x16e>
 800253a:	e035      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	4099      	lsls	r1, r3
 800254a:	000b      	movs	r3, r1
 800254c:	43d9      	mvns	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	400a      	ands	r2, r1
 8002554:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b10      	cmp	r3, #16
 800255c:	d007      	beq.n	800256e <HAL_ADC_ConfigChannel+0x1ae>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b11      	cmp	r3, #17
 8002564:	d003      	beq.n	800256e <HAL_ADC_ConfigChannel+0x1ae>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b12      	cmp	r3, #18
 800256c:	d11c      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_ADC_ConfigChannel+0x204>)
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b10      	cmp	r3, #16
 8002578:	d007      	beq.n	800258a <HAL_ADC_ConfigChannel+0x1ca>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b11      	cmp	r3, #17
 8002580:	d101      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x1c6>
 8002582:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <HAL_ADC_ConfigChannel+0x210>)
 8002584:	e002      	b.n	800258c <HAL_ADC_ConfigChannel+0x1cc>
 8002586:	4b13      	ldr	r3, [pc, #76]	@ (80025d4 <HAL_ADC_ConfigChannel+0x214>)
 8002588:	e000      	b.n	800258c <HAL_ADC_ConfigChannel+0x1cc>
 800258a:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <HAL_ADC_ConfigChannel+0x218>)
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <HAL_ADC_ConfigChannel+0x204>)
 800258e:	400b      	ands	r3, r1
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e009      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002598:	2220      	movs	r2, #32
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80025a0:	230f      	movs	r3, #15
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2234      	movs	r2, #52	@ 0x34
 80025ac:	2100      	movs	r1, #0
 80025ae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80025b0:	230f      	movs	r3, #15
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	781b      	ldrb	r3, [r3, #0]
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b004      	add	sp, #16
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			@ (mov r8, r8)
 80025c0:	00001001 	.word	0x00001001
 80025c4:	40012708 	.word	0x40012708
 80025c8:	20000018 	.word	0x20000018
 80025cc:	000f4240 	.word	0x000f4240
 80025d0:	ffbfffff 	.word	0xffbfffff
 80025d4:	feffffff 	.word	0xfeffffff
 80025d8:	ff7fffff 	.word	0xff7fffff

080025dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2203      	movs	r2, #3
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d112      	bne.n	8002620 <ADC_Enable+0x44>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2201      	movs	r2, #1
 8002602:	4013      	ands	r3, r2
 8002604:	2b01      	cmp	r3, #1
 8002606:	d009      	beq.n	800261c <ADC_Enable+0x40>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	401a      	ands	r2, r3
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	429a      	cmp	r2, r3
 800261a:	d101      	bne.n	8002620 <ADC_Enable+0x44>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <ADC_Enable+0x46>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d152      	bne.n	80026cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a2a      	ldr	r2, [pc, #168]	@ (80026d8 <ADC_Enable+0xfc>)
 800262e:	4013      	ands	r3, r2
 8002630:	d00d      	beq.n	800264e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002636:	2210      	movs	r2, #16
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002642:	2201      	movs	r2, #1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e03f      	b.n	80026ce <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800265e:	4b1f      	ldr	r3, [pc, #124]	@ (80026dc <ADC_Enable+0x100>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	491f      	ldr	r1, [pc, #124]	@ (80026e0 <ADC_Enable+0x104>)
 8002664:	0018      	movs	r0, r3
 8002666:	f7fd fd4f 	bl	8000108 <__udivsi3>
 800266a:	0003      	movs	r3, r0
 800266c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800266e:	e002      	b.n	8002676 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3b01      	subs	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f9      	bne.n	8002670 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800267c:	f7ff fbfa 	bl	8001e74 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002684:	e01b      	b.n	80026be <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002686:	f7ff fbf5 	bl	8001e74 <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d914      	bls.n	80026be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2201      	movs	r2, #1
 800269c:	4013      	ands	r3, r2
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d00d      	beq.n	80026be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a6:	2210      	movs	r2, #16
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b2:	2201      	movs	r2, #1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e007      	b.n	80026ce <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d1dc      	bne.n	8002686 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b004      	add	sp, #16
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	80000017 	.word	0x80000017
 80026dc:	20000018 	.word	0x20000018
 80026e0:	000f4240 	.word	0x000f4240

080026e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2203      	movs	r2, #3
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d112      	bne.n	8002724 <ADC_Disable+0x40>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2201      	movs	r2, #1
 8002706:	4013      	ands	r3, r2
 8002708:	2b01      	cmp	r3, #1
 800270a:	d009      	beq.n	8002720 <ADC_Disable+0x3c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	2380      	movs	r3, #128	@ 0x80
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	401a      	ands	r2, r3
 8002718:	2380      	movs	r3, #128	@ 0x80
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	429a      	cmp	r2, r3
 800271e:	d101      	bne.n	8002724 <ADC_Disable+0x40>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <ADC_Disable+0x42>
 8002724:	2300      	movs	r3, #0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d048      	beq.n	80027bc <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2205      	movs	r2, #5
 8002732:	4013      	ands	r3, r2
 8002734:	2b01      	cmp	r3, #1
 8002736:	d110      	bne.n	800275a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2102      	movs	r1, #2
 8002744:	430a      	orrs	r2, r1
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2203      	movs	r2, #3
 800274e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002750:	f7ff fb90 	bl	8001e74 <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002758:	e029      	b.n	80027ae <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275e:	2210      	movs	r2, #16
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276a:	2201      	movs	r2, #1
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e023      	b.n	80027be <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002776:	f7ff fb7d 	bl	8001e74 <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d914      	bls.n	80027ae <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2201      	movs	r2, #1
 800278c:	4013      	ands	r3, r2
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10d      	bne.n	80027ae <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002796:	2210      	movs	r2, #16
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a2:	2201      	movs	r2, #1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e007      	b.n	80027be <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2201      	movs	r2, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d0dc      	beq.n	8002776 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b004      	add	sp, #16
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2204      	movs	r2, #4
 80027da:	4013      	ands	r3, r2
 80027dc:	d03a      	beq.n	8002854 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2204      	movs	r2, #4
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d10d      	bne.n	8002808 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80027f6:	d107      	bne.n	8002808 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2110      	movs	r1, #16
 8002804:	430a      	orrs	r2, r1
 8002806:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002808:	f7ff fb34 	bl	8001e74 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002810:	e01a      	b.n	8002848 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002812:	f7ff fb2f 	bl	8001e74 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d913      	bls.n	8002848 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2204      	movs	r2, #4
 8002828:	4013      	ands	r3, r2
 800282a:	d00d      	beq.n	8002848 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002830:	2210      	movs	r2, #16
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283c:	2201      	movs	r2, #1
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e006      	b.n	8002856 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2204      	movs	r2, #4
 8002850:	4013      	ands	r3, r2
 8002852:	d1de      	bne.n	8002812 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0f0      	b.n	8002a52 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	5c9b      	ldrb	r3, [r3, r2]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0018      	movs	r0, r3
 8002880:	f7ff f9da 	bl	8001c38 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2101      	movs	r1, #1
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002894:	f7ff faee 	bl	8001e74 <HAL_GetTick>
 8002898:	0003      	movs	r3, r0
 800289a:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800289c:	e013      	b.n	80028c6 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800289e:	f7ff fae9 	bl	8001e74 <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b0a      	cmp	r3, #10
 80028aa:	d90c      	bls.n	80028c6 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	2280      	movs	r2, #128	@ 0x80
 80028b2:	0292      	lsls	r2, r2, #10
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	2105      	movs	r1, #5
 80028c0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0c5      	b.n	8002a52 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	4013      	ands	r3, r2
 80028d0:	d0e5      	beq.n	800289e <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2102      	movs	r1, #2
 80028de:	438a      	bics	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e2:	f7ff fac7 	bl	8001e74 <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028ea:	e013      	b.n	8002914 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028ec:	f7ff fac2 	bl	8001e74 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b0a      	cmp	r3, #10
 80028f8:	d90c      	bls.n	8002914 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	2280      	movs	r2, #128	@ 0x80
 8002900:	0292      	lsls	r2, r2, #10
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	2105      	movs	r1, #5
 800290e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e09e      	b.n	8002a52 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	4013      	ands	r3, r2
 800291e:	d1e5      	bne.n	80028ec <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7e1b      	ldrb	r3, [r3, #24]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d108      	bne.n	800293a <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2180      	movs	r1, #128	@ 0x80
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e007      	b.n	800294a <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2180      	movs	r1, #128	@ 0x80
 8002946:	438a      	bics	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7e5b      	ldrb	r3, [r3, #25]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d108      	bne.n	8002964 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2140      	movs	r1, #64	@ 0x40
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e007      	b.n	8002974 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2140      	movs	r1, #64	@ 0x40
 8002970:	438a      	bics	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7e9b      	ldrb	r3, [r3, #26]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d108      	bne.n	800298e <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2120      	movs	r1, #32
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e007      	b.n	800299e <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2120      	movs	r1, #32
 800299a:	438a      	bics	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7edb      	ldrb	r3, [r3, #27]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d108      	bne.n	80029b8 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2110      	movs	r1, #16
 80029b2:	438a      	bics	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e007      	b.n	80029c8 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2110      	movs	r1, #16
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7f1b      	ldrb	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d108      	bne.n	80029e2 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2108      	movs	r1, #8
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e007      	b.n	80029f2 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2108      	movs	r1, #8
 80029ee:	438a      	bics	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7f5b      	ldrb	r3, [r3, #29]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d108      	bne.n	8002a0c <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2104      	movs	r1, #4
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e007      	b.n	8002a1c <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2104      	movs	r1, #4
 8002a18:	438a      	bics	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	0011      	movs	r1, r2
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	1e5a      	subs	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	0018      	movs	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b004      	add	sp, #16
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a6a:	2013      	movs	r0, #19
 8002a6c:	183b      	adds	r3, r7, r0
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	2120      	movs	r1, #32
 8002a72:	5c52      	ldrb	r2, [r2, r1]
 8002a74:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a76:	0002      	movs	r2, r0
 8002a78:	18bb      	adds	r3, r7, r2
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d004      	beq.n	8002a8a <HAL_CAN_ConfigFilter+0x30>
 8002a80:	18bb      	adds	r3, r7, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d000      	beq.n	8002a8a <HAL_CAN_ConfigFilter+0x30>
 8002a88:	e0cd      	b.n	8002c26 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	2380      	movs	r3, #128	@ 0x80
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	58d3      	ldr	r3, [r2, r3]
 8002a92:	2201      	movs	r2, #1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	0011      	movs	r1, r2
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	221f      	movs	r2, #31
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	0013      	movs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	2387      	movs	r3, #135	@ 0x87
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	58d3      	ldr	r3, [r2, r3]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	43d2      	mvns	r2, r2
 8002abc:	401a      	ands	r2, r3
 8002abe:	0011      	movs	r1, r2
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	2387      	movs	r3, #135	@ 0x87
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d129      	bne.n	8002b24 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	2383      	movs	r3, #131	@ 0x83
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	58d3      	ldr	r3, [r2, r3]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	43d2      	mvns	r2, r2
 8002adc:	401a      	ands	r2, r3
 8002ade:	0011      	movs	r1, r2
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	2383      	movs	r3, #131	@ 0x83
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002afa:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3248      	adds	r2, #72	@ 0x48
 8002b00:	00d2      	lsls	r2, r2, #3
 8002b02:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	041b      	lsls	r3, r3, #16
 8002b10:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b16:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b18:	6979      	ldr	r1, [r7, #20]
 8002b1a:	3348      	adds	r3, #72	@ 0x48
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	18cb      	adds	r3, r1, r3
 8002b20:	3304      	adds	r3, #4
 8002b22:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d128      	bne.n	8002b7e <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	2383      	movs	r3, #131	@ 0x83
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	58d2      	ldr	r2, [r2, r3]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	0011      	movs	r1, r2
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	2383      	movs	r3, #131	@ 0x83
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b54:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	3248      	adds	r2, #72	@ 0x48
 8002b5a:	00d2      	lsls	r2, r2, #3
 8002b5c:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	041b      	lsls	r3, r3, #16
 8002b6a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b72:	6979      	ldr	r1, [r7, #20]
 8002b74:	3348      	adds	r3, #72	@ 0x48
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	18cb      	adds	r3, r1, r3
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10c      	bne.n	8002ba0 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	2381      	movs	r3, #129	@ 0x81
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	58d3      	ldr	r3, [r2, r3]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	43d2      	mvns	r2, r2
 8002b92:	401a      	ands	r2, r3
 8002b94:	0011      	movs	r1, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	2381      	movs	r3, #129	@ 0x81
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	50d1      	str	r1, [r2, r3]
 8002b9e:	e00a      	b.n	8002bb6 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	2381      	movs	r3, #129	@ 0x81
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	58d2      	ldr	r2, [r2, r3]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	0011      	movs	r1, r2
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	2381      	movs	r3, #129	@ 0x81
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	2385      	movs	r3, #133	@ 0x85
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	58d3      	ldr	r3, [r2, r3]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	43d2      	mvns	r2, r2
 8002bca:	401a      	ands	r2, r3
 8002bcc:	0011      	movs	r1, r2
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	2385      	movs	r3, #133	@ 0x85
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	50d1      	str	r1, [r2, r3]
 8002bd6:	e00a      	b.n	8002bee <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	2385      	movs	r3, #133	@ 0x85
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	58d2      	ldr	r2, [r2, r3]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	0011      	movs	r1, r2
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	2385      	movs	r3, #133	@ 0x85
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10a      	bne.n	8002c0c <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	2387      	movs	r3, #135	@ 0x87
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	58d2      	ldr	r2, [r2, r3]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	0011      	movs	r1, r2
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	2387      	movs	r3, #135	@ 0x87
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	58d3      	ldr	r3, [r2, r3]
 8002c14:	2201      	movs	r2, #1
 8002c16:	4393      	bics	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e007      	b.n	8002c36 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	2280      	movs	r2, #128	@ 0x80
 8002c2c:	02d2      	lsls	r2, r2, #11
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
  }
}
 8002c36:	0018      	movs	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b006      	add	sp, #24
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d12f      	bne.n	8002cb2 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	2102      	movs	r1, #2
 8002c58:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	438a      	bics	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c6a:	f7ff f903 	bl	8001e74 <HAL_GetTick>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c72:	e013      	b.n	8002c9c <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c74:	f7ff f8fe 	bl	8001e74 <HAL_GetTick>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b0a      	cmp	r3, #10
 8002c80:	d90c      	bls.n	8002c9c <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	2280      	movs	r2, #128	@ 0x80
 8002c88:	0292      	lsls	r2, r2, #10
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	2105      	movs	r1, #5
 8002c96:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e012      	b.n	8002cc2 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d1e5      	bne.n	8002c74 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e007      	b.n	8002cc2 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	0312      	lsls	r2, r2, #12
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
  }
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b004      	add	sp, #16
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b088      	sub	sp, #32
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd8:	201f      	movs	r0, #31
 8002cda:	183b      	adds	r3, r7, r0
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	2120      	movs	r1, #32
 8002ce0:	5c52      	ldrb	r2, [r2, r1]
 8002ce2:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cec:	183b      	adds	r3, r7, r0
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d004      	beq.n	8002cfe <HAL_CAN_AddTxMessage+0x34>
 8002cf4:	183b      	adds	r3, r7, r0
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d000      	beq.n	8002cfe <HAL_CAN_AddTxMessage+0x34>
 8002cfc:	e0ab      	b.n	8002e56 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	04db      	lsls	r3, r3, #19
 8002d04:	4013      	ands	r3, r2
 8002d06:	d10a      	bne.n	8002d1e <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d10:	d105      	bne.n	8002d1e <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	055b      	lsls	r3, r3, #21
 8002d18:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d1a:	d100      	bne.n	8002d1e <HAL_CAN_AddTxMessage+0x54>
 8002d1c:	e092      	b.n	8002e44 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	0e1b      	lsrs	r3, r3, #24
 8002d22:	2203      	movs	r2, #3
 8002d24:	4013      	ands	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d28:	2201      	movs	r2, #1
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	3218      	adds	r2, #24
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	50d1      	str	r1, [r2, r3]
 8002d52:	e00f      	b.n	8002d74 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002d6a:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	3218      	adds	r2, #24
 8002d70:	0112      	lsls	r2, r2, #4
 8002d72:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3318      	adds	r3, #24
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	18cb      	adds	r3, r1, r3
 8002d84:	3304      	adds	r3, #4
 8002d86:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	7d1b      	ldrb	r3, [r3, #20]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d112      	bne.n	8002db6 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3318      	adds	r3, #24
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	18d3      	adds	r3, r2, r3
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	431a      	orrs	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	3318      	adds	r3, #24
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	18cb      	adds	r3, r1, r3
 8002db2:	3304      	adds	r3, #4
 8002db4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3307      	adds	r3, #7
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	061a      	lsls	r2, r3, #24
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3306      	adds	r3, #6
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3305      	adds	r3, #5
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	0019      	movs	r1, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	6979      	ldr	r1, [r7, #20]
 8002de2:	23c6      	movs	r3, #198	@ 0xc6
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	0109      	lsls	r1, r1, #4
 8002de8:	1841      	adds	r1, r0, r1
 8002dea:	18cb      	adds	r3, r1, r3
 8002dec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3303      	adds	r3, #3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	061a      	lsls	r2, r3, #24
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3302      	adds	r3, #2
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3301      	adds	r3, #1
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	0019      	movs	r1, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	23c4      	movs	r3, #196	@ 0xc4
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	0109      	lsls	r1, r1, #4
 8002e1e:	1841      	adds	r1, r0, r1
 8002e20:	18cb      	adds	r3, r1, r3
 8002e22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	3218      	adds	r2, #24
 8002e2c:	0112      	lsls	r2, r2, #4
 8002e2e:	58d2      	ldr	r2, [r2, r3]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2101      	movs	r1, #1
 8002e36:	4311      	orrs	r1, r2
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	3218      	adds	r2, #24
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e010      	b.n	8002e66 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	2280      	movs	r2, #128	@ 0x80
 8002e4a:	0392      	lsls	r2, r2, #14
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e007      	b.n	8002e66 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	2280      	movs	r2, #128	@ 0x80
 8002e5c:	02d2      	lsls	r2, r2, #11
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
  }
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b008      	add	sp, #32
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e7a:	200b      	movs	r0, #11
 8002e7c:	183b      	adds	r3, r7, r0
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	2120      	movs	r1, #32
 8002e82:	5c52      	ldrb	r2, [r2, r1]
 8002e84:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e86:	0002      	movs	r2, r0
 8002e88:	18bb      	adds	r3, r7, r2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d003      	beq.n	8002e98 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8002e90:	18bb      	adds	r3, r7, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d11d      	bne.n	8002ed4 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	04db      	lsls	r3, r3, #19
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d002      	beq.n	8002eac <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	051b      	lsls	r3, r3, #20
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d002      	beq.n	8002ec0 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	055b      	lsls	r3, r3, #21
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d002      	beq.n	8002ed4 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b002      	add	sp, #8
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	0002      	movs	r2, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	1dfb      	adds	r3, r7, #7
 8002f00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	1dfb      	adds	r3, r7, #7
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f08:	d828      	bhi.n	8002f5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8002fc8 <__NVIC_SetPriority+0xd4>)
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	33c0      	adds	r3, #192	@ 0xc0
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	589b      	ldr	r3, [r3, r2]
 8002f1a:	1dfa      	adds	r2, r7, #7
 8002f1c:	7812      	ldrb	r2, [r2, #0]
 8002f1e:	0011      	movs	r1, r2
 8002f20:	2203      	movs	r2, #3
 8002f22:	400a      	ands	r2, r1
 8002f24:	00d2      	lsls	r2, r2, #3
 8002f26:	21ff      	movs	r1, #255	@ 0xff
 8002f28:	4091      	lsls	r1, r2
 8002f2a:	000a      	movs	r2, r1
 8002f2c:	43d2      	mvns	r2, r2
 8002f2e:	401a      	ands	r2, r3
 8002f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	019b      	lsls	r3, r3, #6
 8002f36:	22ff      	movs	r2, #255	@ 0xff
 8002f38:	401a      	ands	r2, r3
 8002f3a:	1dfb      	adds	r3, r7, #7
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	2303      	movs	r3, #3
 8002f42:	4003      	ands	r3, r0
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f48:	481f      	ldr	r0, [pc, #124]	@ (8002fc8 <__NVIC_SetPriority+0xd4>)
 8002f4a:	1dfb      	adds	r3, r7, #7
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	430a      	orrs	r2, r1
 8002f54:	33c0      	adds	r3, #192	@ 0xc0
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f5a:	e031      	b.n	8002fc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fcc <__NVIC_SetPriority+0xd8>)
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	0019      	movs	r1, r3
 8002f64:	230f      	movs	r3, #15
 8002f66:	400b      	ands	r3, r1
 8002f68:	3b08      	subs	r3, #8
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3306      	adds	r3, #6
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	18d3      	adds	r3, r2, r3
 8002f72:	3304      	adds	r3, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1dfa      	adds	r2, r7, #7
 8002f78:	7812      	ldrb	r2, [r2, #0]
 8002f7a:	0011      	movs	r1, r2
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	400a      	ands	r2, r1
 8002f80:	00d2      	lsls	r2, r2, #3
 8002f82:	21ff      	movs	r1, #255	@ 0xff
 8002f84:	4091      	lsls	r1, r2
 8002f86:	000a      	movs	r2, r1
 8002f88:	43d2      	mvns	r2, r2
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	22ff      	movs	r2, #255	@ 0xff
 8002f94:	401a      	ands	r2, r3
 8002f96:	1dfb      	adds	r3, r7, #7
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	4003      	ands	r3, r0
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fa4:	4809      	ldr	r0, [pc, #36]	@ (8002fcc <__NVIC_SetPriority+0xd8>)
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	001c      	movs	r4, r3
 8002fac:	230f      	movs	r3, #15
 8002fae:	4023      	ands	r3, r4
 8002fb0:	3b08      	subs	r3, #8
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	3306      	adds	r3, #6
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	18c3      	adds	r3, r0, r3
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	601a      	str	r2, [r3, #0]
}
 8002fc0:	46c0      	nop			@ (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b003      	add	sp, #12
 8002fc6:	bd90      	pop	{r4, r7, pc}
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	045b      	lsls	r3, r3, #17
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d301      	bcc.n	8002fe8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e010      	b.n	800300a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <SysTick_Config+0x44>)
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	3a01      	subs	r2, #1
 8002fee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	425b      	negs	r3, r3
 8002ff4:	2103      	movs	r1, #3
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7ff ff7c 	bl	8002ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <SysTick_Config+0x44>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003002:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <SysTick_Config+0x44>)
 8003004:	2207      	movs	r2, #7
 8003006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003008:	2300      	movs	r3, #0
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	b002      	add	sp, #8
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	e000e010 	.word	0xe000e010

08003018 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	210f      	movs	r1, #15
 8003024:	187b      	adds	r3, r7, r1
 8003026:	1c02      	adds	r2, r0, #0
 8003028:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	187b      	adds	r3, r7, r1
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b25b      	sxtb	r3, r3
 8003032:	0011      	movs	r1, r2
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff ff5d 	bl	8002ef4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff ffbf 	bl	8002fd0 <SysTick_Config>
 8003052:	0003      	movs	r3, r0
}
 8003054:	0018      	movs	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306a:	e149      	b.n	8003300 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4091      	lsls	r1, r2
 8003076:	000a      	movs	r2, r1
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d100      	bne.n	8003084 <HAL_GPIO_Init+0x28>
 8003082:	e13a      	b.n	80032fa <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2203      	movs	r2, #3
 800308a:	4013      	ands	r3, r2
 800308c:	2b01      	cmp	r3, #1
 800308e:	d005      	beq.n	800309c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2203      	movs	r2, #3
 8003096:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003098:	2b02      	cmp	r3, #2
 800309a:	d130      	bne.n	80030fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	409a      	lsls	r2, r3
 80030aa:	0013      	movs	r3, r2
 80030ac:	43da      	mvns	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	409a      	lsls	r2, r3
 80030be:	0013      	movs	r3, r2
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d2:	2201      	movs	r2, #1
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
 80030d8:	0013      	movs	r3, r2
 80030da:	43da      	mvns	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	2201      	movs	r2, #1
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	409a      	lsls	r2, r3
 80030f0:	0013      	movs	r3, r2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2203      	movs	r2, #3
 8003104:	4013      	ands	r3, r2
 8003106:	2b03      	cmp	r3, #3
 8003108:	d017      	beq.n	800313a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	409a      	lsls	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	43da      	mvns	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	409a      	lsls	r2, r3
 800312c:	0013      	movs	r3, r2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2203      	movs	r2, #3
 8003140:	4013      	ands	r3, r2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d123      	bne.n	800318e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	08da      	lsrs	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3208      	adds	r2, #8
 800314e:	0092      	lsls	r2, r2, #2
 8003150:	58d3      	ldr	r3, [r2, r3]
 8003152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2207      	movs	r2, #7
 8003158:	4013      	ands	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	409a      	lsls	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	43da      	mvns	r2, r3
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2107      	movs	r1, #7
 8003172:	400b      	ands	r3, r1
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	409a      	lsls	r2, r3
 8003178:	0013      	movs	r3, r2
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	08da      	lsrs	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3208      	adds	r2, #8
 8003188:	0092      	lsls	r2, r2, #2
 800318a:	6939      	ldr	r1, [r7, #16]
 800318c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	409a      	lsls	r2, r3
 800319c:	0013      	movs	r3, r2
 800319e:	43da      	mvns	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2203      	movs	r2, #3
 80031ac:	401a      	ands	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	409a      	lsls	r2, r3
 80031b4:	0013      	movs	r3, r2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	23c0      	movs	r3, #192	@ 0xc0
 80031c8:	029b      	lsls	r3, r3, #10
 80031ca:	4013      	ands	r3, r2
 80031cc:	d100      	bne.n	80031d0 <HAL_GPIO_Init+0x174>
 80031ce:	e094      	b.n	80032fa <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d0:	4b51      	ldr	r3, [pc, #324]	@ (8003318 <HAL_GPIO_Init+0x2bc>)
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	4b50      	ldr	r3, [pc, #320]	@ (8003318 <HAL_GPIO_Init+0x2bc>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	430a      	orrs	r2, r1
 80031da:	619a      	str	r2, [r3, #24]
 80031dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003318 <HAL_GPIO_Init+0x2bc>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2201      	movs	r2, #1
 80031e2:	4013      	ands	r3, r2
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031e8:	4a4c      	ldr	r2, [pc, #304]	@ (800331c <HAL_GPIO_Init+0x2c0>)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	089b      	lsrs	r3, r3, #2
 80031ee:	3302      	adds	r3, #2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	589b      	ldr	r3, [r3, r2]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2203      	movs	r2, #3
 80031fa:	4013      	ands	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	409a      	lsls	r2, r3
 8003202:	0013      	movs	r3, r2
 8003204:	43da      	mvns	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	2390      	movs	r3, #144	@ 0x90
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	429a      	cmp	r2, r3
 8003214:	d00d      	beq.n	8003232 <HAL_GPIO_Init+0x1d6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a41      	ldr	r2, [pc, #260]	@ (8003320 <HAL_GPIO_Init+0x2c4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <HAL_GPIO_Init+0x1d2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a40      	ldr	r2, [pc, #256]	@ (8003324 <HAL_GPIO_Init+0x2c8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_GPIO_Init+0x1ce>
 8003226:	2302      	movs	r3, #2
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x1d8>
 800322a:	2305      	movs	r3, #5
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x1d8>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x1d8>
 8003232:	2300      	movs	r3, #0
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	2103      	movs	r1, #3
 8003238:	400a      	ands	r2, r1
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003244:	4935      	ldr	r1, [pc, #212]	@ (800331c <HAL_GPIO_Init+0x2c0>)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003252:	4b35      	ldr	r3, [pc, #212]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43da      	mvns	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	035b      	lsls	r3, r3, #13
 800326a:	4013      	ands	r3, r2
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003276:	4b2c      	ldr	r3, [pc, #176]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800327c:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43da      	mvns	r2, r3
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	039b      	lsls	r3, r3, #14
 8003294:	4013      	ands	r3, r2
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032a0:	4b21      	ldr	r3, [pc, #132]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80032a6:	4b20      	ldr	r3, [pc, #128]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	43da      	mvns	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	2380      	movs	r3, #128	@ 0x80
 80032bc:	029b      	lsls	r3, r3, #10
 80032be:	4013      	ands	r3, r2
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032ca:	4b17      	ldr	r3, [pc, #92]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80032d0:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43da      	mvns	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	2380      	movs	r3, #128	@ 0x80
 80032e6:	025b      	lsls	r3, r3, #9
 80032e8:	4013      	ands	r3, r2
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	40da      	lsrs	r2, r3
 8003308:	1e13      	subs	r3, r2, #0
 800330a:	d000      	beq.n	800330e <HAL_GPIO_Init+0x2b2>
 800330c:	e6ae      	b.n	800306c <HAL_GPIO_Init+0x10>
  } 
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46c0      	nop			@ (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b006      	add	sp, #24
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	40010000 	.word	0x40010000
 8003320:	48000400 	.word	0x48000400
 8003324:	48000800 	.word	0x48000800
 8003328:	40010400 	.word	0x40010400

0800332c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	0008      	movs	r0, r1
 8003336:	0011      	movs	r1, r2
 8003338:	1cbb      	adds	r3, r7, #2
 800333a:	1c02      	adds	r2, r0, #0
 800333c:	801a      	strh	r2, [r3, #0]
 800333e:	1c7b      	adds	r3, r7, #1
 8003340:	1c0a      	adds	r2, r1, #0
 8003342:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003344:	1c7b      	adds	r3, r7, #1
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800334c:	1cbb      	adds	r3, r7, #2
 800334e:	881a      	ldrh	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003354:	e003      	b.n	800335e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003356:	1cbb      	adds	r3, r7, #2
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b002      	add	sp, #8
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	000a      	movs	r2, r1
 8003370:	1cbb      	adds	r3, r7, #2
 8003372:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800337a:	1cbb      	adds	r3, r7, #2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4013      	ands	r3, r2
 8003382:	041a      	lsls	r2, r3, #16
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	1cb9      	adds	r1, r7, #2
 800338a:	8809      	ldrh	r1, [r1, #0]
 800338c:	400b      	ands	r3, r1
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
}
 8003394:	46c0      	nop			@ (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b004      	add	sp, #16
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f000 fb76 	bl	8003a9c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	d100      	bne.n	80033bc <HAL_RCC_OscConfig+0x20>
 80033ba:	e08e      	b.n	80034da <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033bc:	4bc5      	ldr	r3, [pc, #788]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	220c      	movs	r2, #12
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d00e      	beq.n	80033e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033c8:	4bc2      	ldr	r3, [pc, #776]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	220c      	movs	r2, #12
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d117      	bne.n	8003404 <HAL_RCC_OscConfig+0x68>
 80033d4:	4bbf      	ldr	r3, [pc, #764]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	23c0      	movs	r3, #192	@ 0xc0
 80033da:	025b      	lsls	r3, r3, #9
 80033dc:	401a      	ands	r2, r3
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	025b      	lsls	r3, r3, #9
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d10e      	bne.n	8003404 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e6:	4bbb      	ldr	r3, [pc, #748]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	029b      	lsls	r3, r3, #10
 80033ee:	4013      	ands	r3, r2
 80033f0:	d100      	bne.n	80033f4 <HAL_RCC_OscConfig+0x58>
 80033f2:	e071      	b.n	80034d8 <HAL_RCC_OscConfig+0x13c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d000      	beq.n	80033fe <HAL_RCC_OscConfig+0x62>
 80033fc:	e06c      	b.n	80034d8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f000 fb4c 	bl	8003a9c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <HAL_RCC_OscConfig+0x80>
 800340c:	4bb1      	ldr	r3, [pc, #708]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4bb0      	ldr	r3, [pc, #704]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003412:	2180      	movs	r1, #128	@ 0x80
 8003414:	0249      	lsls	r1, r1, #9
 8003416:	430a      	orrs	r2, r1
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e02f      	b.n	800347c <HAL_RCC_OscConfig+0xe0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10c      	bne.n	800343e <HAL_RCC_OscConfig+0xa2>
 8003424:	4bab      	ldr	r3, [pc, #684]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4baa      	ldr	r3, [pc, #680]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800342a:	49ab      	ldr	r1, [pc, #684]	@ (80036d8 <HAL_RCC_OscConfig+0x33c>)
 800342c:	400a      	ands	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	4ba8      	ldr	r3, [pc, #672]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4ba7      	ldr	r3, [pc, #668]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003436:	49a9      	ldr	r1, [pc, #676]	@ (80036dc <HAL_RCC_OscConfig+0x340>)
 8003438:	400a      	ands	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e01e      	b.n	800347c <HAL_RCC_OscConfig+0xe0>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b05      	cmp	r3, #5
 8003444:	d10e      	bne.n	8003464 <HAL_RCC_OscConfig+0xc8>
 8003446:	4ba3      	ldr	r3, [pc, #652]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4ba2      	ldr	r3, [pc, #648]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800344c:	2180      	movs	r1, #128	@ 0x80
 800344e:	02c9      	lsls	r1, r1, #11
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	4b9f      	ldr	r3, [pc, #636]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b9e      	ldr	r3, [pc, #632]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800345a:	2180      	movs	r1, #128	@ 0x80
 800345c:	0249      	lsls	r1, r1, #9
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0xe0>
 8003464:	4b9b      	ldr	r3, [pc, #620]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b9a      	ldr	r3, [pc, #616]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800346a:	499b      	ldr	r1, [pc, #620]	@ (80036d8 <HAL_RCC_OscConfig+0x33c>)
 800346c:	400a      	ands	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	4b98      	ldr	r3, [pc, #608]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b97      	ldr	r3, [pc, #604]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003476:	4999      	ldr	r1, [pc, #612]	@ (80036dc <HAL_RCC_OscConfig+0x340>)
 8003478:	400a      	ands	r2, r1
 800347a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d014      	beq.n	80034ae <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe fcf6 	bl	8001e74 <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800348e:	f7fe fcf1 	bl	8001e74 <HAL_GetTick>
 8003492:	0002      	movs	r2, r0
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b64      	cmp	r3, #100	@ 0x64
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e2fd      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a0:	4b8c      	ldr	r3, [pc, #560]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	029b      	lsls	r3, r3, #10
 80034a8:	4013      	ands	r3, r2
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0xf2>
 80034ac:	e015      	b.n	80034da <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fe fce1 	bl	8001e74 <HAL_GetTick>
 80034b2:	0003      	movs	r3, r0
 80034b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe fcdc 	bl	8001e74 <HAL_GetTick>
 80034bc:	0002      	movs	r2, r0
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	@ 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e2e8      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b82      	ldr	r3, [pc, #520]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	029b      	lsls	r3, r3, #10
 80034d2:	4013      	ands	r3, r2
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x11c>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2202      	movs	r2, #2
 80034e0:	4013      	ands	r3, r2
 80034e2:	d100      	bne.n	80034e6 <HAL_RCC_OscConfig+0x14a>
 80034e4:	e06c      	b.n	80035c0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034e6:	4b7b      	ldr	r3, [pc, #492]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	220c      	movs	r2, #12
 80034ec:	4013      	ands	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034f0:	4b78      	ldr	r3, [pc, #480]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	220c      	movs	r2, #12
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d11f      	bne.n	800353c <HAL_RCC_OscConfig+0x1a0>
 80034fc:	4b75      	ldr	r3, [pc, #468]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	23c0      	movs	r3, #192	@ 0xc0
 8003502:	025b      	lsls	r3, r3, #9
 8003504:	401a      	ands	r2, r3
 8003506:	2380      	movs	r3, #128	@ 0x80
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	429a      	cmp	r2, r3
 800350c:	d116      	bne.n	800353c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	4b71      	ldr	r3, [pc, #452]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2202      	movs	r2, #2
 8003514:	4013      	ands	r3, r2
 8003516:	d005      	beq.n	8003524 <HAL_RCC_OscConfig+0x188>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d001      	beq.n	8003524 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e2bb      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b6b      	ldr	r3, [pc, #428]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	22f8      	movs	r2, #248	@ 0xf8
 800352a:	4393      	bics	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	00da      	lsls	r2, r3, #3
 8003534:	4b67      	ldr	r3, [pc, #412]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	e041      	b.n	80035c0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d024      	beq.n	800358e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003544:	4b63      	ldr	r3, [pc, #396]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b62      	ldr	r3, [pc, #392]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800354a:	2101      	movs	r1, #1
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe fc90 	bl	8001e74 <HAL_GetTick>
 8003554:	0003      	movs	r3, r0
 8003556:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355a:	f7fe fc8b 	bl	8001e74 <HAL_GetTick>
 800355e:	0002      	movs	r2, r0
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e297      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356c:	4b59      	ldr	r3, [pc, #356]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2202      	movs	r2, #2
 8003572:	4013      	ands	r3, r2
 8003574:	d0f1      	beq.n	800355a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003576:	4b57      	ldr	r3, [pc, #348]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	22f8      	movs	r2, #248	@ 0xf8
 800357c:	4393      	bics	r3, r2
 800357e:	0019      	movs	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	00da      	lsls	r2, r3, #3
 8003586:	4b53      	ldr	r3, [pc, #332]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003588:	430a      	orrs	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e018      	b.n	80035c0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358e:	4b51      	ldr	r3, [pc, #324]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b50      	ldr	r3, [pc, #320]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003594:	2101      	movs	r1, #1
 8003596:	438a      	bics	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe fc6b 	bl	8001e74 <HAL_GetTick>
 800359e:	0003      	movs	r3, r0
 80035a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fe fc66 	bl	8001e74 <HAL_GetTick>
 80035a8:	0002      	movs	r2, r0
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e272      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	4b47      	ldr	r3, [pc, #284]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2202      	movs	r2, #2
 80035bc:	4013      	ands	r3, r2
 80035be:	d1f1      	bne.n	80035a4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2208      	movs	r2, #8
 80035c6:	4013      	ands	r3, r2
 80035c8:	d036      	beq.n	8003638 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d019      	beq.n	8003606 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	4b40      	ldr	r3, [pc, #256]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80035d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035d6:	4b3f      	ldr	r3, [pc, #252]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80035d8:	2101      	movs	r1, #1
 80035da:	430a      	orrs	r2, r1
 80035dc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7fe fc49 	bl	8001e74 <HAL_GetTick>
 80035e2:	0003      	movs	r3, r0
 80035e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e8:	f7fe fc44 	bl	8001e74 <HAL_GetTick>
 80035ec:	0002      	movs	r2, r0
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e250      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fa:	4b36      	ldr	r3, [pc, #216]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	2202      	movs	r2, #2
 8003600:	4013      	ands	r3, r2
 8003602:	d0f1      	beq.n	80035e8 <HAL_RCC_OscConfig+0x24c>
 8003604:	e018      	b.n	8003638 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003606:	4b33      	ldr	r3, [pc, #204]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800360a:	4b32      	ldr	r3, [pc, #200]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800360c:	2101      	movs	r1, #1
 800360e:	438a      	bics	r2, r1
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7fe fc2f 	bl	8001e74 <HAL_GetTick>
 8003616:	0003      	movs	r3, r0
 8003618:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800361c:	f7fe fc2a 	bl	8001e74 <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e236      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362e:	4b29      	ldr	r3, [pc, #164]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	2202      	movs	r2, #2
 8003634:	4013      	ands	r3, r2
 8003636:	d1f1      	bne.n	800361c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2204      	movs	r2, #4
 800363e:	4013      	ands	r3, r2
 8003640:	d100      	bne.n	8003644 <HAL_RCC_OscConfig+0x2a8>
 8003642:	e0b5      	b.n	80037b0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003644:	201f      	movs	r0, #31
 8003646:	183b      	adds	r3, r7, r0
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364c:	4b21      	ldr	r3, [pc, #132]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	2380      	movs	r3, #128	@ 0x80
 8003652:	055b      	lsls	r3, r3, #21
 8003654:	4013      	ands	r3, r2
 8003656:	d110      	bne.n	800367a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003658:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	4b1d      	ldr	r3, [pc, #116]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 800365e:	2180      	movs	r1, #128	@ 0x80
 8003660:	0549      	lsls	r1, r1, #21
 8003662:	430a      	orrs	r2, r1
 8003664:	61da      	str	r2, [r3, #28]
 8003666:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	2380      	movs	r3, #128	@ 0x80
 800366c:	055b      	lsls	r3, r3, #21
 800366e:	4013      	ands	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003674:	183b      	adds	r3, r7, r0
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367a:	4b19      	ldr	r3, [pc, #100]	@ (80036e0 <HAL_RCC_OscConfig+0x344>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	2380      	movs	r3, #128	@ 0x80
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4013      	ands	r3, r2
 8003684:	d11a      	bne.n	80036bc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003686:	4b16      	ldr	r3, [pc, #88]	@ (80036e0 <HAL_RCC_OscConfig+0x344>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4b15      	ldr	r3, [pc, #84]	@ (80036e0 <HAL_RCC_OscConfig+0x344>)
 800368c:	2180      	movs	r1, #128	@ 0x80
 800368e:	0049      	lsls	r1, r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003694:	f7fe fbee 	bl	8001e74 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7fe fbe9 	bl	8001e74 <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b64      	cmp	r3, #100	@ 0x64
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1f5      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <HAL_RCC_OscConfig+0x344>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2380      	movs	r3, #128	@ 0x80
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4013      	ands	r3, r2
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10f      	bne.n	80036e4 <HAL_RCC_OscConfig+0x348>
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	4b02      	ldr	r3, [pc, #8]	@ (80036d4 <HAL_RCC_OscConfig+0x338>)
 80036ca:	2101      	movs	r1, #1
 80036cc:	430a      	orrs	r2, r1
 80036ce:	621a      	str	r2, [r3, #32]
 80036d0:	e036      	b.n	8003740 <HAL_RCC_OscConfig+0x3a4>
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	40021000 	.word	0x40021000
 80036d8:	fffeffff 	.word	0xfffeffff
 80036dc:	fffbffff 	.word	0xfffbffff
 80036e0:	40007000 	.word	0x40007000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10c      	bne.n	8003706 <HAL_RCC_OscConfig+0x36a>
 80036ec:	4bca      	ldr	r3, [pc, #808]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80036ee:	6a1a      	ldr	r2, [r3, #32]
 80036f0:	4bc9      	ldr	r3, [pc, #804]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80036f2:	2101      	movs	r1, #1
 80036f4:	438a      	bics	r2, r1
 80036f6:	621a      	str	r2, [r3, #32]
 80036f8:	4bc7      	ldr	r3, [pc, #796]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	4bc6      	ldr	r3, [pc, #792]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80036fe:	2104      	movs	r1, #4
 8003700:	438a      	bics	r2, r1
 8003702:	621a      	str	r2, [r3, #32]
 8003704:	e01c      	b.n	8003740 <HAL_RCC_OscConfig+0x3a4>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b05      	cmp	r3, #5
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x38c>
 800370e:	4bc2      	ldr	r3, [pc, #776]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003710:	6a1a      	ldr	r2, [r3, #32]
 8003712:	4bc1      	ldr	r3, [pc, #772]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003714:	2104      	movs	r1, #4
 8003716:	430a      	orrs	r2, r1
 8003718:	621a      	str	r2, [r3, #32]
 800371a:	4bbf      	ldr	r3, [pc, #764]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	4bbe      	ldr	r3, [pc, #760]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003720:	2101      	movs	r1, #1
 8003722:	430a      	orrs	r2, r1
 8003724:	621a      	str	r2, [r3, #32]
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0x3a4>
 8003728:	4bbb      	ldr	r3, [pc, #748]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	4bba      	ldr	r3, [pc, #744]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800372e:	2101      	movs	r1, #1
 8003730:	438a      	bics	r2, r1
 8003732:	621a      	str	r2, [r3, #32]
 8003734:	4bb8      	ldr	r3, [pc, #736]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	4bb7      	ldr	r3, [pc, #732]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800373a:	2104      	movs	r1, #4
 800373c:	438a      	bics	r2, r1
 800373e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d014      	beq.n	8003772 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7fe fb94 	bl	8001e74 <HAL_GetTick>
 800374c:	0003      	movs	r3, r0
 800374e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e009      	b.n	8003766 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe fb8f 	bl	8001e74 <HAL_GetTick>
 8003756:	0002      	movs	r2, r0
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	4aaf      	ldr	r2, [pc, #700]	@ (8003a1c <HAL_RCC_OscConfig+0x680>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e19a      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003766:	4bac      	ldr	r3, [pc, #688]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	2202      	movs	r2, #2
 800376c:	4013      	ands	r3, r2
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x3b6>
 8003770:	e013      	b.n	800379a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003772:	f7fe fb7f 	bl	8001e74 <HAL_GetTick>
 8003776:	0003      	movs	r3, r0
 8003778:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377a:	e009      	b.n	8003790 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe fb7a 	bl	8001e74 <HAL_GetTick>
 8003780:	0002      	movs	r2, r0
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	4aa5      	ldr	r2, [pc, #660]	@ (8003a1c <HAL_RCC_OscConfig+0x680>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e185      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	4ba1      	ldr	r3, [pc, #644]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	2202      	movs	r2, #2
 8003796:	4013      	ands	r3, r2
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800379a:	231f      	movs	r3, #31
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a4:	4b9c      	ldr	r3, [pc, #624]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	4b9b      	ldr	r3, [pc, #620]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80037aa:	499d      	ldr	r1, [pc, #628]	@ (8003a20 <HAL_RCC_OscConfig+0x684>)
 80037ac:	400a      	ands	r2, r1
 80037ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2210      	movs	r2, #16
 80037b6:	4013      	ands	r3, r2
 80037b8:	d063      	beq.n	8003882 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d12a      	bne.n	8003818 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80037c2:	4b95      	ldr	r3, [pc, #596]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80037c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c6:	4b94      	ldr	r3, [pc, #592]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80037c8:	2104      	movs	r1, #4
 80037ca:	430a      	orrs	r2, r1
 80037cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80037ce:	4b92      	ldr	r3, [pc, #584]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80037d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037d2:	4b91      	ldr	r3, [pc, #580]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	430a      	orrs	r2, r1
 80037d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037da:	f7fe fb4b 	bl	8001e74 <HAL_GetTick>
 80037de:	0003      	movs	r3, r0
 80037e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80037e4:	f7fe fb46 	bl	8001e74 <HAL_GetTick>
 80037e8:	0002      	movs	r2, r0
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e152      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80037f6:	4b88      	ldr	r3, [pc, #544]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	d0f1      	beq.n	80037e4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003800:	4b85      	ldr	r3, [pc, #532]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003804:	22f8      	movs	r2, #248	@ 0xf8
 8003806:	4393      	bics	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	00da      	lsls	r2, r3, #3
 8003810:	4b81      	ldr	r3, [pc, #516]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003812:	430a      	orrs	r2, r1
 8003814:	635a      	str	r2, [r3, #52]	@ 0x34
 8003816:	e034      	b.n	8003882 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	3305      	adds	r3, #5
 800381e:	d111      	bne.n	8003844 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003820:	4b7d      	ldr	r3, [pc, #500]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003824:	4b7c      	ldr	r3, [pc, #496]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003826:	2104      	movs	r1, #4
 8003828:	438a      	bics	r2, r1
 800382a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800382c:	4b7a      	ldr	r3, [pc, #488]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800382e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003830:	22f8      	movs	r2, #248	@ 0xf8
 8003832:	4393      	bics	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	00da      	lsls	r2, r3, #3
 800383c:	4b76      	ldr	r3, [pc, #472]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800383e:	430a      	orrs	r2, r1
 8003840:	635a      	str	r2, [r3, #52]	@ 0x34
 8003842:	e01e      	b.n	8003882 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003844:	4b74      	ldr	r3, [pc, #464]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003848:	4b73      	ldr	r3, [pc, #460]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800384a:	2104      	movs	r1, #4
 800384c:	430a      	orrs	r2, r1
 800384e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003850:	4b71      	ldr	r3, [pc, #452]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003854:	4b70      	ldr	r3, [pc, #448]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003856:	2101      	movs	r1, #1
 8003858:	438a      	bics	r2, r1
 800385a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7fe fb0a 	bl	8001e74 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003866:	f7fe fb05 	bl	8001e74 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e111      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003878:	4b67      	ldr	r3, [pc, #412]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800387a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387c:	2202      	movs	r2, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d1f1      	bne.n	8003866 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2220      	movs	r2, #32
 8003888:	4013      	ands	r3, r2
 800388a:	d05c      	beq.n	8003946 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800388c:	4b62      	ldr	r3, [pc, #392]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	220c      	movs	r2, #12
 8003892:	4013      	ands	r3, r2
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d00e      	beq.n	80038b6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003898:	4b5f      	ldr	r3, [pc, #380]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	220c      	movs	r2, #12
 800389e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d114      	bne.n	80038ce <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80038a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	23c0      	movs	r3, #192	@ 0xc0
 80038aa:	025b      	lsls	r3, r3, #9
 80038ac:	401a      	ands	r2, r3
 80038ae:	23c0      	movs	r3, #192	@ 0xc0
 80038b0:	025b      	lsls	r3, r3, #9
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d10b      	bne.n	80038ce <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80038b6:	4b58      	ldr	r3, [pc, #352]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80038b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ba:	2380      	movs	r3, #128	@ 0x80
 80038bc:	029b      	lsls	r3, r3, #10
 80038be:	4013      	ands	r3, r2
 80038c0:	d040      	beq.n	8003944 <HAL_RCC_OscConfig+0x5a8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d03c      	beq.n	8003944 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0e6      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01b      	beq.n	800390e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80038d6:	4b50      	ldr	r3, [pc, #320]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80038d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038da:	4b4f      	ldr	r3, [pc, #316]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80038dc:	2180      	movs	r1, #128	@ 0x80
 80038de:	0249      	lsls	r1, r1, #9
 80038e0:	430a      	orrs	r2, r1
 80038e2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fac6 	bl	8001e74 <HAL_GetTick>
 80038e8:	0003      	movs	r3, r0
 80038ea:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ee:	f7fe fac1 	bl	8001e74 <HAL_GetTick>
 80038f2:	0002      	movs	r2, r0
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e0cd      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003900:	4b45      	ldr	r3, [pc, #276]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003904:	2380      	movs	r3, #128	@ 0x80
 8003906:	029b      	lsls	r3, r3, #10
 8003908:	4013      	ands	r3, r2
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x552>
 800390c:	e01b      	b.n	8003946 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800390e:	4b42      	ldr	r3, [pc, #264]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003912:	4b41      	ldr	r3, [pc, #260]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003914:	4943      	ldr	r1, [pc, #268]	@ (8003a24 <HAL_RCC_OscConfig+0x688>)
 8003916:	400a      	ands	r2, r1
 8003918:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe faab 	bl	8001e74 <HAL_GetTick>
 800391e:	0003      	movs	r3, r0
 8003920:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003924:	f7fe faa6 	bl	8001e74 <HAL_GetTick>
 8003928:	0002      	movs	r2, r0
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0b2      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003936:	4b38      	ldr	r3, [pc, #224]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	029b      	lsls	r3, r3, #10
 800393e:	4013      	ands	r3, r2
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x588>
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003944:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d100      	bne.n	8003950 <HAL_RCC_OscConfig+0x5b4>
 800394e:	e0a4      	b.n	8003a9a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003950:	4b31      	ldr	r3, [pc, #196]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	220c      	movs	r2, #12
 8003956:	4013      	ands	r3, r2
 8003958:	2b08      	cmp	r3, #8
 800395a:	d100      	bne.n	800395e <HAL_RCC_OscConfig+0x5c2>
 800395c:	e078      	b.n	8003a50 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	2b02      	cmp	r3, #2
 8003964:	d14c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003966:	4b2c      	ldr	r3, [pc, #176]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800396c:	492e      	ldr	r1, [pc, #184]	@ (8003a28 <HAL_RCC_OscConfig+0x68c>)
 800396e:	400a      	ands	r2, r1
 8003970:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003972:	f7fe fa7f 	bl	8001e74 <HAL_GetTick>
 8003976:	0003      	movs	r3, r0
 8003978:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe fa7a 	bl	8001e74 <HAL_GetTick>
 8003980:	0002      	movs	r2, r0
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e086      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398e:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	2380      	movs	r3, #128	@ 0x80
 8003994:	049b      	lsls	r3, r3, #18
 8003996:	4013      	ands	r3, r2
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800399a:	4b1f      	ldr	r3, [pc, #124]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 800399c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399e:	220f      	movs	r2, #15
 80039a0:	4393      	bics	r3, r2
 80039a2:	0019      	movs	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80039aa:	430a      	orrs	r2, r1
 80039ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80039ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a2c <HAL_RCC_OscConfig+0x690>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	0019      	movs	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	431a      	orrs	r2, r3
 80039c2:	4b15      	ldr	r3, [pc, #84]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c8:	4b13      	ldr	r3, [pc, #76]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b12      	ldr	r3, [pc, #72]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80039ce:	2180      	movs	r1, #128	@ 0x80
 80039d0:	0449      	lsls	r1, r1, #17
 80039d2:	430a      	orrs	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fe fa4d 	bl	8001e74 <HAL_GetTick>
 80039da:	0003      	movs	r3, r0
 80039dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fe fa48 	bl	8001e74 <HAL_GetTick>
 80039e4:	0002      	movs	r2, r0
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e054      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f2:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	049b      	lsls	r3, r3, #18
 80039fa:	4013      	ands	r3, r2
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x644>
 80039fe:	e04c      	b.n	8003a9a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a00:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b04      	ldr	r3, [pc, #16]	@ (8003a18 <HAL_RCC_OscConfig+0x67c>)
 8003a06:	4908      	ldr	r1, [pc, #32]	@ (8003a28 <HAL_RCC_OscConfig+0x68c>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fa32 	bl	8001e74 <HAL_GetTick>
 8003a10:	0003      	movs	r3, r0
 8003a12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a14:	e015      	b.n	8003a42 <HAL_RCC_OscConfig+0x6a6>
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	00001388 	.word	0x00001388
 8003a20:	efffffff 	.word	0xefffffff
 8003a24:	fffeffff 	.word	0xfffeffff
 8003a28:	feffffff 	.word	0xfeffffff
 8003a2c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fe fa20 	bl	8001e74 <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e02c      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a42:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <HAL_RCC_OscConfig+0x708>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	2380      	movs	r3, #128	@ 0x80
 8003a48:	049b      	lsls	r3, r3, #18
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x694>
 8003a4e:	e024      	b.n	8003a9a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e01f      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <HAL_RCC_OscConfig+0x708>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003a62:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <HAL_RCC_OscConfig+0x708>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a66:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	23c0      	movs	r3, #192	@ 0xc0
 8003a6c:	025b      	lsls	r3, r3, #9
 8003a6e:	401a      	ands	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d10e      	bne.n	8003a96 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	23f0      	movs	r3, #240	@ 0xf0
 8003a8a:	039b      	lsls	r3, r3, #14
 8003a8c:	401a      	ands	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b008      	add	sp, #32
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0bf      	b.n	8003c3c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003abc:	4b61      	ldr	r3, [pc, #388]	@ (8003c44 <HAL_RCC_ClockConfig+0x19c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d911      	bls.n	8003aee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b5e      	ldr	r3, [pc, #376]	@ (8003c44 <HAL_RCC_ClockConfig+0x19c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4393      	bics	r3, r2
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8003c44 <HAL_RCC_ClockConfig+0x19c>)
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003adc:	4b59      	ldr	r3, [pc, #356]	@ (8003c44 <HAL_RCC_ClockConfig+0x19c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0a6      	b.n	8003c3c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2202      	movs	r2, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	d015      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2204      	movs	r2, #4
 8003afe:	4013      	ands	r3, r2
 8003b00:	d006      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b02:	4b51      	ldr	r3, [pc, #324]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	4b50      	ldr	r3, [pc, #320]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003b08:	21e0      	movs	r1, #224	@ 0xe0
 8003b0a:	00c9      	lsls	r1, r1, #3
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b10:	4b4d      	ldr	r3, [pc, #308]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	22f0      	movs	r2, #240	@ 0xf0
 8003b16:	4393      	bics	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d04c      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b44      	ldr	r3, [pc, #272]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d120      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e07a      	b.n	8003c3c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	049b      	lsls	r3, r3, #18
 8003b56:	4013      	ands	r3, r2
 8003b58:	d114      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06e      	b.n	8003c3c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003b66:	4b38      	ldr	r3, [pc, #224]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b6a:	2380      	movs	r3, #128	@ 0x80
 8003b6c:	029b      	lsls	r3, r3, #10
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d108      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e062      	b.n	8003c3c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b76:	4b34      	ldr	r3, [pc, #208]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e05b      	b.n	8003c3c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b84:	4b30      	ldr	r3, [pc, #192]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2203      	movs	r2, #3
 8003b8a:	4393      	bics	r3, r2
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	4b2d      	ldr	r3, [pc, #180]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b98:	f7fe f96c 	bl	8001e74 <HAL_GetTick>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba0:	e009      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba2:	f7fe f967 	bl	8001e74 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	4a27      	ldr	r2, [pc, #156]	@ (8003c4c <HAL_RCC_ClockConfig+0x1a4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e042      	b.n	8003c3c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b24      	ldr	r3, [pc, #144]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	220c      	movs	r2, #12
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1ec      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c44 <HAL_RCC_ClockConfig+0x19c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	4013      	ands	r3, r2
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d211      	bcs.n	8003bfa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <HAL_RCC_ClockConfig+0x19c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4393      	bics	r3, r2
 8003bde:	0019      	movs	r1, r3
 8003be0:	4b18      	ldr	r3, [pc, #96]	@ (8003c44 <HAL_RCC_ClockConfig+0x19c>)
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be8:	4b16      	ldr	r3, [pc, #88]	@ (8003c44 <HAL_RCC_ClockConfig+0x19c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2201      	movs	r2, #1
 8003bee:	4013      	ands	r3, r2
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e020      	b.n	8003c3c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	4013      	ands	r3, r2
 8003c02:	d009      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c04:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a11      	ldr	r2, [pc, #68]	@ (8003c50 <HAL_RCC_ClockConfig+0x1a8>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	4b0d      	ldr	r3, [pc, #52]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c18:	f000 f820 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003c1c:	0001      	movs	r1, r0
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c48 <HAL_RCC_ClockConfig+0x1a0>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	220f      	movs	r2, #15
 8003c26:	4013      	ands	r3, r2
 8003c28:	4a0a      	ldr	r2, [pc, #40]	@ (8003c54 <HAL_RCC_ClockConfig+0x1ac>)
 8003c2a:	5cd3      	ldrb	r3, [r2, r3]
 8003c2c:	000a      	movs	r2, r1
 8003c2e:	40da      	lsrs	r2, r3
 8003c30:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_RCC_ClockConfig+0x1b0>)
 8003c32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c34:	2003      	movs	r0, #3
 8003c36:	f7fe f8d7 	bl	8001de8 <HAL_InitTick>
  
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b004      	add	sp, #16
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40022000 	.word	0x40022000
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	00001388 	.word	0x00001388
 8003c50:	fffff8ff 	.word	0xfffff8ff
 8003c54:	08003e50 	.word	0x08003e50
 8003c58:	20000018 	.word	0x20000018

08003c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c76:	4b2d      	ldr	r3, [pc, #180]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	220c      	movs	r2, #12
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	d046      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0xb8>
 8003c86:	d848      	bhi.n	8003d1a <HAL_RCC_GetSysClockFreq+0xbe>
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d002      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x36>
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x3c>
 8003c90:	e043      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c92:	4b27      	ldr	r3, [pc, #156]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c94:	613b      	str	r3, [r7, #16]
      break;
 8003c96:	e043      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	0c9b      	lsrs	r3, r3, #18
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	4a24      	ldr	r2, [pc, #144]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003ca2:	5cd3      	ldrb	r3, [r2, r3]
 8003ca4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003ca6:	4b21      	ldr	r3, [pc, #132]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	220f      	movs	r2, #15
 8003cac:	4013      	ands	r3, r2
 8003cae:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003cb0:	5cd3      	ldrb	r3, [r2, r3]
 8003cb2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	23c0      	movs	r3, #192	@ 0xc0
 8003cb8:	025b      	lsls	r3, r3, #9
 8003cba:	401a      	ands	r2, r3
 8003cbc:	2380      	movs	r3, #128	@ 0x80
 8003cbe:	025b      	lsls	r3, r3, #9
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d109      	bne.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	481a      	ldr	r0, [pc, #104]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cc8:	f7fc fa1e 	bl	8000108 <__udivsi3>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	001a      	movs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4353      	muls	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e01a      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	23c0      	movs	r3, #192	@ 0xc0
 8003cdc:	025b      	lsls	r3, r3, #9
 8003cde:	401a      	ands	r2, r3
 8003ce0:	23c0      	movs	r3, #192	@ 0xc0
 8003ce2:	025b      	lsls	r3, r3, #9
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d109      	bne.n	8003cfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	4814      	ldr	r0, [pc, #80]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xe0>)
 8003cec:	f7fc fa0c 	bl	8000108 <__udivsi3>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4353      	muls	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	4810      	ldr	r0, [pc, #64]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xe4>)
 8003d00:	f7fc fa02 	bl	8000108 <__udivsi3>
 8003d04:	0003      	movs	r3, r0
 8003d06:	001a      	movs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4353      	muls	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	613b      	str	r3, [r7, #16]
      break;
 8003d12:	e005      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003d14:	4b09      	ldr	r3, [pc, #36]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xe0>)
 8003d16:	613b      	str	r3, [r7, #16]
      break;
 8003d18:	e002      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xe4>)
 8003d1c:	613b      	str	r3, [r7, #16]
      break;
 8003d1e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003d20:	693b      	ldr	r3, [r7, #16]
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b006      	add	sp, #24
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	00f42400 	.word	0x00f42400
 8003d34:	08003e60 	.word	0x08003e60
 8003d38:	08003e70 	.word	0x08003e70
 8003d3c:	02dc6c00 	.word	0x02dc6c00
 8003d40:	007a1200 	.word	0x007a1200

08003d44 <memset>:
 8003d44:	0003      	movs	r3, r0
 8003d46:	1882      	adds	r2, r0, r2
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d100      	bne.n	8003d4e <memset+0xa>
 8003d4c:	4770      	bx	lr
 8003d4e:	7019      	strb	r1, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	e7f9      	b.n	8003d48 <memset+0x4>

08003d54 <__libc_init_array>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	2600      	movs	r6, #0
 8003d58:	4c0c      	ldr	r4, [pc, #48]	@ (8003d8c <__libc_init_array+0x38>)
 8003d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d90 <__libc_init_array+0x3c>)
 8003d5c:	1b64      	subs	r4, r4, r5
 8003d5e:	10a4      	asrs	r4, r4, #2
 8003d60:	42a6      	cmp	r6, r4
 8003d62:	d109      	bne.n	8003d78 <__libc_init_array+0x24>
 8003d64:	2600      	movs	r6, #0
 8003d66:	f000 f819 	bl	8003d9c <_init>
 8003d6a:	4c0a      	ldr	r4, [pc, #40]	@ (8003d94 <__libc_init_array+0x40>)
 8003d6c:	4d0a      	ldr	r5, [pc, #40]	@ (8003d98 <__libc_init_array+0x44>)
 8003d6e:	1b64      	subs	r4, r4, r5
 8003d70:	10a4      	asrs	r4, r4, #2
 8003d72:	42a6      	cmp	r6, r4
 8003d74:	d105      	bne.n	8003d82 <__libc_init_array+0x2e>
 8003d76:	bd70      	pop	{r4, r5, r6, pc}
 8003d78:	00b3      	lsls	r3, r6, #2
 8003d7a:	58eb      	ldr	r3, [r5, r3]
 8003d7c:	4798      	blx	r3
 8003d7e:	3601      	adds	r6, #1
 8003d80:	e7ee      	b.n	8003d60 <__libc_init_array+0xc>
 8003d82:	00b3      	lsls	r3, r6, #2
 8003d84:	58eb      	ldr	r3, [r5, r3]
 8003d86:	4798      	blx	r3
 8003d88:	3601      	adds	r6, #1
 8003d8a:	e7f2      	b.n	8003d72 <__libc_init_array+0x1e>
 8003d8c:	08003e80 	.word	0x08003e80
 8003d90:	08003e80 	.word	0x08003e80
 8003d94:	08003e84 	.word	0x08003e84
 8003d98:	08003e80 	.word	0x08003e80

08003d9c <_init>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr

08003da8 <_fini>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr
